<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot2基础篇</title>
      <link href="/eastwind/0.html"/>
      <url>/eastwind/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="小技巧（隐藏指定文件-文件夹）"><a href="#小技巧（隐藏指定文件-文件夹）" class="headerlink" title="小技巧（隐藏指定文件&#x2F;文件夹）"></a>小技巧（隐藏指定文件&#x2F;文件夹）</h1><p>SpringBoot每次创建时都会携带很多没啥用的文件，可以在设置中进行隐藏，不需要每次都删除</p><img src="https://s2.loli.net/2023/09/07/gWt9GlHMcq7pPnm.png" alt="image-20230907143641453" style="zoom: 67%;" /><p>在设置中，可以进行配置</p><img src="https://s2.loli.net/2023/09/07/BZTxtJoaEsRA6wy.png" alt="image-20230907144054936" style="zoom: 50%;" /><h1 id="SpringBoot简介"><a href="#SpringBoot简介" class="headerlink" title="SpringBoot简介"></a>SpringBoot简介</h1><ul><li>SpringBoot是由Pivotal团队提供的全新框架，其设计目的是用来简化Spring应用的初始搭建以及开发过程<ul><li>Spring的缺点<ul><li>依赖设置繁琐</li><li>配置繁琐</li></ul></li><li>SpringBoot的优点<ul><li>起步依赖（简化依赖配置）</li><li>自动配置（简化常用工程相关配置）</li><li>辅助功能（内置服务器，…）</li></ul></li></ul></li></ul><h2 id="parent"><a href="#parent" class="headerlink" title="parent"></a>parent</h2><p>有时候做项目，可能会导入两个相同的坐标，此时可以将它合并到一个文件中去，直接调用一个文件中的内容即可，但依然不太方便，springboot给出了优化的解决</p><img src="https://s2.loli.net/2023/09/07/Q8D3YayVjGBcERp.png" alt="image-20230907151058582" style="zoom:50%;" /><p>它在pom.xml文件中继承了一个父类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而这里面又继承了一个父类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点进去查看后，发现里面有很多的依赖，这些依赖也有设置了对应的版本，当我们使用某一个依赖时，它就会自动通过场景启动器里的<code>spring-boot-starter-parent</code>中的<code>spring-boot-dependencies</code>中写入的对应依赖，来自动设置最合适的版本，这样就不会因为版本不同而出现问题</p><p>总结：</p><ol><li>开发Springboot程序要继承spring-boot-starter-parent</li><li>spring-boot-starter-parent中定义了若干个依赖管理</li><li>继承parent模块可以<strong>避免</strong>多个依赖使用相同技术时出现<strong>依赖</strong>版本<strong>冲突</strong></li><li>继承parent的形式也可以采用引入依赖的形式实现效果</li></ol><h2 id="starter"><a href="#starter" class="headerlink" title="starter"></a>starter</h2><ul><li>SpringBoot中常见项目名称，定义了当前项目使用的所有依赖坐标，以达到<code>减少依赖配置</code>的目的</li></ul><p>实际开发</p><ul><li>使用任意坐标时，仅书写GAV中的G和A，V（version）由SpringBoot提供，除非Springboot未提供对应版本的V</li><li>如发生坐标错误，再指定Version（要小心版本冲突）</li></ul><ol><li>开发SpringBoot程序需要导入坐标时，通常导入对应的starter</li><li>每个不同的starter根据功能不同，通常包含多个依赖坐标</li><li>使用starter可以实现快速配置的效果，达到<code>简化配置</code>的目的</li></ol><h2 id="引导类"><a href="#引导类" class="headerlink" title="引导类"></a>引导类</h2><p>启动方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BootDemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(BootDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SpringBoot的引导类是Boot工程的执行入口，运行main方法就可以启动项目</li><li>SpringBoot工程运行后初始化Spring容器，扫描<strong>引导类所在包</strong>加载bean</li></ul><h2 id="内嵌Tomcat"><a href="#内嵌Tomcat" class="headerlink" title="内嵌Tomcat"></a>内嵌Tomcat</h2><p>Tomcat其实是依靠一个依赖引入进来的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点入该依赖中</p><p>这里内嵌了一个</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>tomcat场景启动器的依赖，里面就有相关的tomcat配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.79<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>tomcat-embed-core</code>这个是tomcat的核心嵌入，里面依赖了它，才会有tomcat服务器，而如果，你不想用tomcat，你可以这样做</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            排除tomcat服务器，引入自己需要的服务器即可--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内置服务器"><a href="#内置服务器" class="headerlink" title="内置服务器"></a>内置服务器</h3><ul><li>tomcat(默认)：apache出品，应用面广，负载了若干较重的组件</li><li>jetty：更轻量级，负载性能远不及tomcat</li><li>undertow：负载性能<strong>勉强</strong>能跑赢tomcat</li></ul><p>总结：</p><ol><li>内嵌Tomcat服务器是SpringBoot<strong>辅助功能</strong>之一</li><li>内嵌Tomcat工作原理是将Tomcat服务器作为对象运行，并将该对象交给<strong>Spring容器管理</strong></li><li>变更内嵌服务器思想是去除现有服务器，添加全新的服务器</li></ol><h1 id="REST风格开发"><a href="#REST风格开发" class="headerlink" title="REST风格开发"></a>REST风格开发</h1><h2 id="REST简介"><a href="#REST简介" class="headerlink" title="REST简介"></a>REST简介</h2><p>REST(Representtational State Transfer)，表现形式状态转换</p><ul><li>传统风格资源描述形式<ul><li><code>http://localhost/user/getById?id=1</code></li><li><code>http://localhost/user/saverUser</code></li></ul></li><li>REST风格描述形式<ul><li><code>http://localhost/user/1</code></li><li><code>http://localhost/user</code><ul><li>优点：<ul><li>隐藏资源的访问行为，无法通过地址得知对资源是何种操作</li><li>书写简化</li></ul></li></ul></li></ul></li></ul><p>按照REST风格访问资源时使用<strong>行为动作</strong>区分对资源进行了何种操作</p><ul><li><p><code>http://localhost/users</code>查询全部用户信息 GET （查询)</p></li><li><p><code>http://localhost/users/1</code>  查询指定用户信息 GET （查询)</p></li><li><p><code>http://localhost/users </code> 添加用户信息 POST （新增&#x2F;保存）</p></li><li><p><code>http://localhost/users</code> 修改用户信息  PUT （修改&#x2F;更新）</p></li><li><p>&#96;&#96;<a href="http://localhost/users/1%60">http://localhost/users/1`</a>  删除用户信息  DELETE （删除）</p></li><li><p>根据REST风格对资源进行访问称为RESTful</p></li></ul><p>注意事项：</p><p>上述行为是约定方式，约定不是规范，可以打破，所以称为REST风格，而不是REST规范</p><p>描述模块的名称通常使用复数，也就是加s的格式描述，表示此类资源，而非单个资源，比如：users、books、accounts………</p><h2 id="参数接收的注解介绍"><a href="#参数接收的注解介绍" class="headerlink" title="参数接收的注解介绍"></a>参数接收的注解介绍</h2><p><code>@RequestBody</code>：用于接收json数据</p><p><code>@PathVariable</code>：用于接收url地址传参或表单传参</p><p><code>@RequestParam</code>：用于接收路径参数，使用{参数名称}描述路径参数</p><p>应用：</p><ul><li>后期开发中，发送请求参数超过1个时，以json为主，@RequestBody应用较广</li><li>如果发送非json格式数据，选用@RequestParam接收请求参数</li><li>采用RESTful进行开发，当参数数量较少时，例如1个，可以采用@PathVariable接收请求路径变量，通常用于传递id值</li></ul><h2 id="RSET快速开发"><a href="#RSET快速开发" class="headerlink" title="RSET快速开发"></a>RSET快速开发</h2><p>编写测试代码</p><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询全部</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hellos&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getAll&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询单个</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hellos/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getById&quot;</span>+id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/hellos&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;更新&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/hellos&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    <span class="comment">// 更新</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/hellos/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化了之前冗余的代码，并且有了一个相当好的风格</p><h1 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h1><p>一般的文件配置可以在application.properties中修改</p><p>修改服务器端口</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务器端口配置</span></span><br><span class="line"><span class="attr">server.port</span>= <span class="string">80</span></span><br><span class="line"><span class="comment"># 修改banner，这里off表示是关闭了</span></span><br><span class="line"><span class="attr">spring.main.banner-mode</span>=<span class="string">off</span></span><br><span class="line"><span class="comment"># spring.banner.image.location=识别banner的图片位置</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 控制日志</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 日志级别</span></span><br><span class="line"><span class="attr">logging.level.root</span> = <span class="string">info</span></span><br></pre></td></tr></table></figure><ul><li>SpringBoot中导入对应的starter后，提供对应配置属性</li><li>书写SpringBoot配置采用关键字+提示形式书写</li></ul><h2 id="三种配置文件类型"><a href="#三种配置文件类型" class="headerlink" title="三种配置文件类型"></a>三种配置文件类型</h2><p>SpringBoot提供了多种属性配置方式</p><ul><li><p>application.properties</p>  <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>= <span class="string">80</span></span><br></pre></td></tr></table></figure></li><li><p>application.yml</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="string">port:81</span></span><br></pre></td></tr></table></figure></li><li><p>application.yaml</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="string">port:81</span></span><br></pre></td></tr></table></figure></li></ul><p>配置文件之间的加载优先级</p><ul><li>properties（最高）</li><li>yml</li><li>yaml（最低）</li></ul><p>不同配置文件中相同配置按照加载优先级相互覆盖，不同配置文件中的<strong>不同配置</strong>全部保留</p><h2 id="yml或yaml属性消失提示"><a href="#yml或yaml属性消失提示" class="headerlink" title="yml或yaml属性消失提示"></a>yml或yaml属性消失提示</h2><p>按照步骤操作即可</p><img src="https://s2.loli.net/2023/09/08/fc6lZJ3qGVThKtA.png" alt="image-20230908163529742" style="zoom: 50%;" /><img src="https://s2.loli.net/2023/09/08/BAHEal4VmxJtIhw.png" alt="image-20230908163648643" style="zoom: 50%;" /><h2 id="yaml数据样式"><a href="#yaml数据样式" class="headerlink" title="yaml数据样式"></a>yaml数据样式</h2><p>YAML(YAML Ain’t Markup Language)，一种数据序列化格式</p><p>优点：</p><ul><li>容易阅读</li><li>容易与脚本语言交互</li><li>以数据为核心，重数据轻格式</li></ul><p>YAML文件拓展名</p><ul><li>.yml</li><li>.yaml</li></ul><p>yaml语法规则</p><ul><li>大小写敏感</li><li>属性层级关系使用多行描述，每行结尾使用冒号结束</li><li>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）</li><li>属性值前添加空格（属性名与属性值之间使用冒号+空格作为分隔）</li></ul><p>核心规则：<strong>数据前面要加空格与冒号隔开</strong></p><p>字面值的表示方式</p><p><img src="https://s2.loli.net/2023/09/08/29xoM4ClyJQrnHf.png" alt="image-20230908170754388"></p><p>数组表示方式：在属性名书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据空格分隔</p><p><img src="https://s2.loli.net/2023/09/08/9cDzQ8PYZxAlERI.png" alt="image-20230908170943814"></p><h2 id="读取yaml单一属性数据"><a href="#读取yaml单一属性数据" class="headerlink" title="读取yaml单一属性数据"></a>读取yaml单一属性数据</h2><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">count:</span> <span class="string">&quot;100&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">likes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">game</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">games</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">games2</span></span><br></pre></td></tr></table></figure><p>HelloController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    读取yaml数据中的单一数据</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    读取多级数据</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;count&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String count;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    读取数组数据</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;likes[1]&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String game;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    读取对象数组(同样的道理)：对象名[第几个对象的索引].字段</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPort</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;端口号为+&quot;</span>+port);</span><br><span class="line">        System.out.println(<span class="string">&quot;统计+&quot;</span>+count);</span><br><span class="line">        System.out.println(<span class="string">&quot;game&quot;</span>+game);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试完成&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用@Value读取单个数据，属性名引用方式：${一级属性名.二级属性名……}</p><h2 id="yaml文件中的变量引用"><a href="#yaml文件中的变量引用" class="headerlink" title="yaml文件中的变量引用"></a>yaml文件中的变量引用</h2><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">baseDir:</span> <span class="string">/var/lib</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用$&#123;属性名&#125;引用数据</span></span><br><span class="line"><span class="comment">#tempDir: /var/lib/1</span></span><br><span class="line"><span class="attr">tempDir:</span> <span class="string">$&#123;baseDir&#125;/1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引用的值为数组的情况</span></span><br><span class="line"><span class="attr">TestDir:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">test1:</span> <span class="string">/var/lib/1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">test2:</span> <span class="string">/var/lib/2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">test3:</span> <span class="string">/var/lib/3</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">UseDir:</span> <span class="string">$&#123;TestDir[0].test1&#125;/test</span></span><br></pre></td></tr></table></figure><p>HelloController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;tempDir&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String tempDir;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;UseDir&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String useDir;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    读取对象数组(同样的道理)：对象名[第几个对象的索引].字段</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPort</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;temp&quot;</span>+tempDir);</span><br><span class="line">        System.out.println(<span class="string">&quot;useDir = &quot;</span> + useDir);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试完成&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试</p><p><img src="https://s2.loli.net/2023/09/09/KRgYqyn8DdJ9HES.png" alt="image-20230909090455825"></p><p>此时，这里也获取到了对应的数据</p><p>如果需要对代码转义，可以在上面加上字符串，下方的\t就会变为对应的转义字符</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">UseDir:</span> <span class="string">&quot;$&#123;TestDir[0].test1&#125;\test&quot;</span></span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useDir = /<span class="keyword">var</span>/lib/<span class="number">1</span>est</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>在配置文件中可以使用属性名引用方式引用属性</li><li>属性值如果出现转义字符，需要使用双引号包裹</li></ul><h2 id="读取yaml全部属性数据"><a href="#读取yaml全部属性数据" class="headerlink" title="读取yaml全部属性数据"></a>读取yaml全部属性数据</h2><p>创建一个<code>Environment</code>并将全部属性自动装配进去，通过<code>Environment.getProperty</code>来得到环境中对应的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;tempDir&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String tempDir;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;UseDir&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String useDir;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">//    读取对象数组(同样的道理)：对象名[第几个对象的索引].字段</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPort</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;temp&quot;</span>+tempDir);</span><br><span class="line">        System.out.println(<span class="string">&quot;useDir = &quot;</span> + useDir);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------&quot;</span>);</span><br><span class="line">        System.out.println(environment.getProperty(<span class="string">&quot;tempDir&quot;</span>));</span><br><span class="line">        System.out.println(environment.getProperty(<span class="string">&quot;UseDir&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试完成&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="读取yaml引用数据类型数据"><a href="#读取yaml引用数据类型数据" class="headerlink" title="读取yaml引用数据类型数据"></a>读取yaml引用数据类型数据</h2><p>application.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建类，用于封装下面的数据</span></span><br><span class="line"><span class="comment"># 由spring帮我们去加载数据到对象中</span></span><br><span class="line"><span class="comment"># 使用时，直接从spring中获取信息使用</span></span><br><span class="line"></span><br><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">driver:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:mysql//localhost:db</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><p>模型类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数据模型，封装yaml文件中对应的数据</span></span><br><span class="line"><span class="comment">// 定义为spring管控的bean</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// 指定加载的数据</span></span><br><span class="line"><span class="comment">// @ConfigurationProperties(&quot;写入对应封装的对象名&quot;)</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;datasource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDataSource</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fun.eastwind.studyboot.MyDataSource;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyDataSource myDataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPort</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(myDataSource);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试完成&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试得出结果</p><p><img src="https://s2.loli.net/2023/09/09/a1JblMtNzgoyxSd.png" alt="image-20230909095906918"></p><h1 id="整合第三方技术"><a href="#整合第三方技术" class="headerlink" title="整合第三方技术"></a>整合第三方技术</h1><h2 id="整合Junit"><a href="#整合Junit" class="headerlink" title="整合Junit"></a>整合Junit</h2><p>步骤：</p><p>1、导入测试对应的starter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、测试类使用@SpringBootTest修饰（一般都是默认自带的）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BootDemo2ApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、使用自动装配（@Autowired）的形式添加要测试的对象</p><p>如果将测试类切换到其他的包下，不在初始的包下，会报错，原因是与引导类不在同一个包下</p><p>此时你需要在@SpringBootTest上添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = BootDemo2Application.class)</span></span><br></pre></td></tr></table></figure><p>指定对应的引导类，这样测试类就可以找到对应的引导类了</p><p>或者还有一种方法，与上面的方法是一样的效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration(classes = BootDemo2Application.class)</span></span><br></pre></td></tr></table></figure><h3 id="注解学习"><a href="#注解学习" class="headerlink" title="注解学习"></a>注解学习</h3><p>名称：@SpringBootTest</p><p>类型：测试类注解</p><p>位置：测试类定义上方</p><p>作用：设置Junit加载的SpringBoot启动类</p><p>相关属性：</p><ul><li>classes：设置SpringBoot启动类</li></ul><p><strong>注意：如果测试类在SpringBoot启动类的包或子包中，可以省略启动类的设置，也就是省略classes的设定</strong></p><h2 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h2><ul><li>核心配置：数据库连接相关信息（连什么？连谁？什么权限）</li><li>映射配置：SQL映射（XML&#x2F;注解）</li></ul><p>创建一个Spring Initializr项目</p><p>并勾选需要的MyBatis相关依赖</p><img src="https://s2.loli.net/2023/09/09/jMEv6sayJGxzSHX.png" alt="image-20230909130337593" style="zoom: 50%;" /><p>在application.yml中编写对应配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/study</span></span><br></pre></td></tr></table></figure><p>这里的配置改成自己的<br>创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写Mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fun.eastwind.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from studytable where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在测试类中进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fun.eastwind.domain.User;</span><br><span class="line"><span class="keyword">import</span> fun.eastwind.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.getUser(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试后，发现没有问题，说明整合完成</p><h3 id="整合MyBatis的小问题"><a href="#整合MyBatis的小问题" class="headerlink" title="整合MyBatis的小问题"></a>整合MyBatis的小问题</h3><ol><li>MySQL8.x驱动强制要求设置时区<ul><li>修改url，添加serverTimezone设定</li><li>修改MYSQL数据库配置（略）</li></ul></li><li>驱动类过时，提醒更换为com.mysql.cj.jdbc.Driver</li></ol><h2 id="整合MyBatisPlus"><a href="#整合MyBatisPlus" class="headerlink" title="整合MyBatisPlus"></a>整合MyBatisPlus</h2><p>MyBtais-Plus与MyBatis的区别</p><ul><li>导入坐标不同</li><li>数据层实现简化</li></ul><p>由于MyBatisPlus未被Spring收录，这里只引入一个mysql的坐标</p><p>mybatisplus需要自己引入对应的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.baomidou/mybatis-plus-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>导入后，你可以将spring-boot-starter的依赖删除，因为mybatis-plus-boot-starter是包含着它的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/study</span></span><br></pre></td></tr></table></figure><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> fun.eastwind.demo1.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fun.eastwind.demo1.domain.User;</span><br><span class="line"><span class="keyword">import</span> fun.eastwind.demo1.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo1ApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后，会出现一个错误<code>Cause: java.sql.SQLSyntaxErrorException: Table &#39;study.user&#39; doesn&#39;t exist</code></p><p>说是表不存在，为什么呢，因为MP（mybatisplus）会直接将实体类的名称小写后，作为表名</p><p>解决方法：为实体类直接添加表名</p><p>在实体类上方添加注解<code>@TableName(&quot;studytable&quot;)</code>，这样就可以指定表名了</p><p>此时，就查询得到结果了</p><p><code>user = User&#123;id=1, name=&#39;张三&#39;, sex=&#39;男&#39;&#125;</code></p><h2 id="整合Druid"><a href="#整合Druid" class="headerlink" title="整合Druid"></a>整合Druid</h2><p>druid的依赖包需要自己导入，在新建项目时勾选mybatis和mysql，因为druid是给数据库使用的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置与实体类，同整合mybatis与mybatisplus时相同</p><p>这里我使用的mybatisplus，所以引入一下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.baomidou/mybatis-plus-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置方式：</p><p>1、直接在application.yml中编写</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/study</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure><p>2、推荐使用第二种，虽然两种都行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/study</span></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fun.eastwind.demo2.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo2ApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;userMapper.selectById(1) = &quot;</span> + userMapper.selectById(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看打印结果</p><p>这里显示初始化数据源</p><p><img src="https://s2.loli.net/2023/09/09/2ZLrncsFiwSQvpt.png" alt="image-20230909143701462"></p><h1 id="SSMP整合"><a href="#SSMP整合" class="headerlink" title="SSMP整合"></a>SSMP整合</h1><p>SSMP（spring、springmvc、mybatisplus）</p><h2 id="整合分析"><a href="#整合分析" class="headerlink" title="整合分析"></a>整合分析</h2><ul><li>实体类开发：使用Lombok快速制作实体类</li><li>Dao开发：整合MyBatisplus，制作数据层测试类</li><li>Service开发：基于MyBatisplus进行增量开发，制作业务层测试类</li><li>Controller开发：基于Restful开发，使用PostMan测试接口功能，前后端开发协议制作</li><li>页面开发：基于VUE+ElementUI制作，前后端联调，页面数据处理，页面消息处理<ul><li>列表、新增、修改、删除、分页、查询</li></ul></li><li>项目异常处理</li><li>按条件查询：页面功能调整、Controller修正功能、Service修正功能</li></ul><h2 id="模块创建"><a href="#模块创建" class="headerlink" title="模块创建"></a>模块创建</h2><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.baomidou/mybatis-plus-boot-starter --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改配置</p><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h2 id="实体类开发"><a href="#实体类开发" class="headerlink" title="实体类开发"></a>实体类开发</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableName(&quot;studytable&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据层标准开发"><a href="#数据层标准开发" class="headerlink" title="数据层标准开发"></a>数据层标准开发</h2><p>修改配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/study</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>编写Mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> fun.eastwind.module_practice.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fun.eastwind.module_practice.domain.User;</span><br><span class="line"><span class="keyword">import</span> fun.eastwind.module_practice.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ModulePracticeApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        userMapper.insert(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;女&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下，没啥问题</p><p>为MP添加一下id自增策略，不然后面可能会有问题，因为表中的id采用的是自增策略</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure><h2 id="开启MP的运行日志"><a href="#开启MP的运行日志" class="headerlink" title="开启MP的运行日志"></a>开启MP的运行日志</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># 标准输出</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p>再次运行测试类，就可以在控制台看到打印的日志信息了</p><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>创建拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MPConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个mybatisPlus的拦截器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">// 添加分页的拦截器</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="comment">// 返回mybatisPlus的拦截器</span></span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// page对象需要当前页和页码</span></span><br><span class="line">    <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">    <span class="comment">// selectPage里需要一个page对象</span></span><br><span class="line">    userMapper.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2023/09/09/82bEljaGiwxtPyR.png" alt="image-20230909162052949" style="zoom:50%;" /><p>分页的方法</p><img src="https://s2.loli.net/2023/09/09/6YnWDsgi9uaPMLx.png" alt="image-20230909161834629" style="zoom: 50%;" /><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><p>使用QueryWrapper对象封装查询条件，推荐使用LambdaQueryWrapper对象，所有查询操作封装成方法调用</p><p>编写代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// QueryWrapper是用来进行查询的</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// like是进行模糊匹配</span></span><br><span class="line">    queryWrapper.like(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张&quot;</span>);</span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(queryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以很明显的看到下面的语句是模糊查询</p><img src="https://s2.loli.net/2023/09/09/vijF3tmngk5UE9N.png" alt="image-20230909163349509" style="zoom:67%;" /><p>也可以使用另一种</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 提升了安全性，这样不会轻易的写错字段名之类的</span></span><br><span class="line">    queryWrapper.like(User::getName,<span class="string">&quot;张&quot;</span>);</span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(queryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般情况下，数据是由外界传递的，万一出现状况，数据传递出来一个Null，此时，就会出现问题，像这样的like匹配，就会将null传递过来，并由null进行模糊匹配（%null%）</p><p>queryWrapper这里可以添加一个condition（条件），在这个条件中就可以对null值进行判断了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张&quot;</span>;</span><br><span class="line">    <span class="comment">// 提升了安全性，这样不会轻易的写错字段名之类的</span></span><br><span class="line">    <span class="comment">// 当name不为空时，才进行模糊匹配</span></span><br><span class="line">    queryWrapper.like(name != <span class="literal">null</span>,User::getName,name);</span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(queryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层开发"><a href="#业务层开发" class="headerlink" title="业务层开发"></a>业务层开发</h2><ul><li>Service层接口定义与数据层接口定义具有较大区别，不要混用<ul><li>selectByUserNameAndPassword(String username,String password)</li><li>login(String username,String password)</li></ul></li></ul><p>UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fun.eastwind.module_practice.domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    Boolean <span class="title function_">save</span><span class="params">(User user)</span>;</span><br><span class="line">    Boolean <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line">    Boolean <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line">    User <span class="title function_">selectById</span><span class="params">(Integer id)</span>;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行数据库增删改操作时，会返回一个数值，如果数值为整数，说明操作成功，否则失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fun.eastwind.module_practice.domain.User;</span><br><span class="line"><span class="keyword">import</span> fun.eastwind.module_practice.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> fun.eastwind.module_practice.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">save</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.insert(user) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">update</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.updateById(user) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.deleteById(id) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">selectById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fun.eastwind.module_practice.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        userService.save(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没啥问题</p><p>刚刚少写了一个分页，再到service中进行编写<br>UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IPage&lt;User&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> current, <span class="type">int</span> pageSize)</span>;</span><br></pre></td></tr></table></figure><p>UserServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> IPage&lt;User&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> current, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">    <span class="type">IPage</span> <span class="variable">iPage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>&lt;User&gt;(current,pageSize);</span><br><span class="line">    <span class="keyword">return</span> userMapper.selectPage(iPage,<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    userService.page(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <img src="https://s2.loli.net/2023/09/10/bZzG46kaFL7Xh9e.png" alt="image-20230910130738572" style="zoom:67%;" /><p>这里对UserService的方法说明一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">save</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.insert(user) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>为什么是判断是否大于0呢，因为这里操作成功后都是返回正值，而失败都是负值，测试一下，来看看效果</p><p><img src="https://s2.loli.net/2023/09/10/IKFOVTXPfUcwGqH.png" alt="image-20230910131130122"></p><p>测试service可能不太明确，直接拿mapper来进行一个测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">    System.out.println(userMapper.insert(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;男&quot;</span>)));</span><br><span class="line">    System.out.println(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/09/10/x6O9pbQJnvqzG4Y.png" alt="image-20230910131317212"></p><p>这里发现成功后，会返回正值1，插入失败，通常会返回-1</p><h2 id="业务层快速开发"><a href="#业务层快速开发" class="headerlink" title="业务层快速开发"></a>业务层快速开发</h2><p>快速开发方案</p><ul><li>使用MyBatisPlus提供有业务层通用接口(IService<T>)与业务层通用实现类(ServiceImpl&lt;M,T&gt;)</li><li>使用通用类基础上做功能重载或功能追加</li><li>注意重载时不要覆盖原始操作，避免原始提供的功能丢失</li></ul><p>IUserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> fun.eastwind.module_practice.domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IUserServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> fun.eastwind.module_practice.domain.User;</span><br><span class="line"><span class="keyword">import</span> fun.eastwind.module_practice.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> fun.eastwind.module_practice.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IUserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fun.eastwind.module_practice.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IUserServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; list = userService.list();</span><br><span class="line">        <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没啥问题</p><h2 id="表现层标准开发"><a href="#表现层标准开发" class="headerlink" title="表现层标准开发"></a>表现层标准开发</h2><ul><li>基于Restful进行表现层接口开发</li><li>使用Postman测试表现层接口功能</li></ul><p>UserController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fun.eastwind.module_practice.domain.User;</span><br><span class="line"><span class="keyword">import</span> fun.eastwind.module_practice.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService iUserService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> iUserService.list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在postman中测试一下，得到了查询的数据</p><img src="https://s2.loli.net/2023/09/10/KOGFqQhUngcexEo.png" alt="image-20230910140359295" style="zoom: 50%;" /><p>接着补全一下其他的代码，方法就不测试了，效果都差不多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fun.eastwind.module_practice.domain.User;</span><br><span class="line"><span class="keyword">import</span> fun.eastwind.module_practice.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService iUserService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> iUserService.list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> iUserService.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iUserService.updateById(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iUserService.removeById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iUserService.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><p>1、基于Restful制作表现层接口</p><ul><li>新增：POST</li><li>删除：DELETE</li><li>修改：PUT</li><li>查询：GET</li></ul><p>2、接收参数</p><ul><li>实体数据：@RequestBody</li><li>路径变量：@PathVariable</li></ul><h2 id="表现层消息的一致性处理"><a href="#表现层消息的一致性处理" class="headerlink" title="表现层消息的一致性处理"></a>表现层消息的一致性处理</h2><p>设置表现层返回结果的模型类，用于后端与前端进行数据格式统一，也称为<strong>前后端数据协议</strong></p><p>Result(模型类)</p><p>模型类中的flag表示是否成功，data接收数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Boolean flag;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样写，每次都需要set里面的flag和data</p><p>所以，进行一下优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Boolean flag;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(Boolean flag, Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(Boolean flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写控制类统一结果返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fun.eastwind.module_practice.domain.User;</span><br><span class="line"><span class="keyword">import</span> fun.eastwind.module_practice.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> fun.eastwind.module_practice.utils.Result;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService iUserService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="literal">true</span>,iUserService.list());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(iUserService.save(user));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(iUserService.updateById(user));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(iUserService.removeById(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="literal">true</span>,iUserService.getById(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h2><p>创建一个异常处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AllException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="string">&quot;出现异常，请联系程序猿小哥为您服务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改之前的Result对象（一致性处理的对象），出现异常被异常处理器拦截后，肯定会有提示信息，所以需要新增一个msg（消息）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Boolean flag;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(Boolean flag, Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(Boolean flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报个异常测试一下</p><p><img src="https://s2.loli.net/2023/09/10/YT3BSvctsIhGKAD.png" alt="image-20230910165417121"></p><p>如果想要指定某些异常，可以在<code>@ExceptionHandler</code>后添加对应的异常类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">doException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">    ex.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="string">&quot;出现异常，请联系程序猿小哥为您服务&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>使用注解@RestControllerAdvice定义SpringMVC异常处理器来处理异常</li><li>异常处理器必须被扫描加载，否则无法生效</li><li>表现层返回结果的模型类中添加消息属性用来传递消息到页面中</li></ol><h2 id="基础篇完结"><a href="#基础篇完结" class="headerlink" title="基础篇完结"></a>基础篇完结</h2><ul><li>pom.xml：配置起步依赖</li><li>application.yml：设置数据源、端口、框架技术相关配置等</li><li>mapper：继承BaseMapper、设置@Mapper注解</li><li>mapper测试类</li><li>service：调用数据层接口或MyBatis-Plus提供的接口快速开发</li><li>service测试类</li><li>controller：基于Restful开发，使用Postman测试跑通功能</li><li>页面：放置在resources目录下的static目录中</li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot3</title>
      <link href="/eastwind/55656a4d.html"/>
      <url>/eastwind/55656a4d.html</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot3核心特性"><a href="#SpringBoot3核心特性" class="headerlink" title="SpringBoot3核心特性"></a>SpringBoot3核心特性</h1><p>SpringBoot帮我们简单、快速地创建一个独立的、生产级别的Spring应用</p><p>大多数SpringBoot应用只需要编写少量配置即可快速整合Spring平台以及第三方技术</p><p><strong>特性</strong>：</p><ul><li><strong>快速创建</strong>独立Spring应用<ul><li>SSM：导包、写配置、启动运行</li></ul></li><li>直接<strong>嵌入</strong>Tomcat、Jetty or Undertow</li><li>提供可选的<strong>starter</strong>，简化应用整合<ul><li>场景启动器（starter）：web、json、邮件、oss（对象存储）、异步、定时任务、缓存…</li></ul></li><li><strong>按需自动配置</strong>Spring以及第三方库</li><li>提供<strong>生产级特性</strong>：如监控指标、健康检查、外部化配置等</li><li>无代码生成、<strong>无xml</strong></li></ul><p>总结：简化开发、简化配置、简化整合、简化部署、简化监控、简化运维</p><h1 id="快速入门开发流程"><a href="#快速入门开发流程" class="headerlink" title="快速入门开发流程"></a>快速入门开发流程</h1><p>在IDEA中新建一个空项目</p><img src="https://s2.loli.net/2023/09/04/zrtUNs8Z5PgVHTj.png" alt="image-20230904162347370" style="zoom: 50%;" /><p>在项目里，新建一个module，在新Module里引入依赖</p><img src="https://s2.loli.net/2023/09/04/PAzWltcwLH6IhSb.png" alt="image-20230904162445147" style="zoom:50%;" /><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    springboot项目都必须继承自spring-boot-starter-parent --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        web开发的场景启动器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Java目录下新建主程序入口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建对应访问接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloConroller</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问地址：<a href="http://localhost:8080/test/hello">http://localhost:8080/test/hello</a></p><p>访问结果</p><p><img src="https://s2.loli.net/2023/09/04/3gUIheNrwfH2T4M.png" alt="image-20230904191759477"></p><h2 id="打包方式"><a href="#打包方式" class="headerlink" title="打包方式"></a>打包方式</h2><p>导入打包依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/09/04/8R6Mm54nibOChqN.png" alt="image-20230904191151356"></p><p>package后即打包成功</p><p><img src="https://s2.loli.net/2023/09/04/8PhVLav6OT9rud2.png" alt="image-20230904191329698"></p><p>打包成功后，进入这个jar包的目录，在命令行输入java -jar 对应的jar包名称</p><p>运行成功后，访问之前的地址，就可以看到响应结果了</p><h1 id="应用分析"><a href="#应用分析" class="headerlink" title="应用分析"></a>应用分析</h1><h2 id="依赖管理分析"><a href="#依赖管理分析" class="headerlink" title="依赖管理分析"></a>依赖管理分析</h2><p>1、为什么导入<code>starter-web</code>，所有的相关依赖都导入进来</p><ul><li>开发什么场景，导入什么场景启动器</li><li>maven依赖传递原则。A-B-C：A就拥有B和C</li><li>导入场景启动器。场景启动器自动把这个场景的所有核心依赖全部导入进来</li></ul><p>2、为什么版本号都不用写</p><ul><li>每个boot项目都有一个父项目<code>spring-boot-starter-parent</code></li><li>parent的父项目是<code>spring-boot-dependencies</code></li><li>父项目版本仲裁中心，把所有常见jar的依赖版本都声明好了</li></ul><p>3、自定义版本号</p><ul><li>利用maven的就近原则<ul><li>直接在当前项目的properties标签声明父项目用的版本属性</li><li>直接在导入依赖的时候声明版本</li></ul></li></ul><h2 id="自动配置分析"><a href="#自动配置分析" class="headerlink" title="自动配置分析"></a>自动配置分析</h2><ul><li>自动配置的Tomcat、SpringMVC等</li><li>默认的包扫码规则<ul><li><code>@SpringBootApplication</code>标注的类是主程序类</li><li>SpringBoot只会扫描主程序所在的包及其下面的子包，自动的component-scan功能</li><li>自定义扫描路径<ul><li>@SpringBootApplication(scanBasePackages&#x3D;”需要扫描的包路径”)<ul><li>@ComponentScan(“需要扫描的包路径”)–&gt; 该注解需要三个共同注解合成为@SpringBootApplication</li></ul></li></ul></li></ul></li><li>配置默认值<ul><li>配置文件的的所有配置项是和某个类的对象值进行一一绑定的。</li><li>绑定了配置文件中每一项值的类：属性类。</li><li>比如<ul><li><code>ServerProperties</code>绑定了所有Tomcat服务器有关的配置</li><li><code>MultipartProperties</code>绑定了所有文件上传相关的配置</li></ul></li></ul></li><li>按需加载自动配置<ul><li>导入场景<code>spring-boot-starter-web</code></li><li>场景启动器除了会导入相关功能依赖，导入一个<code>spring-boot-starter</code>，是所有<code>starter</code>的<code>starter</code>，基础核心starter</li><li><code>spring-boot-starter</code>导入了一个包<code>spring-boot-autoconfigure</code>。包里面都是各种场景的<code>AutoConfigration</code><strong>自动配置类</strong></li><li>虽然全场景的自动配置都在<code>spring-boot-atuoconfigure</code>这个包，但不是全都开启的。<ul><li>导入哪个场景就会开启哪个自动配置</li></ul></li></ul></li></ul><p>总结：导入场景启动器，触发<code>spring-boot-autoconfigure</code>这个包的自动配置生效、容器中就会具有相关场景的功能</p><h1 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h1><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><p>SpringBoot摒弃XML配置方式，改为全注解驱动</p><h2 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h2><p>@Configuration、@SpringBootConfiguration</p><p>@Bean、@Scope</p><p>@Controller、@Service、@Repository、@Component</p><p>@Import</p><p>@ComponenScan</p><p>在&#x2F;eastwind&#x2F;bean目录下新建两个bean，用于测试</p><p>Cat</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用@Configuration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fun.eastwind.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span>      </span><br><span class="line"><span class="comment">// @Configuration标明当前类是一个配置类，配置类本身也是容器中的组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;user&quot;)</span>       </span><br><span class="line">    <span class="comment">// 代替了之前的xml开发的bean标签,组件在容器中的名字是默认是方法名，可以直接修改注解的值</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setAge(<span class="number">66</span>);</span><br><span class="line">        user.setUsername(<span class="string">&quot;用户名&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看一下bean是否已经被管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(MainApplication.class, args);</span><br><span class="line">        <span class="keyword">for</span> (String beanDefinitionName : run.getBeanDefinitionNames()) &#123;</span><br><span class="line">            System.out.println(beanDefinitionName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/09/04/r7LNTHEO6hwj45f.png" alt="image-20230904230120477"></p><p>user的bean已经被注入了</p><p>一般情况下对象都是单实例的，也就是仅存在单一的对象，如果你getBean获取N个对象，那么这N个对象都是一样的，也就是说，都会是一个对象，数据都是共享，比如对象1 &#x3D;&#x3D; 对象2，此时如果使用单实例，结果为true</p><p>如何修改这样的注入呢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setAge(<span class="number">66</span>);</span><br><span class="line">    user.setUsername(<span class="string">&quot;用户名&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Scope可以修改对应的注入</p><p>@SpringbootConfiguration可以替代上面的@Configuration</p><p>@SpringbootConfiguration与@Configuration的区别：</p><ul><li>@SpringbootConfiguration一般是自己写着用的</li><li>@Configuration一般是通用的配置类</li></ul><p>如果要导入一个第三方包下的类，可以使用@Import在配置类上导入，使用方式为：</p><p>@Import(类名.class)，给组件中放指定类型的组件，组件的名字默认是全类名</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>@<strong>Configuration</strong>编写一个配置类</li><li>在配置类中，自定义方法给容器中注册组件，配合@Bean</li><li>或使用@Import导入第三方的组件</li></ol><h2 id="条件注解"><a href="#条件注解" class="headerlink" title="条件注解"></a>条件注解</h2><p>如果注解指定的条件成立，则触发指定行为</p><p>一般以@ConditionalOnXXX来命名</p><p>@ConditionalOnClass：如果类路径中存在这个类（一般泛指导入了某个类的jar包，类路径中才会存在这个类），则触发指定行为</p><p>@ConditionalMissingClass：如果类路径中不存在这个类，则触发指定行为</p><p>@ConditionalOnBean：如果容器中存在这个Bean（组件），则触发指定行为</p><p>@ConditionalOnMissingBean：如果容器中不存在这个Bean（组件），则触发指定行为</p><p>场景：</p><ul><li>如果存在<code>MultipartFile</code>这个类，给容器中放一个<code>Cat</code>组件，名为cat01</li><li>否则就给容器中放一个<code>Cat</code>组件，名为cat02</li></ul><p>新建一个TestConfig2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fun.eastwind.bean.Cat;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfig2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnClass(name = &quot;org.springframework.web.multipart&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Cat <span class="title function_">cat01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingClass(value = &quot;org.springframework.web.multipart&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Cat <span class="title function_">cat02</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试是否有效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fun.eastwind.bean.Cat;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(MainApplication.class, args);</span><br><span class="line"><span class="comment">//        for (String beanDefinitionName : run.getBeanDefinitionNames()) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(beanDefinitionName);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">for</span> (String s : run.getBeanNamesForType(Cat.class)) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是cat02，因为不存在multipart这个类</p><ul><li>如果系统中有<code>cat02</code>这个组件，就给容器中放一个User组件，名为zhangsan</li><li>否则就放一个User，名为lisi</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fun.eastwind.bean.Cat;</span><br><span class="line"><span class="keyword">import</span> fun.eastwind.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfig2</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnClass(name = &quot;org.springframework.web.multipart&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Cat <span class="title function_">cat01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingClass(value = &quot;org.springframework.web.multipart&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Cat <span class="title function_">cat02</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnBean(value = Cat.class)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">zhangsan</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(value = Cat.class)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">lisi</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fun.eastwind.bean.Cat;</span><br><span class="line"><span class="keyword">import</span> fun.eastwind.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(MainApplication.class, args);</span><br><span class="line"><span class="comment">//        for (String beanDefinitionName : run.getBeanDefinitionNames()) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(beanDefinitionName);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">for</span> (String s : run.getBeanNamesForType(Cat.class)) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String s : run.getBeanNamesForType(User.class)) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User是存在的，所以返回zhangsan</p><p><img src="https://s2.loli.net/2023/09/05/flEWnwbvHXy7KYI.png" alt="image-20230905111252121"></p><p>如果条件注解放在类上，当条件成立时，整个配置类都生效，否则都不生效</p><p>放在方法上，只是单独对方法进行注解判断</p><h2 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h2><p>@ConfigurationProperties</p><p>@EnableConfigurationProperties：一般用于第三方写好的组件进行属性绑定</p><p>将容器中任意组件(Bean)的属性值和配置文件的配置项的值进行绑定</p><ul><li>给容器中注册组件</li><li>使用@ConfigurationProperties声明组件和配置文件的哪些配置项进行绑定</li></ul><p>新建一个测试bean，Pig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Pig&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们想将Pid的值放到application.properties文件中，需要在Pig类中加入两个注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pig&quot;)</span></span><br></pre></td></tr></table></figure><p>然后在application.properties中设置Pig对象的值</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pig.id</span>=<span class="string">6</span></span><br><span class="line"><span class="attr">pig.name</span>=<span class="string">peiqi</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fun.eastwind.bean.Pig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(MainApplication.class, args);</span><br><span class="line">        <span class="type">Pig</span> <span class="variable">bean</span> <span class="operator">=</span> run.getBean(Pig.class);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到结果<code>Pig&#123;name=&#39;peiqi&#39;, id=6&#125;</code></p><p>也可以使用中文，但是会出现乱码问题，可以在Settings中进行设置</p><img src="https://s2.loli.net/2023/09/05/jf8GDegY1Kd6nhm.png" alt="image-20230905131523575" style="zoom: 50%;" /><p>修改properties文件中的name为佩琪，再次运行</p><p><code>Pig&#123;name=&#39;佩琪&#39;, id=6&#125;</code></p><p>也可以在容器中自己来创建bean对象，因为之前已经在类上绑定了<code>@ConfigurationProperties(prefix = &quot;pig&quot;)</code>，即使创建了bean对象也会有值</p><p>也有另一种方式@EnableConfigurationProperties</p><p>开启配置属性，这个的用法也类似</p><p>还是Pig，这里删除了之前的@Component</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pig&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Pig&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主程序中可以开启指定类的属性绑定</p><p><code>@EnableConfigurationProperties(value = Pig.class)</code>，这里开启了Pig.class的属性绑定，而且会自动将这个类放到容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(value = Pig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(MainApplication.class, args);</span><br><span class="line">        <span class="type">Pig</span> <span class="variable">bean</span> <span class="operator">=</span> run.getBean(Pig.class);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次运行代码，依然没有问题</p><h2 id="自动配置机制"><a href="#自动配置机制" class="headerlink" title="自动配置机制"></a>自动配置机制</h2><p>流程：</p><p>1、导入<code>starter-web</code>：导入了web开发场景</p><ul><li>场景启动器导入了相关场景的所有依赖：<code>starter-json</code>、<code>starter-tomcat</code>、<code>springmvc</code></li><li>每个场景启动器都引入了一个<code>spring-boot-starter</code>，核心场景启动器</li><li>核心场景启动器引入了<code>spring-boot-autoconfigure</code>包</li><li><code>spring-boot-autoconfigure</code>里面囊括了所有场景的所有配置</li><li>只要这个包下的所有类都能生效，那么相当于SpringBoot官方写好的整合功能就生效了</li><li>SpringBoot默认扫描不到<code>spring-boot-autoconfigure</code>下写好的所有配置类。（这些配置类为我们做了整合操作）</li></ul><p>2、<strong>主程序</strong>：<code>@SpringBootApplication</code></p><ul><li><code>@SpringBootApplication</code>由三个注解组成<code>SpringBootConfiguration</code>、<code>@EnableAutoConfiguration</code>、<code>@ComponentScan</code></li><li>SpringBoot默认只能扫描自己主程序所在的包及其下面的子包，扫描不到<code>spring-boot-autoconfigure</code>包中官方写好的<strong>配置类</strong></li></ul><p>3、<code>@EnableAutoConfiguration</code>：SpringBoot开启自动配置的核心。</p><ul><li>是由<code>@Import(AutoConfigurationImportSelector.class)</code>提供功能：批量给容器中导入组件</li><li>SpringBoot启动会默认加载142个配置类</li><li>这142个配置类来自于<code>spring-boot-autoconfigure</code>下，<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>文件指定的</li><li>项目启动的时候利用@Import批量导入组件机制把<code>autoconfigure</code>包下的<code>xxxAutoConfiguration</code>类导入进来(自动配置类)</li></ul><p>4、按需生效</p><ul><li>并不是这<code>142</code>个自动配置类都能生效</li><li>每一个自动配置类，都有条件注解<code>@ConditionalOnxxx</code>，只有条件成立，才能生效</li></ul><p>5、<code>xxxxxAutoConfiguration</code>自动配置类</p><ul><li>给容器中使用@Bean放一堆组件</li><li>每个自动配置类都可能有这个注解<code>@EnableConfigurationProperties(ServerProperties.class)</code>，用来把配置文件中配的指定前缀的属性值封装到<code>xxxProperties</code>属性类中</li><li>以Tomcat为例：服务器的所有配置都是以<code>server</code>开头的。配置都封装到了属性类中</li><li>给容器中放的所有组件的一些核心参数，都来自于<code>xxxProperties</code>。<code>xxxProperties</code>都是和配置文件绑定</li><li>只需要修改配置文件的值，核心组件的底层参数都能修改</li></ul><p>6、写业务，全称无需关心各种整合（底层这些整合写好了，而且也生效了）</p><p>核心流程：</p><ul><li>导入<code>starter</code>，就会导入<code>autoconfigure</code>包</li><li><code>autoconfigure</code>包下有一个文件**<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>**，里面指定了所有启动要加载的自动配置类</li><li>@EnableAutoConfiguration会自动的把上面文件里面写的所有<strong>自动配置类都导入进来</strong>。<code>xxxAutoConfiguration</code>是有条件注解进行按需加载</li><li><code>xxxAutoConfiguration</code>给容器中导入一堆组件，组件都是从<code>xxxProperties</code>中提取属性值</li><li><code>xxxProperties</code>又与配置文件进行了绑定</li></ul><h1 id="自定义场景配置"><a href="#自定义场景配置" class="headerlink" title="自定义场景配置"></a>自定义场景配置</h1><p>以redis为例，导入redis对应的<code>spring-boot-starter</code>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>找到Redis对应的自动注入类(一般以xxxAutoConfiguration命名)</p><p><img src="https://s2.loli.net/2023/09/05/gq5ZpfiP2bKI3Y1.png" alt="image-20230905163532981"></p><p>这里开启了设置对应的属性配置类，查看里面有哪些属性</p><p>前缀是<code>spring.data.redis</code></p><img src="https://s2.loli.net/2023/09/05/WIJtugDcaCAGnzV.png" alt="image-20230905163619922" style="zoom:80%;" /><p>通过前缀就可以在application.properties配置文件中进行属性的配置了</p><p>我的redis需要密码才能访问，视情况自己来定</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.data.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="attr">spring.data.redis.host</span>=<span class="string">localhost</span></span><br><span class="line"><span class="attr">spring.data.redis.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>写一个关于redis的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/incr&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">incr</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">zhangsan</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().increment(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;zhangsan第&quot;</span> + zhangsan + <span class="string">&quot;次出现&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问地址：<a href="http://localhost:8080/incr">http://localhost:8080/incr</a></p><p><img src="https://s2.loli.net/2023/09/05/dEGUBSWD7C9uLFy.png" alt="image-20230905165136669"></p><p>整合Redis：</p><ul><li>选场景：<code>spring-boot-starter-data-redis</code><ul><li>场景AutoConfiguration就是这个场景的自动配置类</li></ul></li><li>写配置：<ul><li>分析到这个场景的自动配置类开启了哪些属性绑定关系</li><li><code>@EnableConfigurationProperties(RedisProperties.class)</code></li><li>修改redis相关的配置</li></ul></li><li>分析组件<ul><li>分析到<code>RedisAutoConfiguration</code>给容器中放了<code>StringRedisTemplate</code></li><li>给业务代码中自动装配<code>StringReidsTemplate</code></li></ul></li></ul><p>定制化：</p><ul><li>修改配置文件</li><li>自定义组件，自己给容器中放一个<code>StringRedisTemplate</code></li></ul><h1 id="YAML配置文件"><a href="#YAML配置文件" class="headerlink" title="YAML配置文件"></a>YAML配置文件</h1><p>痛点：SpringBoot集中化管理配置，<code>application.properties</code></p><p>问题：配置多以后难阅读和修改，层级结构辨识度不高</p><p>YAML是”YAML Ain’t a Markup Language”(YAML不是一种标记语言)。在开发这种语言时，YAML的意思其实是：”Yet Another Markup Language”(是另一种标记语言)</p><ul><li>设计目标，方便读写</li><li>层次分明，更适合做配置文件</li><li>使用<code>.yaml</code>和<code>.yml</code>作为文件后缀</li></ul><p>语法规则：</p><ul><li>k:v ，k v之前是空格区分k</li><li>属性有层级关系，使用下一行，空两个空格</li><li>左侧对齐的代表同一层级的属性</li></ul><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="string">port:8080</span></span><br></pre></td></tr></table></figure><h2 id="复杂对象表示"><a href="#复杂对象表示" class="headerlink" title="复杂对象表示"></a>复杂对象表示</h2><p>对象：键值对的集合，如：映射(map)、哈希(hash)、字典(dictionary)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthDay;</span><br><span class="line">    <span class="keyword">private</span> Boolean like;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Cat&gt; cats;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Cat&gt; catMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的Cat可以自己随便写一个</p><p>开启配置属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(value = Person.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置配置属性的前缀</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(value = Person.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(MainApplication.class, args);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> context.getBean(Person.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;person = &quot;</span> + person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简化JavaBean开发，引入lombok</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Person类上加入该注解，简化开发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>       <span class="comment">// 自动生成Getter，Setter方法</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="comment">#  基本类型</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">张三</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">birthDay:</span> <span class="number">2023</span><span class="string">/10/1</span> <span class="number">10</span><span class="string">:01:00</span></span><br><span class="line">  <span class="attr">like:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#  对象</span></span><br><span class="line">  <span class="attr">cat:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">小猫</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">6</span></span><br><span class="line"><span class="comment">#    对象数组</span></span><br><span class="line">  <span class="attr">cats:</span></span><br><span class="line">  <span class="bullet">-</span>  <span class="attr">name:</span> <span class="string">小猫1</span></span><br><span class="line">     <span class="attr">age:</span> <span class="number">6</span></span><br><span class="line">  <span class="bullet">-</span>  <span class="attr">name:</span> <span class="string">小猫2</span></span><br><span class="line">     <span class="attr">age:</span> <span class="number">6</span></span><br><span class="line"><span class="comment"># Map&lt;String,对象&gt;</span></span><br><span class="line">  <span class="attr">catMap:</span></span><br><span class="line">    <span class="attr">c1:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">小猫2</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">6</span></span><br><span class="line">    <span class="attr">c2:</span></span><br><span class="line">      &#123;<span class="attr">name:</span> <span class="string">小猫3</span> ,<span class="attr">age:</span> <span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure><p>输出结果，就能得到了</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><ul><li>birthDay推荐写为birth-day</li><li>文本<ul><li>单引号不会转义【\n则为普通字符串显示】</li><li>双引号会转义【\n会显示为<strong>换行符</strong>】</li></ul></li><li>大文本(数据量较大的文本)<ul><li><code>|</code>开头，大文本写在下层，<strong>保留文本格式，换行符正确显示</strong></li><li><code>&gt;</code>开头，大文本写在下层，折叠换行符（换行符会被替换为空格）</li></ul></li><li>多文档合并<ul><li>使用<code>---</code>可以把多个yaml文档合并在一个文档中，每个文档区的内容独立</li></ul></li></ul><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ol><li>Spring使用<code>commons-logging</code>作为内部日志，但底层日志实现是开放的。可对接其他日志框架<ol><li>spring5以后<code>commons-logging</code>被spring直接自己写了</li></ol></li><li>支持<code>jul</code>、<code>log4j2</code>、<code>logback</code>。SpringBoot提供了默认的控制台输出配置，也可以配置输出文件</li><li><code>logback</code>是默认使用的</li><li>虽然<strong>日志框架很多</strong>，但是我们不用担心，使用SpringBoot的默认配置就能工作的很好</li></ol><p>SpringBoot怎么把日志配置完成的</p><ol><li>每个<code>starter</code>场景，都会导入一个核心场景<code>spring-boot-starter</code></li><li>核心场景引入了日志的所用功能<code>spring-boot-starter-logging</code></li><li>默认使用了<code>logback+slf4j</code>组合作为默认底层日志</li><li><code>日志是系统一启动就要用</code>,<code>xxxAutoConfiguration</code>是系统启动好了以后放好的组件，后来用的</li><li>日志是利用监听器机制配置好的，<code>ApplicationListener</code></li><li>日志的所有配置都可以通过修改配置文件实现，以<code>logging</code>开始的所有配置</li></ol><p>创建一个带有日志的Spring项目</p><img src="https://s2.loli.net/2023/09/06/TxWRSDXu3vCZjVr.png" alt="image-20230906131510517" style="zoom: 50%;" /><h2 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2023-09-06T13:58:27.534+08:00  INFO 3732 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span><br><span class="line">2023-09-06T13:58:27.534+08:00  INFO 3732 --- [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.7]</span><br></pre></td></tr></table></figure><p>默认输出格式：</p><ul><li>时间和日期：毫秒级精度</li><li>日志级别：<code>ERROR</code>、<code>WARN</code>、<code>INFO</code>、<code>DEBUG</code>、<code>TRACE</code></li><li>进程ID</li><li>—：消息分隔符</li><li>线程名：使用[]包含</li><li>Logger名：通常是产生日志的类名</li><li>消息：日志记录的内容</li></ul><p>注意：logback没有<code>FATAL</code>级别，对应的是<code>ERROR</code></p><h2 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h2><ul><li>由低到高：<code>ALL、TRACE、DEBUG、INFO、WARN、ERROR、FATAL、OFF</code>;<ul><li><strong>只会打印指定级别及以上级别的日志</strong></li><li>ALL：打印所有日志</li><li>TRACE：追踪框架详细流程日志，一般不使用</li><li>DEBUG：开发调试日志</li><li>INFO：关键、感兴趣信息日志</li><li>WARN：警告但不是错误的信息日志，比如：版本过时</li><li>ERROR：业务错误日志，比如出现各种异常</li><li>FATAL：致命错误日志，比如jvm系统崩溃</li><li>OFF：关闭所有日志记录</li></ul></li><li>不指定级别的所有类，都使用root指定的级别作为默认级别</li><li>SpringBoot日志默认级别是<strong>INFO</strong></li></ul><ol><li>在<code>application.properties/yaml</code>中配置<code>logging.level&lt;logger-name&gt;=&lt;level&gt;</code>指定日志级别</li><li><code>level</code>可取值范围：<code>TRACE,DEBUG,INFO,WARN,ERROR,FATAL,or OFF</code>，定义在<code>LogLevel</code>类中</li><li>root的<code>logger-name</code>叫<code>root</code>，可以配置<code>logging.level.root=warn</code>,代表所有未指定日志级别都使用root的warn级别</li></ol><p><img src="https://s2.loli.net/2023/09/06/at1nKjhQpydUxDO.png" alt="image-20230906202442233"></p><h2 id="日志分组"><a href="#日志分组" class="headerlink" title="日志分组"></a>日志分组</h2><p>在SpringBoot中，如果你想调整某些类包下不同的日志级别，需要在yaml文件中一个个的进行配置，很麻烦，我们可以使用分组来决定一组的内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">group:</span></span><br><span class="line"><span class="comment">#    组名</span></span><br><span class="line">    <span class="attr">group1:</span> <span class="string">fun.eastwind.bean,fun.eastwind.config</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line"><span class="comment">#    需要调整的组的级别</span></span><br><span class="line">    <span class="attr">group1:</span> <span class="string">info</span></span><br></pre></td></tr></table></figure><h2 id="文件输出"><a href="#文件输出" class="headerlink" title="文件输出"></a>文件输出</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># name的优先级是大于path的，即使两个都存在，以name为主</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">  <span class="comment"># 指定日志文件的路径，日志文件默认名为spring.log</span></span><br><span class="line">    <span class="comment"># 指定日志文件的路径</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">D:\\</span></span><br><span class="line">    <span class="comment">#  指定日志文件的名称</span></span><br><span class="line">    <span class="comment"># 只写名字，就生成到当前项目同位置的demo.log</span></span><br><span class="line">    <span class="comment"># 写名字+路径：生成到指定位置的指定文件</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hah.log</span></span><br></pre></td></tr></table></figure><h2 id="文件归档和滚动切割"><a href="#文件归档和滚动切割" class="headerlink" title="文件归档和滚动切割"></a>文件归档和滚动切割</h2><p>归档：每天的日志单独存到一个文档中</p><p>切割：每个文件10MB，超过大小切割成另一个文件</p><ol><li><p>每天的日志应该独立分割出来存档，如果使用<code>logback</code>(SpringBoot默认整合)，可以通过<code>application.properties/yaml</code>文件指定日志滚动规则</p></li><li><p>如果是其他日志系统，需要自行配置（添加<code>log4j2.xml</code>或<code>log4j2-spring.xml</code>）</p></li><li><p>支持的滚动规则设置如下</p><table><thead><tr><th>配置项</th><th>描述</th></tr></thead><tbody><tr><td><code>logging.logback.rollingpolicy.file-name-pattern</code></td><td>日志存档的文件名格式(默认值：${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz)</td></tr><tr><td><code>logging.logback.rollingpolicy.clean-history-on-start</code></td><td>应用启动时是否清除以前存档（默认值：false）</td></tr><tr><td><code>logging.logback.rollingpolicy.max-file-size</code></td><td>存档前，每个日志文件的最大大小（默认值：10MB）</td></tr><tr><td><code>logging.logback.rollingpolicy.total-size-cap</code></td><td>日志文件被删除之前，可以容纳的最大大小（默认值：0B）。设置1GB则磁盘存储超过1GB日志后就会删除旧日志文件</td></tr><tr><td><code>logging.logback.rollingpolicy.max-history</code></td><td>日志文件保存的最大天数（默认值7）</td></tr></tbody></table><h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><p> 通常我们配置<code>application.properties</code>就够了。当然也可以自定义。比如：</p><table><thead><tr><th>日志系统</th><th>自定义</th></tr></thead><tbody><tr><td>Logback</td><td><code>logback-spring.xml</code>，<code>logback-spring.groovy</code></td></tr><tr><td>Log4j2</td><td><code>logback.xml</code> or <code>logback.groovy</code></td></tr><tr><td>JDK(Java Util Logging)</td><td><code>logging.properties</code></td></tr></tbody></table><p> 如果可能，我们建议在日志配置中使用<code>-spring</code>变量（例如，<code>logback-spring.xml</code>而不是<code>logback.xml</code>）。如果使用标准配置文件，spring无法完全控制日志初始化</p></li></ol><h1 id="Web开发"><a href="#Web开发" class="headerlink" title="Web开发"></a>Web开发</h1><p>SpringBoot的开发能力，是通过SpringMVC提供的</p><h2 id="Web场景"><a href="#Web场景" class="headerlink" title="Web场景"></a>Web场景</h2><h3 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h3><p>1、整合web场景</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、引入了<code>autoconfigure</code>功能</p><p>3、<code>@EnableAutoConfiguration</code>注解使用<code>@Import(AutoConfigurationImportSelector.class)</code>批量导入组件</p><p>4、加载<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>文件中配置的所有组件</p><p>5、所有自动配置类如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration</span><br><span class="line">---------- 以下是响应式web场景，和现在的没关系</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.ReactiveMultipartAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.WebSessionIdResolverAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration</span><br><span class="line">----------</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration</span><br></pre></td></tr></table></figure><p>6、绑定了配置文件的一堆配置项</p><ul><li>SpringMVC的所有配置<code>spring.mvc</code></li><li>Web场景通用配置<code>spring.web</code></li><li>文件上传配置<code>spring.servlet.multipart</code></li><li>服务器的配置<code>server</code>，比如：编码方式</li></ul><h3 id="默认效果"><a href="#默认效果" class="headerlink" title="默认效果"></a>默认效果</h3><ol><li>包含了<code>ContentNegotiatingViewResolver</code>和<code>BeanNameViewResolver</code>组件，<strong>方便视图解析</strong></li><li>默认的静态资源处理机制：静态资源放在<code>static</code>文件夹下即可直接访问</li><li>自动注册了<code>Converter,GenericConverter，Formatter</code>组件，适配常见的<strong>数据类型转换</strong>和<strong>格式化需求</strong>，这个一般是用来做类型转换的，例如在配置文件中配置了对应的日期格式，到时候返回就会是一种字符流的格式来进行返回</li><li>支持<code>HttpMessageConverters</code>，可以方便返回<code>json</code>等数据类型，<code>RestController</code>注解是以<code>Controller</code>和<code>ResponseBody</code>注解合成的，而<code>ResponseBody</code>，当你返回的是一个字符串时，就会自动返回为字符串，如果是对象，就会自动转为<code>json</code>，其中转为<code>json</code>，就是由<code>HttpMessageConverters</code>来实现的</li><li>注册<code>MessageCodesResolver</code>，方便国际化及错误消息处理</li><li>支持静态<code>index.html</code></li><li>自动使用<code>ConfigurableWebBindingInitalizer</code>，实现<code>消息处理</code>、<code>数据绑定</code>、<code>类型转化</code>、<code>数据校验</code>等功能</li></ol><p>重要：</p><ul><li>如果想保持boot mvc的默认配置，并且自定义更多的mvc配置，如：interceptors，formatters，view controllers等。可以使用<code>@Configuration</code>注解添加一个<code>WebMvcConfigurer</code>类型的配置类，并不要标注<code>@EnableWebMvc</code></li><li>如果想保持boot mvc的默认配置，但要自定义核心组件实例，比如：<code>RequestMappingHandlerMapping</code>，<code>RequestMappingHandlerAdapter</code>，或<code>ExceptionHandlerExceptionResolver</code>，给容器中放一个<code>WebMvcRegistrations</code>组件即可</li><li>如果想全面接管Spring MVC，<code>@Configuration</code>标注一个配置类，并加上<code>@EnableWebMvc</code>注解，实现<code>WebMvcConfigurer</code></li></ul><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><table><thead><tr><th><strong>全自动</strong></th><th>直接编写控制器逻辑</th><th></th><th>全部使用自动配置默认效果</th></tr></thead><tbody><tr><td><strong>手自一体</strong></td><td><code>@Configuration</code>+配置<code>WebMvcConfigurer</code>+配置<strong>WebMvcRegistrations</strong></td><td>不要标注<code>@EnableWebMvc</code></td><td><strong>自动配置效果</strong><br />手动设置部分功能<br />定义MVC底层组件</td></tr><tr><td><strong>全手动</strong></td><td><code>@Configuration</code>+配置<code>WebMvcConfigurer</code></td><td>标注<code>@EnableWebMvc</code></td><td><strong>禁用自动配置效果</strong><br /><strong>全手动设置</strong></td></tr></tbody></table><p>标注与未标注<code>@EnableWebMvc</code>的区别在于：</p><ul><li>未标注时：自动配置后，可以再手动配置其他的内容</li><li>标注后：自动配置不再生效，完全依靠自己来配置</li></ul><p>总结：</p><p>给容器中写一个配置类<code>@Configuration</code>实现<code>WebMvcConfigurer</code>，但是不要标注<code>@EnableWebMvc</code>注解，实现手自一体的效果</p><h3 id="WebMvcAutoConfiguration原理"><a href="#WebMvcAutoConfiguration原理" class="headerlink" title="WebMvcAutoConfiguration原理"></a>WebMvcAutoConfiguration原理</h3><p>放了两个Filter:</p><ol><li><code>HiddenHttpMethodFilter</code>：页面表单提交Rest请求（GET、POST、PUT、DELETE）</li><li><code>FormContextFilter</code>：表单内容Filter，GET(数据放URL后面)、POST(数据放请求体)请求可以携带数据，PUT、DELETE的请求体数据会被忽略</li></ol><p>给容器中放了<code>WebMvcConfigurer</code>组件，给SpringMvc添加各种定制功能</p><h4 id="WebMvcConfigurer接口"><a href="#WebMvcConfigurer接口" class="headerlink" title="WebMvcConfigurer接口"></a>WebMvcConfigurer接口</h4><img src="https://s2.loli.net/2023/09/07/AW7C8YwM6gUGycm.png" alt="image-20230907141451424" style="zoom:67%;" />]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis实战篇</title>
      <link href="/eastwind/4604f75b.html"/>
      <url>/eastwind/4604f75b.html</url>
      
        <content type="html"><![CDATA[<h1 id="短信登录"><a href="#短信登录" class="headerlink" title="短信登录"></a>短信登录</h1><h2 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h2><h3 id="导入SQL"><a href="#导入SQL" class="headerlink" title="导入SQL"></a>导入SQL</h3><p>在资料中运行对应的SQL文件即可，其中的表有</p><table><thead><tr><th align="center">表</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">tb_user</td><td align="center">用户表</td></tr><tr><td align="center">tb_user_info</td><td align="center">用户详情表</td></tr><tr><td align="center">tb_shop</td><td align="center">商户信息表</td></tr><tr><td align="center">tb_shop_type</td><td align="center">商户类型表</td></tr><tr><td align="center">tb_blog</td><td align="center">用户日记表（达人探店日记)</td></tr><tr><td align="center">tb_follow</td><td align="center">用户关注表</td></tr><tr><td align="center">tb_voucher</td><td align="center">优惠券表</td></tr><tr><td align="center">tb_voucher_order</td><td align="center">优惠券的订单表</td></tr></tbody></table><h3 id="导入后端项目"><a href="#导入后端项目" class="headerlink" title="导入后端项目"></a>导入后端项目</h3><p>在idea中打开资料中的项目，并修改一下里面的application.yaml文件里的配置</p><p>添加以下SpringBoot的启动模块</p><p><img src="https://s2.loli.net/2023/08/28/OskUp3KSiCFNPEQ.png" alt="image-20230828091255195"></p><p>启动项目，访问<a href="http://localhost:8081/shop-type/list%E6%B5%8B%E8%AF%95%E4%B8%80%E4%B8%8B%E6%95%88%E6%9E%9C">http://localhost:8081/shop-type/list测试一下效果</a></p><p>效果如下，说明成功了</p><p><img src="https://s2.loli.net/2023/08/28/AacYuoVZ1yKdGB7.png" alt="image-20230828091640486"></p><h3 id="导入前端项目"><a href="#导入前端项目" class="headerlink" title="导入前端项目"></a>导入前端项目</h3><p>在<code>nginx.exe</code>所在的目录打开cmd</p><p>输入<code>start nginx.exe</code></p><p><strong>nginx.exe所在的目录不允许存在中文！！！</strong></p><p>访问<code>localhost:8080</code></p><img src="https://s2.loli.net/2023/08/28/fcITsMiYpuVKJFR.png" alt="image-20230828093008480" style="zoom: 50%;" /><h2 id="基于Session实现登录"><a href="#基于Session实现登录" class="headerlink" title="基于Session实现登录"></a>基于Session实现登录</h2><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p><img src="https://s2.loli.net/2023/08/28/GeIup5vWVZr3HP8.png" alt="image-20230828102525375"></p><h3 id="发送短信验证码"><a href="#发送短信验证码" class="headerlink" title="发送短信验证码"></a>发送短信验证码</h3><p>进入短信验证码的页面，点击按钮查看对应的请求地址</p><p>请求方式为<code>POST</code>，请求路径为<code>/user/code</code>，请求参数为phone（电话号码）</p><p><img src="https://s2.loli.net/2023/08/28/ZMFg6tCIsLW19ve.png" alt="image-20230828145307766"></p><p>来到UserController下进行代码的编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送手机验证码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;code&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(<span class="meta">@RequestParam(&quot;phone&quot;)</span> String phone, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// 发送短信验证码并保存验证码</span></span><br><span class="line">    userService.sendCode(phone,session);</span><br><span class="line">    <span class="keyword">return</span> Result.fail(<span class="string">&quot;功能未完成&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IUserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span>;</span><br></pre></td></tr></table></figure><p>UserServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.util.RandomUtil;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.dto.Result;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.utils.RegexUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 服务实现类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 虎哥</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-12-22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">// 1、校验手机号(RegexUtils里面封装了判断是否是手机号的方法)</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">phoneInvalid</span> <span class="operator">=</span> RegexUtils.isPhoneInvalid(phone);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、如果不符合，返回错误信息</span></span><br><span class="line">        <span class="keyword">if</span> (!phoneInvalid) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;请输入正确的手机号&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、符合，生成验证码(使用随机生成器生成验证码)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> RandomUtil.randomNumbers(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、保存验证码到session</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;code&quot;</span>, code);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、发送验证码(假设验证码发送成功--&gt;由于手机验证码办理太过复杂，所以就不发送了，直接在底层查看)</span></span><br><span class="line">        log.info(<span class="string">&quot;验证码为&#123;&#125;&quot;</span>, code);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启服务器，并测试</p><p><img src="https://s2.loli.net/2023/08/28/EMvdnqopFkJixZy.png" alt="image-20230828172917490"></p><p>这里得到了验证码，说明没毛病了</p><h3 id="短信验证码登录"><a href="#短信验证码登录" class="headerlink" title="短信验证码登录"></a>短信验证码登录</h3><p>点击登录，查看一下请求地址<code>http://localhost:8080/api/user/login</code></p><p>请求方式为<code>POST</code>，请求地址为<code>/user/login</code>，请求参数是以json形式传递的一个phone（电话号码），和code（验证码），无返回值</p><p>在<code>Payload</code>这里可以看到传递来的参数</p><p><img src="https://s2.loli.net/2023/08/28/v2HXBjLe1IcuDkm.png" alt="image-20230828173753182"></p><p>这里我们采用邮箱验证，先在数据库中更改phone字段类型，将varchar的长度改为100</p><p>导入邮箱验证需要的maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.activation/activation --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.activation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.mail/mail --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-email --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-email<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写邮箱验证需要的工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.mail.Authenticator;</span><br><span class="line"><span class="keyword">import</span> javax.mail.MessagingException;</span><br><span class="line"><span class="keyword">import</span> javax.mail.PasswordAuthentication;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Session;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Transport;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage.RecipientType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">        <span class="comment">//可以在这里直接测试方法，填自己的邮箱即可</span></span><br><span class="line">        sendTestMail(<span class="string">&quot;3162106996@qq.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">MailUtils</span>().achieveCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendTestMail</span><span class="params">(String email, String code)</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">        <span class="comment">// 创建Properties 类用于记录邮箱的一些属性</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">// 表示SMTP发送邮件，必须进行身份验证</span></span><br><span class="line">        props.put(<span class="string">&quot;mail.smtp.auth&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="comment">//此处填写SMTP服务器</span></span><br><span class="line">        props.put(<span class="string">&quot;mail.smtp.host&quot;</span>, <span class="string">&quot;smtp.qq.com&quot;</span>);</span><br><span class="line">        <span class="comment">//端口号，QQ邮箱端口587</span></span><br><span class="line">        props.put(<span class="string">&quot;mail.smtp.port&quot;</span>, <span class="string">&quot;587&quot;</span>);</span><br><span class="line">        <span class="comment">// 此处填写，写信人的账号</span></span><br><span class="line">        props.put(<span class="string">&quot;mail.user&quot;</span>, <span class="string">&quot;3162106996@qq.com&quot;</span>);</span><br><span class="line">        <span class="comment">// 此处填写16位STMP口令</span></span><br><span class="line">        props.put(<span class="string">&quot;mail.password&quot;</span>, <span class="string">&quot;你的口令&quot;</span>);</span><br><span class="line">        <span class="comment">// 构建授权信息，用于进行SMTP进行身份验证</span></span><br><span class="line">        <span class="type">Authenticator</span> <span class="variable">authenticator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Authenticator</span>() &#123;</span><br><span class="line">            <span class="keyword">protected</span> PasswordAuthentication <span class="title function_">getPasswordAuthentication</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">// 用户名、密码</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> props.getProperty(<span class="string">&quot;mail.user&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> props.getProperty(<span class="string">&quot;mail.password&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PasswordAuthentication</span>(userName, password);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 使用环境属性和授权信息，创建邮件会话</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">mailSession</span> <span class="operator">=</span> Session.getInstance(props, authenticator);</span><br><span class="line">        <span class="comment">// 创建邮件消息</span></span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessage</span>(mailSession);</span><br><span class="line">        <span class="comment">// 设置发件人</span></span><br><span class="line">        <span class="type">InternetAddress</span> <span class="variable">form</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InternetAddress</span>(props.getProperty(<span class="string">&quot;mail.user&quot;</span>));</span><br><span class="line">        message.setFrom(form);</span><br><span class="line">        <span class="comment">// 设置收件人的邮箱</span></span><br><span class="line">        <span class="type">InternetAddress</span> <span class="variable">to</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InternetAddress</span>(email);</span><br><span class="line">        message.setRecipient(RecipientType.TO, to);</span><br><span class="line">        <span class="comment">// 设置邮件标题</span></span><br><span class="line">        message.setSubject(<span class="string">&quot;Eastwind 邮件测试&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置邮件的内容体</span></span><br><span class="line">        message.setContent(<span class="string">&quot;尊敬的用户:你好!\n注册验证码为:&quot;</span> + code + <span class="string">&quot;(有效期为一分钟,请勿告知他人)&quot;</span>, <span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 最后当然就是发送邮件啦</span></span><br><span class="line">        Transport.send(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">achieveCode</span><span class="params">()</span> &#123;  <span class="comment">//由于数字 1 、 0 和字母 O 、l 有时分不清楚，所以，没有数字 1 、 0</span></span><br><span class="line">        String[] beforeShuffle = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;F&quot;</span>,</span><br><span class="line">                <span class="string">&quot;G&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;M&quot;</span>, <span class="string">&quot;N&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;P&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;S&quot;</span>, <span class="string">&quot;T&quot;</span>, <span class="string">&quot;U&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;W&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y&quot;</span>, <span class="string">&quot;Z&quot;</span>, <span class="string">&quot;a&quot;</span>,</span><br><span class="line">                <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;j&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;m&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;s&quot;</span>, <span class="string">&quot;t&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;v&quot;</span>,</span><br><span class="line">                <span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>&#125;;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(beforeShuffle);<span class="comment">//将数组转换为集合</span></span><br><span class="line">        Collections.shuffle(list);  <span class="comment">//打乱集合顺序</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            sb.append(s); <span class="comment">//将集合转化为字符串</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.substring(<span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改sendCode方法，逻辑如下</p><ul><li>验证手机号&#x2F;邮箱格式</li><li>正确则发送验证码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">        <span class="comment">// 1、校验邮箱(RegexUtils里面封装了判断是否是邮箱的方法)</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">phoneInvalid</span> <span class="operator">=</span> RegexUtils.isEmailInvalid(phone);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、如果不符合，返回错误信息</span></span><br><span class="line">        <span class="keyword">if</span> (!phoneInvalid) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;请输入正确的邮箱号码&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、符合，生成验证码(这里使用刚刚的邮箱工具类，来生成随机邮箱验证码)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> MailUtils.achieveCode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、保存验证码到session</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;code&quot;</span>, code);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、发送验证码(假设验证码发送成功--&gt;由于手机验证码办理太过复杂，所以就不发送了，直接在底层查看)</span></span><br><span class="line">        log.info(<span class="string">&quot;验证码为&#123;&#125;&quot;</span>, code);</span><br><span class="line">        MailUtils.sendTestMail(phone,code);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后输入邮箱，发送验证码，看看能否接收到验证码</p><p>测试没有问题之后，我们继续来编写登录功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loginForm 登录参数，包含手机号、验证码；或者手机号、密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> LoginFormDTO loginForm, HttpSession session)</span>&#123;</span><br><span class="line">        <span class="comment">// 实现登录功能</span></span><br><span class="line">        <span class="keyword">return</span> userService.login(loginForm,session);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>IUserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span>;</span><br></pre></td></tr></table></figure><p>UserServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、校验手机号</span></span><br><span class="line">    <span class="comment">// 获取登录账号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">loginFormPhone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取登录验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">loginFormCode</span> <span class="operator">=</span> loginForm.getCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取session中的验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;code&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、校验验证码</span></span><br><span class="line">    <span class="keyword">if</span> (!RegexUtils.isEmailInvalid(loginFormCode))&#123;</span><br><span class="line">        <span class="comment">// 3、不一致，报错</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;请输入正确的邮箱&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4、一致，根据手机号查询用户</span></span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(User::getPhone,loginFormPhone);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5、判断用户是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 6、不存在，创建新用户并保存</span></span><br><span class="line">        user = createUserWithPhone(loginFormPhone);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7、保存用户信息到session中</span></span><br><span class="line">    session.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户登录</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">private</span> User <span class="title function_">createUserWithPhone</span><span class="params">(String loginFormPhone)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建用户</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    <span class="comment">// 设置手机号</span></span><br><span class="line">    user.setPhone(loginFormPhone);</span><br><span class="line">    <span class="comment">// 设置昵称(默认名)，一个固定前缀+随机字符串</span></span><br><span class="line">    user.setNickName(<span class="string">&quot;user_&quot;</span>+RandomUtil.randomString(<span class="number">8</span>));</span><br><span class="line">    <span class="comment">// 保存到数据库</span></span><br><span class="line">    userService.save(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现登录拦截"><a href="#实现登录拦截" class="headerlink" title="实现登录拦截"></a>实现登录拦截</h3><p>多个业务逻辑需要校验的话，就要用到拦截器了</p><p>创建一个<code>LoginInterceptor</code>类，实现<code>HandlerInterceptor</code>接口，重写其中的两个方法，前置拦截器和完成处理方法，前置拦截器主要用于我们登陆之前的权限校验，完成处理方法是用于处理登录后的信息，避免内存泄露 </p><p>在此之前，需要修改<code>UserHolder</code>中所写的ThreadLocal方法，因为它采用的是UserDto，需要改为User</p><p>UserHolder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.hmdp.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserHolder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;User&gt; tl = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        tl.set(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> User <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tl.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeUser</span><span class="params">()</span>&#123;</span><br><span class="line">        tl.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LoginInterceptor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.hmdp.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截器</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置拦截</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1、获取session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、获取session中的用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 4、不存在，拦截</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、存在，保存用户信息到ThreadLocal(在utils中的UserHolder中已经封装好了这些方法)</span></span><br><span class="line">        UserHolder.saveUser(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6、放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 视图渲染后，返回给用户前</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 移除用户</span></span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置拦截器</p><p>MvcConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.hmdp.utils.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 排除哪些路径</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>()).excludePathPatterns(</span><br><span class="line">                <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/shop-type/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/voucher/**&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写获取当前用户的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/me&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">me</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前登录的用户并返回</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">    <span class="keyword">return</span> Result.ok(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><p>先运行一下<a href="http://localhost:8080/api/user/me">http://localhost:8080/api/user/me</a></p><p>因为有拦截器的存在，而且我们设置了状态码为401</p><img src="https://s2.loli.net/2023/08/28/saPHhpVjuqZToRQ.png" alt="image-20230828222540216" style="zoom:50%;" /><p>没啥问题，登录后再查看一下，成功</p><img src="https://s2.loli.net/2023/08/28/7YFD95knbG4zRa3.png" alt="image-20230828223436217" style="zoom:50%;" /><h3 id="隐藏用户敏感信息"><a href="#隐藏用户敏感信息" class="headerlink" title="隐藏用户敏感信息"></a>隐藏用户敏感信息</h3><p>如果直接存储一个user对象可能会泄露很多的信息在上面，所以我们需要修改存储session属性的方法</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> @Override</span><br><span class="line">    public Result login(LoginFormDTO loginForm, HttpSession session) &#123;</span><br><span class="line">        // 1、校验手机号</span><br><span class="line">        // 获取登录账号</span><br><span class="line">        String loginFormPhone = loginForm.getPhone();</span><br><span class="line"></span><br><span class="line">        // 获取登录验证码</span><br><span class="line">        String loginFormCode = loginForm.getCode();</span><br><span class="line"></span><br><span class="line">        // 获取session中的验证码</span><br><span class="line">        String code = (String) session.getAttribute(&quot;code&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // 2、校验验证码</span><br><span class="line">        if (!RegexUtils.isEmailInvalid(loginFormCode))&#123;</span><br><span class="line">            // 3、不一致，报错</span><br><span class="line">            return Result.fail(&quot;请输入正确的邮箱&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // 4、一致，根据手机号查询用户</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getPhone,loginFormPhone);</span><br><span class="line">        User user = userService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">        // 5、判断用户是否存在</span><br><span class="line">        if (user == null)&#123;</span><br><span class="line">            // 6、不存在，创建新用户并保存</span><br><span class="line">            user = createUserWithPhone(loginFormPhone);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 7、保存用户信息到session中</span><br><span class="line"><span class="deletion">--    session.setAttribute(&quot;user&quot;,user);</span></span><br><span class="line"><span class="addition">++   session.setAttribute(&quot;user&quot;, BeanUtil.copyProperties(user, UserDTO.class));</span></span><br><span class="line"></span><br><span class="line">        return Result.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>再去修改获取session属性的方法</p><p>LoginInterceptor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.hmdp.dto.UserDTO;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截器</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置拦截</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1、获取session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、获取session中的用户</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> (UserDTO) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 4、不存在，拦截</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、存在，保存用户信息到ThreadLocal(在utils中的UserHolder中已经封装好了这些方法)</span></span><br><span class="line">        UserHolder.saveUser(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6、放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 视图渲染后，返回给用户前</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 移除用户</span></span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserHolder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.hmdp.dto.UserDTO;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserHolder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;UserDTO&gt; tl = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(UserDTO user)</span>&#123;</span><br><span class="line">        tl.set(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserDTO <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tl.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeUser</span><span class="params">()</span>&#123;</span><br><span class="line">        tl.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就得到了数据，而且与想要限定的数值是一样的，没有过多的暴露数据</p><p><img src="https://s2.loli.net/2023/08/29/LZojzRI3gEGu8KQ.png" alt="image-20230829085059993"></p><h2 id="集群的session共享问题"><a href="#集群的session共享问题" class="headerlink" title="集群的session共享问题"></a>集群的session共享问题</h2><p><strong>session共享问题</strong>：多台Tomcat并不共享session存储空间，当请求切换到不同Tomcat服务器时导致数据丢失的问题</p><p>当有多台Tomcat的服务器时，是不共享session存储空间的，所以Tomcat提出了一个改进，在多台需要共享数据的Tomcat服务器上做一些配置，就可以共享它们的session，也不能完全说共享，准确来说叫拷贝，就是当一台Tomcat接收到数据后，拷贝到另一台Tomcat服务器上，当然，这个拷贝是有时间的，当你正在拷贝时，其他人如果访问了另外的服务器，此时，拷贝还没完成，但是那个人已经访问了，就会导致拿不到对应的数据，也会导致数据丢失</p><p>解决方案：</p><ul><li>使用Redis缓存，因为Redis不属于Tomcat，而是一个个体，当你使用多台Tomcat去访问时，就没啥问题了</li></ul><h2 id="基于Redis实现共享session登录"><a href="#基于Redis实现共享session登录" class="headerlink" title="基于Redis实现共享session登录"></a>基于Redis实现共享session登录</h2><p>思路：校验登录状态时，前端会携带token,token中存储了用户相关的信息，我们通过token去redis中获取之前登录或注册后的保存起来的用户信息，如果用户信息存在，保存用户信息到ThreadLocal，否则就进行拦截</p><p>而在校验验证码时，我们可以将手机号存到redis中，key为手机号，value为验证码，通过redis中的手机号读取对应的验证码，即使其他人访问，这个数据也会是共享的</p><h3 id="发送短信验证码-1"><a href="#发送短信验证码-1" class="headerlink" title="发送短信验证码"></a>发送短信验证码</h3><p>修改UserServiceImpl中的sendCode方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">        <span class="comment">// 1、校验邮箱(RegexUtils里面封装了判断是否是邮箱的方法)</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">phoneInvalid</span> <span class="operator">=</span> RegexUtils.isEmailInvalid(phone);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、如果不符合(true)，返回错误信息</span></span><br><span class="line">        <span class="keyword">if</span> (phoneInvalid) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;请输入正确的邮箱号码&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、符合，生成验证码(这里使用刚刚的邮箱工具类，来生成随机邮箱验证码)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> MailUtils.achieveCode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、保存验证码到Redis(并设置有效期为2分钟)</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(LOGIN_CODE_KEY + phone,code,LOGIN_CODE_TTL, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、发送验证码(假设验证码发送成功--&gt;由于手机验证码办理太过复杂，所以就不发送了，直接在底层查看)</span></span><br><span class="line">        log.info(<span class="string">&quot;验证码为&#123;&#125;&quot;</span>, code);</span><br><span class="line">        MailUtils.sendTestMail(phone,code);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="短信验证码登录-1"><a href="#短信验证码登录-1" class="headerlink" title="短信验证码登录"></a>短信验证码登录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、校验手机号</span></span><br><span class="line">    <span class="comment">// 获取登录账号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">loginFormPhone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取登录验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">loginFormCode</span> <span class="operator">=</span> loginForm.getCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取redis中的验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(LOGIN_CODE_KEY + loginFormPhone);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、校验验证码</span></span><br><span class="line">    <span class="keyword">if</span> (!RegexUtils.isEmailInvalid(loginFormCode))&#123;</span><br><span class="line">        <span class="comment">// 3、不一致，报错</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;请输入正确的邮箱&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4、一致，根据手机号查询用户</span></span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(User::getPhone,loginFormPhone);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5、判断用户是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 6、不存在，创建新用户并保存</span></span><br><span class="line">        user = createUserWithPhone(loginFormPhone);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7、保存用户信息到Redis中</span></span><br><span class="line">    <span class="comment">// 7.1 随机生成token(UUID)，作为登录令牌</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7.2 将User对象转为Hash存储</span></span><br><span class="line">    <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过BeanUtil.beanToMap可以将bean转为Hash</span></span><br><span class="line">    Map&lt;String, Object&gt; beanToMap = BeanUtil.beanToMap(userDTO);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7.3 token为key，Hash为值存储到redis中</span></span><br><span class="line">    <span class="comment">// putAll可以一次存多个键值对</span></span><br><span class="line">    stringRedisTemplate.opsForHash().putAll(LOGIN_USER_KEY+token, beanToMap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7.4设置token有效期为30分钟，这里应该是每次访问地址时都会设置token的有效期</span></span><br><span class="line">    <span class="comment">// 不然只有一次，就没啥效果，在登录拦截器中设置</span></span><br><span class="line">    stringRedisTemplate.expire(LOGIN_USER_KEY+token,LOGIN_USER_TTL,TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回token</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户登录</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">private</span> User <span class="title function_">createUserWithPhone</span><span class="params">(String loginFormPhone)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建用户</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    <span class="comment">// 设置手机号</span></span><br><span class="line">    user.setPhone(loginFormPhone);</span><br><span class="line">    <span class="comment">// 设置昵称(默认名)，一个固定前缀+随机字符串</span></span><br><span class="line">    user.setNickName(<span class="string">&quot;user_&quot;</span>+RandomUtil.randomString(<span class="number">8</span>));</span><br><span class="line">    <span class="comment">// 保存到数据库</span></span><br><span class="line">    userService.save(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LoginInterceptor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LoginInterceptor</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前置拦截</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 1、获取请求头中的token</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isBlank(token)) &#123;</span><br><span class="line">        <span class="comment">// 不存在token，说明未登录，拦截</span></span><br><span class="line">        response.setStatus(<span class="number">401</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、基于token获取redis中的用户</span></span><br><span class="line">    <span class="comment">// entries方法可以返回一个Map集合</span></span><br><span class="line">    Map&lt;Object, Object&gt; entries = stringRedisTemplate.opsForHash().entries(LOGIN_USER_KEY + token);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、判断用户是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (entries.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// 4、不存在，拦截</span></span><br><span class="line">        response.setStatus(<span class="number">401</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5、将查询到的Hash数据转为Dto对象</span></span><br><span class="line">    <span class="comment">// fillBeanWithMap(传递的map，转换的对象，转换过程中出现错误是否抛出还是忽略)</span></span><br><span class="line">    <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(entries, <span class="keyword">new</span> <span class="title class_">UserDTO</span>(), <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6、存在，保存用户信息到ThreadLocal(在utils中的UserHolder中已经封装好了这些方法)</span></span><br><span class="line">    UserHolder.saveUser(userDTO);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7、刷新token的有效期</span></span><br><span class="line">    stringRedisTemplate.expire(LOGIN_USER_KEY + token,LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 8、放行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MvcConfig</p><p>因为这里使用的构造方法，所以需要在构造器处添加一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    <span class="comment">// 排除哪些路径</span></span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>(stringRedisTemplate)).excludePathPatterns(</span><br><span class="line">            <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/shop-type/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/voucher/**&quot;</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserServiceImpl</p><p>在运行时出现了错误，因为StringRedisTemplate的值只能为String，所以调整了StringRedisTemplate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、校验手机号</span></span><br><span class="line">    <span class="comment">// 获取登录账号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">loginFormPhone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取登录验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">loginFormCode</span> <span class="operator">=</span> loginForm.getCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取redis中的验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(LOGIN_CODE_KEY + loginFormPhone);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、校验验证码</span></span><br><span class="line">    <span class="keyword">if</span> (!RegexUtils.isEmailInvalid(loginFormCode))&#123;</span><br><span class="line">        <span class="comment">// 3、不一致，报错</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;请输入正确的邮箱&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4、一致，根据手机号查询用户</span></span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(User::getPhone,loginFormPhone);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5、判断用户是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 6、不存在，创建新用户并保存</span></span><br><span class="line">        user = createUserWithPhone(loginFormPhone);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7、保存用户信息到Redis中</span></span><br><span class="line">    <span class="comment">// 7.1 随机生成token(UUID)，作为登录令牌</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7.2 将User对象转为Hash存储</span></span><br><span class="line">    <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过BeanUtil.beanToMap可以将bean转为Hash</span></span><br><span class="line">    <span class="comment">// beanToMap可以自定义类型</span></span><br><span class="line">    <span class="comment">// setFieldValueEditor可以改变存储的类型</span></span><br><span class="line">    <span class="comment">// (field,fieldValue) -&gt; fieldValue.toString())可以将返回的值转为String</span></span><br><span class="line">    <span class="comment">// 因为StringRedisTemplate里面的值，只能为String，所以需要修改</span></span><br><span class="line">    Map&lt;String, Object&gt; beanToMap = BeanUtil.beanToMap(userDTO,<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(), CopyOptions.create()</span><br><span class="line">            .setIgnoreNullValue(<span class="literal">true</span>)</span><br><span class="line">            .setFieldValueEditor((field,fieldValue) -&gt; fieldValue.toString()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7.3 token为key，Hash为值存储到redis中</span></span><br><span class="line">    <span class="comment">// putAll可以一次存多个键值对</span></span><br><span class="line">    stringRedisTemplate.opsForHash().putAll(LOGIN_USER_KEY+token, beanToMap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7.4设置token有效期为30分钟</span></span><br><span class="line">    stringRedisTemplate.expire(LOGIN_USER_KEY+token,LOGIN_USER_TTL,TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回token</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试，在Redis中查看验证码是否被缓存以及token的情况</p><p><img src="https://s2.loli.net/2023/08/29/d1O5p8bT7oVSaNt.png" alt="image-20230829121248143"></p><p>查看请求头中的token</p><p><img src="https://s2.loli.net/2023/08/29/Qot6dYW1IxyJnTs.png" alt="image-20230829121427217"></p><h3 id="解决登录状态刷新的问题"><a href="#解决登录状态刷新的问题" class="headerlink" title="解决登录状态刷新的问题"></a>解决登录状态刷新的问题</h3><p>在上面的方案中，他确实可以使用对应路径的拦截，同时刷新登录token令牌的存活时间，但是现在这个拦截器他只是拦截需要被拦截的路径，假设当前用户访问了一些不需要拦截的路径，那么这个拦截器就不会生效，所以此时令牌刷新的动作实际上就不会执行，所以这个方案他是存在问题的</p><p>应该修改为，只要用户登录了，无论访问什么路径都会刷新登录状态的存在时间，这样就解决了问题</p><p>修改登录拦截器<code>LoginInterceptor</code></p><p>登录拦截器负责拦截无token状态的用户，在token刷新后执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截器(拦截无token状态的用户)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置拦截</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 判断是否需要拦截(ThreadLocal中是否存在用户)</span></span><br><span class="line">        <span class="keyword">if</span> (UserHolder.getUser() == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果没有，说明用户未登录，需要拦截</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果有，直接放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RefreshTokenInterceptor</code></p><p>当用户存在并操作时刷新并保存token</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.bean.BeanUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.dto.UserDTO;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.hmdp.utils.RedisConstants.LOGIN_USER_KEY;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.hmdp.utils.RedisConstants.LOGIN_USER_TTL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截器(登录才进行token刷新)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefreshTokenInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RefreshTokenInterceptor</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置拦截</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1、获取请求头中的token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(token)) &#123;</span><br><span class="line">            <span class="comment">// 不管是否存在，都放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、基于token获取redis中的用户</span></span><br><span class="line">        <span class="comment">// entries方法可以返回一个Map集合</span></span><br><span class="line">        Map&lt;Object, Object&gt; entries = stringRedisTemplate.opsForHash().entries(LOGIN_USER_KEY + token);</span><br><span class="line">        <span class="comment">// 3、判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (entries.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// (token是登录后才有的)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、将查询到的Hash数据转为Dto对象</span></span><br><span class="line">        <span class="comment">// fillBeanWithMap(传递的map，转换的对象，转换过程中出现错误是否抛出还是忽略)</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(entries, <span class="keyword">new</span> <span class="title class_">UserDTO</span>(), <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、存在，保存用户信息到ThreadLocal(在utils中的UserHolder中已经封装好了这些方法)</span></span><br><span class="line">        UserHolder.saveUser(userDTO);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6、刷新token的有效期</span></span><br><span class="line">        stringRedisTemplate.expire(LOGIN_USER_KEY + token, LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7、放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 视图渲染后，返回给用户前</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 移除用户</span></span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置拦截器<code>MvcConfig</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.hmdp.utils.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.utils.RefreshTokenInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// excludePathPatterns排除哪些路径</span></span><br><span class="line">        <span class="comment">// 登录拦截器</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>()).excludePathPatterns(</span><br><span class="line">                <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/shop-type/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/voucher/**&quot;</span></span><br><span class="line">        ).order(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 拦截所有请求</span></span><br><span class="line">        <span class="comment">// order一般用来决定拦截器的顺序,order越小，越先执行</span></span><br><span class="line">        <span class="comment">// token刷新拦截器</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">RefreshTokenInterceptor</span>(stringRedisTemplate)).addPathPatterns(<span class="string">&quot;/**&quot;</span>).order(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试访问不同地址时，登录状态是否刷新token</p><h1 id="商户查询缓存"><a href="#商户查询缓存" class="headerlink" title="商户查询缓存"></a>商户查询缓存</h1><h2 id="什么是缓存"><a href="#什么是缓存" class="headerlink" title="什么是缓存"></a>什么是缓存</h2><p>缓存是数据交换的缓冲期(Cache)，是存储数据的临时地方，一般读写性能较高</p><p>或者另类点的说法，就是当你查看了一件商品，商品数据会留着，当你再次访问时，直接为你返回留下的商品数据，大大的减少了服务器的压力</p><p>缓存的作用</p><ul><li>降低后端负载</li><li>提高读写效率，降低响应时间</li></ul><h2 id="添加Redis缓存"><a href="#添加Redis缓存" class="headerlink" title="添加Redis缓存"></a>添加Redis缓存</h2><p>访问商户，查看一下商户对应的请求</p><p><img src="https://s2.loli.net/2023/08/30/eo3PXbG1ChxvLT5.png" alt="image-20230830085759673"></p><p>请求方式<code>GET</code>，请求地址<code>/shop/商户的id</code></p><p>这个请求对应着<code>ShopController</code>下的<code>queryShopById</code>，该方法是直接返回查询到的一个数据库数据</p><h3 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h3><p>缓存的工作流程</p><ul><li>客户端向Redis发起请求<ul><li>请求命中：直接从Redis返回数据给客户端</li><li>请求未命中：从数据库中查询对应数据，并写入到Redis缓存中，再返回数据给客户端</li></ul></li></ul><p>根据id查询商铺缓存的流程</p><ul><li>提交商铺id，从Redis中查询商铺缓存<ul><li>缓存命中：从Redis之间返回商铺缓存</li><li>缓存未命中：根据id查询数据库<ul><li>商铺存在：将商铺数据写入Redis，并返回商铺信息</li><li>商铺不存在：返回404</li></ul></li></ul></li></ul><p><img src="https://s2.loli.net/2023/08/30/FQUntJwTg4uCLNm.png" alt="image-20230830090439233"></p><p>queryShopById</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询商铺信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 商铺id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 商铺详情数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryShopById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> shopService.queryById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IShopService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.hmdp.dto.Result;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.entity.Shop;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *  服务类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 虎哥</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-12-22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IShopService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Shop&gt; &#123;</span><br><span class="line"></span><br><span class="line">    Result <span class="title function_">queryById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ShopServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.bean.BeanUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.dto.Result;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.entity.Shop;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.mapper.ShopMapper;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.service.IShopService;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.hmdp.utils.RedisConstants.CACHE_SHOP_KEY;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *  服务实现类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 虎哥</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-12-22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ShopMapper, Shop&gt; <span class="keyword">implements</span> <span class="title class_">IShopService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">// 从redis查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cache</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);</span><br><span class="line">        <span class="comment">// 判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(cache))&#123;</span><br><span class="line">            <span class="comment">// 存在，直接返回</span></span><br><span class="line">            <span class="comment">// 返回前需要转为对象</span></span><br><span class="line">            <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(cache, Shop.class);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不存在，根据id查询数据库</span></span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="keyword">if</span> (shop == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 查询数据库后不存在，返回错误</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;未找到该商铺信息&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 存在，写入redis</span></span><br><span class="line">        <span class="comment">// 转换前需要将对象转为json字符串存入</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY+id,JSONUtil.toJsonStr(shop));</span><br><span class="line">        <span class="comment">//返回</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试，查看redis，此时已经将数据存入了，再次刷新，也没有再去访问数据库了</p><p><img src="https://s2.loli.net/2023/08/30/53hGoYtEkFwPHu1.png" alt="image-20230830094730782"></p><p>无缓存时的访问速度</p><p><img src="https://s2.loli.net/2023/08/30/ce4dkKR26uBsU9i.png" alt="image-20230830095002607"></p><p>有缓存时的访问速度</p><p><img src="https://s2.loli.net/2023/08/30/AjlpfTv7Xe1J6Da.png" alt="image-20230830095016381"></p><p>快了近十倍，缓存真香</p><h3 id="店铺类型查询业务添加缓存"><a href="#店铺类型查询业务添加缓存" class="headerlink" title="店铺类型查询业务添加缓存"></a>店铺类型查询业务添加缓存</h3><h4 id="使用Redis中的String缓存"><a href="#使用Redis中的String缓存" class="headerlink" title="使用Redis中的String缓存"></a>使用Redis中的String缓存</h4><p>为ShopTypeController的queryTypeList添加缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryTypeList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> typeService.queryList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IShopTypeService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.hmdp.dto.Result;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.entity.ShopType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *  服务类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 虎哥</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-12-22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IShopTypeService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;ShopType&gt; &#123;</span><br><span class="line"></span><br><span class="line">    Result <span class="title function_">queryList</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ShopTypeServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.dto.Result;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.entity.ShopType;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.mapper.ShopTypeMapper;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.service.IShopTypeService;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *  服务实现类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 虎哥</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-12-22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopTypeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ShopTypeMapper, ShopType&gt; <span class="keyword">implements</span> <span class="title class_">IShopTypeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="string">&quot;shop-type:list&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">shopList</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(token);</span><br><span class="line">        <span class="comment">// 查询结果不为空</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(shopList)) &#123;</span><br><span class="line">            List&lt;ShopType&gt; shopTypes = JSONUtil.toList(shopList, ShopType.class);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(shopTypes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 查询结果为空</span></span><br><span class="line">        List&lt;ShopType&gt; sort = query().orderByAsc(<span class="string">&quot;sort&quot;</span>).list();</span><br><span class="line">        <span class="keyword">if</span> (sort == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 如果数据库查到的也为空</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺类型不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 存入redis</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">toJsonStr</span> <span class="operator">=</span> JSONUtil.toJsonStr(sort);</span><br><span class="line">        stringRedisTemplate.opsForValue().set(token,toJsonStr);</span><br><span class="line">        <span class="comment">// 返回数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(sort);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用Redis中的List缓存"><a href="#使用Redis中的List缓存" class="headerlink" title="使用Redis中的List缓存"></a>使用Redis中的List缓存</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//先从Redis中查，这里的常量值是固定前缀 + 店铺id</span></span><br><span class="line">    List&lt;String&gt; shopTypes =</span><br><span class="line">            stringRedisTemplate.opsForList().range(CACHE_SHOP_TYPE_KEY, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//如果不为空（查询到了），则转为ShopType类型直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (!shopTypes.isEmpty()) &#123;</span><br><span class="line">        List&lt;ShopType&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 遍历查询得到的每一个String类型，通过JSONUtil转为ShopType存到新集合中，并返回</span></span><br><span class="line">        <span class="keyword">for</span> (String types : shopTypes) &#123;</span><br><span class="line">            <span class="type">ShopType</span> <span class="variable">shopType</span> <span class="operator">=</span> JSONUtil.toBean(types, ShopType.class);</span><br><span class="line">            tmp.add(shopType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则去数据库中查</span></span><br><span class="line">    List&lt;ShopType&gt; tmp = query().orderByAsc(<span class="string">&quot;sort&quot;</span>).list();</span><br><span class="line">    <span class="keyword">if</span> (tmp == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺类型不存在！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查到了转为json字符串，存入redis</span></span><br><span class="line">    <span class="keyword">for</span> (ShopType shopType : tmp) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSONUtil.toJsonStr(shopType);</span><br><span class="line">        shopTypes.add(jsonStr);</span><br><span class="line">    &#125;</span><br><span class="line">    stringRedisTemplate.opsForList().leftPushAll(CACHE_SHOP_TYPE_KEY,shopTypes);</span><br><span class="line">    <span class="comment">//最终把查询到的商户分类信息返回给前端</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>stream流简化代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 先从Redis中查，这里的常量值是固定前缀 + 店铺id</span></span><br><span class="line">    List&lt;String&gt; shopTypes =</span><br><span class="line">            stringRedisTemplate.opsForList().range(CACHE_SHOP_TYPE_KEY, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 如果不为空（查询到了），则转为ShopType类型直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (!shopTypes.isEmpty()) &#123;</span><br><span class="line">        List&lt;ShopType&gt; tmp = shopTypes.stream().map(type -&gt; JSONUtil.toBean(type, ShopType.class)).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> Result.ok(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 否则去数据库中查</span></span><br><span class="line">    List&lt;ShopType&gt; tmp = query().orderByAsc(<span class="string">&quot;sort&quot;</span>).list();</span><br><span class="line">    <span class="keyword">if</span> (tmp == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺类型不存在！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查到了转为json字符串，存入redis</span></span><br><span class="line">    shopTypes = tmp.stream().map(type -&gt; JSONUtil.toJsonStr(type))</span><br><span class="line">                                    .collect(Collectors.toList());</span><br><span class="line">    stringRedisTemplate.opsForList().leftPushAll(CACHE_SHOP_TYPE_KEY,shopTypes);</span><br><span class="line">    <span class="comment">// 最终把查询到的商户分类信息返回给前端</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存更新策略"><a href="#缓存更新策略" class="headerlink" title="缓存更新策略"></a>缓存更新策略</h2><p>缓存更新是Redis为了节约内存而设计出来的一个东西，主要是因为内存数据宝贵，当我们想Redis插入太多数据，此时就可能会导致缓存中数据过多，所以Redis会对部分数据进行更新，或者把它成为淘汰更合适</p><table><thead><tr><th align="center">内存淘汰</th><th align="center">超时剔除</th><th align="center">主动更新</th><th></th></tr></thead><tbody><tr><td align="center">说明</td><td align="center">不用自己维护， 利用Redis的内存淘汰机制， 当内存不足时自动淘汰部分数据。 下次查询时更新缓存。</td><td align="center">给缓存数据添加TTL时间， 到期后自动删除缓存。 下次查询时更新缓存。</td><td>编写业务逻辑， 在修改数据库的同时， 更新缓存。</td></tr><tr><td align="center">一致性</td><td align="center">差</td><td align="center">一般</td><td>好</td></tr><tr><td align="center">维护成本</td><td align="center">无</td><td align="center">低</td><td>高</td></tr></tbody></table><ul><li>业务场景  <ul><li>低一致性需求：使用内存淘汰机制，例如店铺类型的查询缓存（因为这个很长一段时间都不需要更新）</li><li>高一致性需求：主动更新，并以超时剔除作为兜底方案，例如店铺详情查询的缓存</li></ul></li></ul><p>一般看场景使用</p><h3 id="主动更新策略"><a href="#主动更新策略" class="headerlink" title="主动更新策略"></a>主动更新策略</h3><ul><li>Cache Aside Pattern（缓存旁模式）：由缓存的调用者，在更新数据库的同时更新缓存</li><li>Read&#x2F;Write Through Pattern（读&#x2F;写 通过模式）：缓存与数据库整合为一个服务，由服务来维护一致性。调用者直接调用该服务，无需关心缓存一致性问题<ul><li>缺点：服务难整合</li></ul></li><li>Write Behind Caching Pattern（写在缓存模式后）：调用者只操作缓存，由其他线程异步的将缓存数据持久化到数据库，保证最终一致，或者说缓存被修改后，数据库并不会马上被修改，而是由其他线程异步的将缓存中的数据持久化到数据库中，保证其一致，而且当缓存不断的被操作，异步线程只会取最后的操作效果持久化到数据库<ul><li>缺点：如果缓存中执行了很多操作后，依然没有触发异步线程，此时，如果突然崩溃了，那缓存中的数据就会丢失了，一致性就不存在了</li></ul></li></ul><p>企业中使用较多的是方案一，安全性好，一致性高</p><h3 id="操作缓存和数据库的三个问题"><a href="#操作缓存和数据库的三个问题" class="headerlink" title="操作缓存和数据库的三个问题"></a>操作缓存和数据库的三个问题</h3><h4 id="删除缓存还是更新缓存"><a href="#删除缓存还是更新缓存" class="headerlink" title="删除缓存还是更新缓存"></a>删除缓存还是更新缓存</h4><ul><li>更新缓存：每次更新数据库都更新缓存，无效写操作较多（如果反复更新数据库，而不去读取缓存，那么缓存也被无限制的更新，无效的写操作）</li><li><strong>删除缓存（使用）</strong>：更新数据库时让缓存失效，查询时再更新缓存（更新数据库时删除缓存，我们只需要删除一次缓存，无论更新多少次数据库都没事，完全不影响，当要查询时再更新缓存，完美！）</li></ul><h4 id="如何保证缓存与数据库的操作同时成功或失败"><a href="#如何保证缓存与数据库的操作同时成功或失败" class="headerlink" title="如何保证缓存与数据库的操作同时成功或失败"></a>如何保证缓存与数据库的操作同时成功或失败</h4><ul><li>单体系统，将缓存和数据库放在一个事务中，数据库失败则缓存失败，数据库成功则缓存成功</li><li>分布式系统，利用TCC等分布式事务方案</li></ul><h4 id="先操作缓存还是先操作数据库"><a href="#先操作缓存还是先操作数据库" class="headerlink" title="先操作缓存还是先操作数据库"></a>先操作缓存还是先操作数据库</h4><ul><li><p>先删除缓存，再操作数据库</p><ul><li>正常情况<ul><li>先进行缓存的删除，再更新数据库，此时如果有人查询缓存，必然是没有缓存的，因为缓存被删除了，所以查询数据库，查询得到的是数据库最新的值，写入缓存，查询得到最新的值</li></ul></li><li>异常情况<ul><li>先进行缓存的删除，缓存删除后并没有更新数据库，就切换了其他线程来查询缓存，缓存被删除了，所以没有缓存，则查询数据库，而数据库还没有更新，所以返回了旧的值，缓存依然是旧的值，此时回归更新数据库线程，更新了数据库，数据库中是新的值，缓存是旧的值，有问题</li></ul></li></ul><p>  下图为错误图示例</p>  <img src="https://s2.loli.net/2023/08/30/HZN41QRoAEJUCWF.png" alt="image-20230830141231546" style="zoom: 67%;" /><p>  读写查很快，而数据库更新很慢，所以极容易出现上述的异常情况</p></li><li><p><strong>先操作数据库，再删除缓存（常用）</strong></p><ul><li>正常情况<ul><li>先更新数据库为新数据，再删除缓存，因为缓存删除了，所以如果有人来查询缓存，此时必然是没有的，会先到数据库查询，再为缓存赋值，是最新数据</li></ul></li><li>异常情况（可能性低）<ul><li>假设一种特殊情况：缓存失效了，此时线程1去查数据库，会得到旧数据，得到之后，被线程2拿到了控制权，线程2要改变数据库，再删缓存，那么流程就是，线程2先更新了数据库，又删除了缓存（此时缓存是空的，删了等于没删），删完之后切回线程1，线程1将刚刚查询得到的旧数据写入缓存，此时的缓存是旧数据，而数据库是新数据，有问题</li></ul></li></ul><p>  下图为错误图示例</p>  <img src="https://s2.loli.net/2023/08/30/R4eiNxXfwGuhZUz.png" alt="image-20230830141513424" style="zoom:67%;" /></li></ul><p>缓存更新策略的最佳实践方案：</p><ol><li>低一致性需求：使用Redis自带的内存淘汰机制</li><li>高一致性需求：主动更新，并以超时剔除作为兜底方案<ul><li>读操作：<ul><li>缓存命中直接返回</li><li>缓存未命中则查询数据库，并写入缓存，设定超时时间</li></ul></li><li>写操作：<ul><li>先写数据库，再删除缓存</li><li>要确保数据库与缓存操作的原子性</li></ul></li></ul></li></ol><h2 id="给查询商铺的缓存添加超时剔除和主动更新的策略"><a href="#给查询商铺的缓存添加超时剔除和主动更新的策略" class="headerlink" title="给查询商铺的缓存添加超时剔除和主动更新的策略"></a>给查询商铺的缓存添加超时剔除和主动更新的策略</h2><p>修改ShopController中的业务逻辑，满足下面的需求：</p><ul><li>根据id查询店铺时，如果缓存未命中，则查询数据库，将数据库结果写入缓存，并设置超时时间</li><li>根据id修改店铺时，先修改数据库，再删除缓存</li></ul><h3 id="超时剔除"><a href="#超时剔除" class="headerlink" title="超时剔除"></a>超时剔除</h3><p>ShopServiceImpl（添加了一个超时时间）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">// 从redis查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cache</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);</span><br><span class="line">        <span class="comment">// 判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(cache))&#123;</span><br><span class="line">            <span class="comment">// 存在，直接返回</span></span><br><span class="line">            <span class="comment">// 返回前需要转为对象</span></span><br><span class="line">            <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(cache, Shop.class);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不存在，根据id查询数据库</span></span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="keyword">if</span> (shop == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 查询数据库后不存在，返回错误</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;未找到该商铺信息&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 存在，写入redis</span></span><br><span class="line">        <span class="comment">// 转换前需要将对象转为json字符串存入</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY+id,JSONUtil.toJsonStr(shop),CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">//返回</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="主动更新"><a href="#主动更新" class="headerlink" title="主动更新"></a>主动更新</h3><p>ShopController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">updateShop</span><span class="params">(<span class="meta">@RequestBody</span> Shop shop)</span> &#123;</span><br><span class="line">    <span class="comment">// 写入数据库</span></span><br><span class="line">    <span class="keyword">return</span> shopService.update(shop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IShopService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Result <span class="title function_">update</span><span class="params">(Shop shop)</span>;</span><br></pre></td></tr></table></figure><p>ShopServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(Shop shop)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> shop.getId();</span><br><span class="line">    <span class="keyword">if</span> (id == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺id不能为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 先更新数据库</span></span><br><span class="line">    updateById(shop);</span><br><span class="line">    <span class="comment">// 再删除缓存</span></span><br><span class="line">    stringRedisTemplate.delete(CACHE_SHOP_KEY+id);</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试Redis中的缓存是否会存储30分钟（成功）</p><p><img src="https://s2.loli.net/2023/08/30/DiQvteIMja5NmUd.png" alt="image-20230830152921211"></p><p>测试修改后数据库和缓存是否都会被修改（在postman中测试）</p><p>请求方式<code>PUT</code>，请求地址<a href="http://localhost:8081/shop">http://localhost:8081/shop</a></p><p>测试数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;area&quot;</span><span class="punctuation">:</span> <span class="string">&quot;大关&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;openHours&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10:00-22:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sold&quot;</span><span class="punctuation">:</span> <span class="number">4215</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;金华路锦昌文华苑29号&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="number">3035</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;avgPrice&quot;</span><span class="punctuation">:</span> <span class="number">80</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="number">37</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;102茶餐厅&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typeId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>数据库更新成功</p><p><img src="https://s2.loli.net/2023/08/30/pWx9OdH5A2fvzPt.png" alt="image-20230830154434479"></p><p>redis中的数据也被删除了，当再次查询时才会从数据库中查询</p><img src="https://s2.loli.net/2023/08/30/UxdykmGgVoHJwiL.png" alt="image-20230830154514113" style="zoom:67%;" /><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>缓存穿透是指客户端请求的数据在缓存和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库</p><p>就是说，如果客户端发起了一个请求，请求一家店铺，但是这家店铺是不存在的，也就是假的请求，然后此时会请求到Redis中，Redis查看后肯定是没有的，毕竟是假的，然后发给数据库，数据库肯定也没有，然后返回</p><p>此时，如果有一个不坏好意的人，整了多个线程，一直反复的发，反复的请求，可能就要坏事了</p><p>常见的解决方案有两种</p><ul><li><p>缓存空对象</p></li><li><p>缓存空对象流程图</p>  <img src="https://s2.loli.net/2023/08/30/azr84SL6PUuVsdA.png" alt="image-20230830180305218" style="zoom:67%;" /><ul><li>当你发了一个假的不存在的对象给我，我最后从数据库会得到一个null，此时我将其缓存起来，当你再次请求，我就直接从Redis里面返回给你之前那个null，简单粗暴</li><li>优点：实现简单，维护方便</li><li>缺点<ul><li>额外的内存消耗（反复给你发不同的空的对象，会缓存起来一堆垃圾），可以设置一个TTL（缓存有效期），设置为5分钟或者2分钟不等，专门用来缓存垃圾数据</li><li>可能造成短期的不一致（如果我们已经在Redis缓存了发来的空对象，此时Redis会缓存起来，如果真的有一个对象就是刚刚被创建出来的，此时，用户再查询，会是null，也就是刚刚缓存的空对象）</li></ul></li></ul></li><li><p>布隆过滤</p></li><li><p>布隆过滤流程图</p>  <img src="https://s2.loli.net/2023/08/30/wdZRoYVv4FPSgt1.png" alt="image-20230830180532253" style="zoom:67%;" /><ul><li>客户端请求布隆过滤器，若数据不存在直接拒绝，存在则放行通过去Redis中查询，如果Redis中存在，则从Redis缓存中查询，如果Redis缓存中有，则直接返回，若没有则去数据库中查询，数据库中有返回，否则返回无数据</li><li>优点：内存占用较少，没有多余key（拦截后，就会拒绝请求了，不拦截才会去内部查询，有时候过滤器可能会误判，放一些进来也没什么大问题）</li><li>缺点<ul><li>实现复杂</li><li>存在误判可能</li></ul></li></ul></li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>ShopServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">// 从redis查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cache</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);</span><br><span class="line">        <span class="comment">// 判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(cache))&#123;</span><br><span class="line">            <span class="comment">// 存在，直接返回</span></span><br><span class="line">            <span class="comment">// 返回前需要转为对象</span></span><br><span class="line">            <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(cache, Shop.class);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是空字符串</span></span><br><span class="line">        <span class="keyword">if</span> (cache != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 如果在redis中没有查询到该商铺的信息，说明该缓存为null，去数据库中查询</span></span><br><span class="line">            <span class="comment">// 如果数据库也为空，说明缓存穿透了，然后将空值写入Redis，并返回错误</span></span><br><span class="line">            <span class="comment">// 当再次访问时，查询得到的会是空字符串，而不是空，就会直接拿到redis中的数据，会是空，然后报错</span></span><br><span class="line">            <span class="comment">// StrUtil.isNotBlank会判别空字符串是空的，所以上面的并不会返回数据</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;未找到该商铺信息&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不存在，根据id查询数据库</span></span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="keyword">if</span> (shop == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 将空值写入Redis并设置时间为两分钟</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY+id,<span class="string">&quot;&quot;</span>,CACHE_NULL_TTL,TimeUnit.MINUTES);</span><br><span class="line">            <span class="comment">// 查询数据库后不存在，返回错误</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;未找到该商铺信息&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 存在，写入redis</span></span><br><span class="line">        <span class="comment">// 转换前需要将对象转为json字符串存入</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY+id,JSONUtil.toJsonStr(shop),CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">//返回</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>测试</p><p>访问<a href="http://localhost:8080/api/shop/0%EF%BC%8C%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E5%9C%B0%E5%9D%80%EF%BC%8C%E7%9C%8B%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BF%94%E5%9B%9E%E4%BB%80%E4%B9%88">http://localhost:8080/api/shop/0，这是一个不存在的地址，看控制台返回什么</a></p><p>没有找到数据，并且页面也显示为空<img src="https://s2.loli.net/2023/08/30/3Xcrm5IjU4EDqVC.png" alt="image-20230830192507127"></p><p><img src="https://s2.loli.net/2023/08/30/StMlp2mZ8AB13KN.png" alt="image-20230830192444687"></p><p>再次访问该地址，会发现控制台并没有输出sql语句，而是直接去了redis缓存中查询</p><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>缓存雪崩是指同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力</p><p>当Redis服务宕机时，情况就会极为严重，所有的请求都会直接来到数据库中</p><img src="https://s2.loli.net/2023/09/01/Vl5BnGFuR4bwcMU.png" alt="image-20230901215347179" style="zoom:67%;" /><p>解决方案：</p><ul><li>给不同的key的TTL（存活时间）添加随机值</li><li>利用Redis集群提高服务的高可用性</li><li>给缓存业务添加降级限流策略</li><li>给业务添加多级缓存</li></ul><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p>缓存击穿问题也叫热点Key问题，就是被高并发访问并且缓存重建业务比较复杂的key突然失效了，无数的请求访问在瞬间给数据库带来巨大的冲击</p><p>可以理解为，当一个线程去访问一个高并发访问的缓存并且缓存创建业务复杂的key失效了，那么当前线程查询缓存会未命中，而它的流程也比较麻烦，此时如果有其他线程进来查询，也会去数据库查询，因为最开始的线程还没有将数据写入缓存，而它又是一个高并发的线程，所以，可能会导致数据库压力过大，宕机</p><img src="https://s2.loli.net/2023/09/02/AQckUzTYpxhmHP8.png" alt="image-20230902095232043" style="zoom:67%;" /><p>常见的解决方案有两种：</p><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><ul><li>假设若干个线程同时来访问缓存，其中最早的一个获取到了互斥锁，那么这个线程会去查询数据库重建缓存数据，并将查到的内容写入缓存后，释放锁，而其他线程在那个线程获取了互斥锁后，都没办法再获取互斥锁，则会休眠一会再重试，而且会不断重试，直到命中</li><li><img src="https://s2.loli.net/2023/09/02/aWPO6GC3uYrIwLc.png" alt="image-20230902095932118" style="zoom:67%;" /></li><li>缺点：当数千线程同时进入，只有一个线程可以得到互斥锁并重建缓存数据，其他线程只能无限期的等待，所以性能较差</li></ul><h3 id="逻辑过期"><a href="#逻辑过期" class="headerlink" title="逻辑过期"></a>逻辑过期</h3><ul><li>要设置逻辑过期，需要在缓存的时候添加<strong>逻辑时间</strong>，如果有线程查询缓存，当逻辑时间过期时，就会去获取互斥锁，然后开启一个新线程，由新线程来查询数据库，重建缓存数据并写入缓存，重置逻辑时间，最后释放锁，而之前的现场就会返回一份过期数据，如果在<strong>新线程写入缓存</strong>期间有其他线程来访问的话，查询缓存后，查到的是旧数据，此时会发现逻辑时间已经过期， 就会去获取互斥锁，获取失败后，会直接返回一份过期数据，只有当<strong>新线程写入缓存的事件结束后</strong>，其他线程再来访问，就可以得到新数据</li><li><img src="https://s2.loli.net/2023/09/02/Qj5BYaV7wP2GSkN.png" alt="image-20230902101201232" style="zoom:67%;" /></li></ul><h3 id="互斥锁与逻辑过期的对比"><a href="#互斥锁与逻辑过期的对比" class="headerlink" title="互斥锁与逻辑过期的对比"></a>互斥锁与逻辑过期的对比</h3><table><thead><tr><th align="center">解决方案</th><th align="center">优点</th><th align="center">缺点</th></tr></thead><tbody><tr><td align="center">互斥锁</td><td align="center">没有额外的内存消耗<br />保证一致性<br />实现简单</td><td align="center">线程需要等待，性能受影响<br />可能有死锁的风险</td></tr><tr><td align="center">逻辑过期</td><td align="center">线程无需等待，性能较好</td><td align="center">不保证一致性<br />有额外内存消耗<br />实现复杂</td></tr></tbody></table><p>死锁的概念：<em><strong>毕业生找工作,公司表示只需要有工作经验才可以来;要想有工作经验,就需要去公司工作……</strong></em></p><p>毕业生找工作，必须要有工作经验才能去公司，而要想有工作经验，就必须要公司工作，而毕业生从来没在公司工作，自然也就无法去公司工作</p><p>或者说，一个线程获取了锁A，下面将要获取锁B时，结果切换了线程，切换后的线程去获取了锁B，又要去获取锁A，因为此时锁A被另一个线程占用了，所以获取不了，那么只能等待，最后又切换回了锁A的线程，锁A线程重新访问锁B，锁B被另一个线程所占用了，就导致也获取不了，最后无限循环，死锁了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> m)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(lockA) &#123; <span class="comment">// 获得lockA的锁</span></span><br><span class="line">        <span class="built_in">this</span>.value += m;</span><br><span class="line">        <span class="keyword">synchronized</span>(lockB) &#123; <span class="comment">// 获得lockB的锁</span></span><br><span class="line">            <span class="built_in">this</span>.another += m;</span><br><span class="line">        &#125; <span class="comment">// 释放lockB的锁</span></span><br><span class="line">    &#125; <span class="comment">// 释放lockA的锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dec</span><span class="params">(<span class="type">int</span> m)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(lockB) &#123; <span class="comment">// 获得lockB的锁</span></span><br><span class="line">        <span class="built_in">this</span>.another -= m;</span><br><span class="line">        <span class="keyword">synchronized</span>(lockA) &#123; <span class="comment">// 获得lockA的锁</span></span><br><span class="line">            <span class="built_in">this</span>.value -= m;</span><br><span class="line">        &#125; <span class="comment">// 释放lockA的锁</span></span><br><span class="line">    &#125; <span class="comment">// 释放lockB的锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于互斥锁方式解决缓存击穿的问题"><a href="#基于互斥锁方式解决缓存击穿的问题" class="headerlink" title="基于互斥锁方式解决缓存击穿的问题"></a>基于互斥锁方式解决缓存击穿的问题</h3><p>需求：修改根据id查询商铺的业务，基于互斥锁方式来解决缓存击穿问题</p><h4 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h4><p>提交商铺id，从Redis中查询商铺缓存，判断缓存是否命中</p><ul><li>缓存命中：返回数据</li><li>缓存未命中：判断是否获取锁<ul><li>获取锁：根据Id查询数据库，将商铺数据写入Redis，释放锁，并返回数据</li><li>未获取锁：休眠一段时间，从Redis查询商铺缓存，再次执行上述的情况，直到锁被释放，从缓存中查询得到最新的数据，并返回</li></ul></li></ul><img src="https://s2.loli.net/2023/09/02/Jl6avcRW275ZBb3.png" alt="image-20230902110255613" style="zoom:67%;" /><p>在ServiceImpl下创建两个方法用于获取锁和释放锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取锁</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">TryLock</span><span class="params">(String key)</span>&#123;</span><br><span class="line">    <span class="comment">// 获取锁，并设置保存时间为10秒，因为业务一般1秒内都能结束</span></span><br><span class="line">    <span class="comment">// 如果出现10秒还未结束的业务，说明有问题，将锁删除</span></span><br><span class="line">    <span class="comment">// setIfAbsent，当key存在时，不创建key，否则创建key</span></span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="comment">// 返回可能会进行自动拆箱的操作，导致空指针，这里借助具体类修改</span></span><br><span class="line">    <span class="keyword">return</span> BooleanUtil.isTrue(aBoolean);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放锁</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">(String key)</span>&#123;</span><br><span class="line">    stringRedisTemplate.delete(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将缓存穿透的逻辑封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryWithPassThrough</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">    <span class="comment">// 从redis查询商铺缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">cache</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);</span><br><span class="line">    <span class="comment">// 判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(cache))&#123;</span><br><span class="line">        <span class="comment">// 存在，直接返回</span></span><br><span class="line">        <span class="comment">// 返回前需要转为对象</span></span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(cache, Shop.class);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果是空字符串</span></span><br><span class="line">    <span class="keyword">if</span> (cache != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 如果在redis中没有查询到该商铺的信息，说明该缓存为null，去数据库中查询</span></span><br><span class="line">        <span class="comment">// 如果数据库也为空，说明缓存穿透了，然后将空值写入Redis，并返回错误</span></span><br><span class="line">        <span class="comment">// 当再次访问时，查询得到的会是空字符串，而不是空，就会直接拿到redis中的数据，会是空，然后报错</span></span><br><span class="line">        <span class="comment">// StrUtil.isNotBlank会判别空字符串是空的，所以上面的并不会返回数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;未找到该商铺信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不存在，根据id查询数据库</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="keyword">if</span> (shop == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 将空值写入Redis并设置时间为两分钟</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY+id,<span class="string">&quot;&quot;</span>,CACHE_NULL_TTL,TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">// 查询数据库后不存在，返回错误</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;未找到该商铺信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 存在，写入redis</span></span><br><span class="line">    <span class="comment">// 转换前需要将对象转为json字符串存入</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY+id,JSONUtil.toJsonStr(shop),CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">    <span class="comment">//返回</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">/* 缓存穿透</span></span><br><span class="line"><span class="comment">     Result = queryWithPassThrough(id);*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 互斥锁解决缓存击穿</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> queryWithMutex(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 互斥锁</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryWithMutex</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">    <span class="comment">// 从redis查询商铺缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">cache</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);</span><br><span class="line">    <span class="comment">// 判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(cache))&#123;</span><br><span class="line">        <span class="comment">// 存在，直接返回</span></span><br><span class="line">        <span class="comment">// 返回前需要转为对象</span></span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(cache, Shop.class);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果是空字符串</span></span><br><span class="line">    <span class="keyword">if</span> (cache != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 如果在redis中没有查询到该商铺的信息，说明该缓存为null，去数据库中查询</span></span><br><span class="line">        <span class="comment">// 如果数据库也为空，说明缓存穿透了，然后将空值写入Redis，并返回错误</span></span><br><span class="line">        <span class="comment">// 当再次访问时，查询得到的会是空字符串，而不是空，就会直接拿到redis中的数据，会是空，然后报错</span></span><br><span class="line">        <span class="comment">// StrUtil.isNotBlank会判别空字符串是空的，所以上面的并不会返回数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;未找到该商铺信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现缓存重建</span></span><br><span class="line">    <span class="comment">// 获取互斥锁</span></span><br><span class="line">    <span class="comment">// 为每个商铺都添加一把锁，访问不同的店铺就会互不影响</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> <span class="string">&quot;lock:shop&quot;</span> + id;</span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> TryLock(lockKey);</span><br><span class="line">        <span class="comment">// 判断是否获取成功</span></span><br><span class="line">        <span class="keyword">if</span> (!isLock)&#123;</span><br><span class="line">            <span class="comment">// 失败，则休眠重试</span></span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            <span class="keyword">return</span> queryWithMutex(id);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取互斥锁成功，根据id查询数据库</span></span><br><span class="line">        shop = getById(id);</span><br><span class="line">        <span class="comment">// 数据库不存在</span></span><br><span class="line">        <span class="keyword">if</span> (shop == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 将空值写入Redis并设置时间为两分钟</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY+id,<span class="string">&quot;&quot;</span>,CACHE_NULL_TTL,TimeUnit.MINUTES);</span><br><span class="line">            <span class="comment">// 查询数据库后不存在，返回错误</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;未找到该商铺信息&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 存在，写入redis</span></span><br><span class="line">        <span class="comment">// 转换前需要将对象转为json字符串存入</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY+id,JSONUtil.toJsonStr(shop),CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 释放互斥锁</span></span><br><span class="line">        unlock(lockKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于逻辑过期方式解决缓存击穿的问题"><a href="#基于逻辑过期方式解决缓存击穿的问题" class="headerlink" title="基于逻辑过期方式解决缓存击穿的问题"></a>基于逻辑过期方式解决缓存击穿的问题</h3><h4 id="流程分析-1"><a href="#流程分析-1" class="headerlink" title="流程分析"></a>流程分析</h4><p>提交商铺id，从Redis中查询缓存，并判断缓存是否命中（一般情况下，都是绝对命中的，因为是逻辑过期）</p><ul><li>缓存命中：判断缓存是否过期（逻辑过期）<ul><li>缓存未过期：直接返回商铺信息</li><li>缓存已过期：尝试获取互斥锁，判断是否能获取锁<ul><li>获取锁成功：开启独立线程，并根据Id查询数据库，将商铺数据写入Redis，并设置逻辑过期时间，最后释放互斥锁</li><li>获取锁失败：说明有其他线程已经获取了锁正在进行操作，可以直接返回旧的商铺信息</li></ul></li></ul></li><li>缓存未命中：很少出现这种情况，一旦出现了，返回空</li></ul><img src="https://s2.loli.net/2023/09/02/RFj7H9zCbkLaSQx.png" alt="image-20230902132308504" style="zoom: 50%;" /><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><p>在原来的对象上添加逻辑过期时间，但是又不能修改原来的对象，修改了可能会影响到整体的代码逻辑，如何来添加新的数据呢</p><p><strong>解决方案</strong></p><ul><li>新建一个类，继承对应的对象，并在新的对象上添加自己需要的属性，并创建一个包含原有数据的类data</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisData</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime expireTime;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ShopServiceImpl中添加方法，将Shop添加到Redis当中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">savaShop2Redis</span><span class="params">(Long id,Long expireSecond)</span>&#123;</span><br><span class="line">    <span class="comment">// 查询店铺数据</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="comment">// 封装逻辑过期时间</span></span><br><span class="line">    <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">    redisData.setData(shop);</span><br><span class="line">    <span class="comment">// 设置逻辑过期时间为多少秒</span></span><br><span class="line">    redisData.setExpireTime(LocalDateTime.now().plusSeconds(expireSecond));</span><br><span class="line">    <span class="comment">// 写入Redis(转换类型)</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id,JSONUtil.toJsonStr(redisData));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在单元测试中测试能不能将数据添加到Redis当中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.hmdp.service.impl.ShopServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HmDianPingApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ShopServiceImpl shopService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        shopService.savaShop2Redis(<span class="number">1L</span>,<span class="number">10L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2023/09/02/4OGJxq9KH28rhmD.png" alt="image-20230902135306311" style="zoom:67%;" /><p>ShopServiceImpl</p><p>添加一段逻辑过期的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">/* 缓存穿透</span></span><br><span class="line"><span class="comment">         Result = queryWithPassThrough(id);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 互斥锁解决缓存击穿</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        return queryWithMutex(id);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> queryWithLogicalExpire(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建线程池</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">CACHE_REBUILD_EXECUTOR</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逻辑过期解决缓冲击穿问题</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryWithLogicalExpire</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">// 从redis查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cache</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);</span><br><span class="line">        <span class="comment">// 判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(cache)) &#123;</span><br><span class="line">            <span class="comment">// 不存在，返回空</span></span><br><span class="line">            <span class="comment">// 返回前需要转为对象</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从缓存中命中数据后，反序列化json为对象</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(cache, RedisData.class);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> (JSONObject) redisData.getData();</span><br><span class="line">        <span class="type">Shop</span> <span class="variable">jsonShop</span> <span class="operator">=</span> JSONUtil.toBean(data, Shop.class);</span><br><span class="line">        <span class="comment">// 取出过期时间</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">        <span class="comment">// 判断是否过期</span></span><br><span class="line">        <span class="keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">            <span class="comment">// isAfter判断现在的时间是否在过期时间后</span></span><br><span class="line">            <span class="comment">// 如果现在的时间在过期时间之后，说明还没过期</span></span><br><span class="line">            <span class="comment">// 如果在过期时间之前，说明已过期</span></span><br><span class="line">            <span class="comment">//未过期，直接返回商铺信息</span></span><br><span class="line">            <span class="keyword">return</span> Result.ok(jsonShop);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 已过期，缓存重建</span></span><br><span class="line">        <span class="comment">// 判断是否获取互斥锁</span></span><br><span class="line">        <span class="keyword">if</span> (TryLock(LOCK_SHOP_KEY + id)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取互斥锁成功，开启新线程，实现缓存重建</span></span><br><span class="line">            <span class="comment">// 线程最好通过线程池来获取，节省资源</span></span><br><span class="line">            CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 重建缓存(在savaShop2Redis中有写过这个方法)</span></span><br><span class="line">                    savaShop2Redis(id, <span class="number">30L</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 释放锁</span></span><br><span class="line">                    unlock(LOCK_SHOP_KEY + id);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取互斥锁失败，直接返回商铺信息</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(jsonShop);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>即使逻辑过期了，也不影响数据，数据并不会消失</p><h2 id="缓存工具封装"><a href="#缓存工具封装" class="headerlink" title="缓存工具封装"></a>缓存工具封装</h2><p>基于StringRedisTemplate封装一个缓存工具类，满足下列需求：</p><ol><li>将任意Java对象序列化为json并存储在string类型的key中，并且可以设置TTL过期时间</li><li>将任意Java对象序列化为json并存储在string类型的key中，并且可以设置逻辑过期时间，用于处理缓存击穿问题</li><li>根据指定的key查询缓存，并反序列化为指定类型，利用缓存空值的方式解决缓存穿透的问题</li><li>根据指定的key查询缓存，并反序列化为指定类型，需要利用逻辑过期解决缓存击穿问题</li></ol><p>在utils包下新建CacheClient类，用于缓存工具的封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheClient</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheClient</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将任意Java对象序列化为json并存储在string类型的key中，并且可以设置TTL过期时间</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, Long time, TimeUnit timeUnit)</span>&#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value),time,timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将任意Java对象序列化为json并存储在string类型的key中，并且可以设置逻辑过期时间，用于处理缓存击穿问题</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">setWithLogicalExpire</span><span class="params">(String key,Object value,Long time,TimeUnit timeUnit)</span>&#123;</span><br><span class="line">        RedisData&lt;Object&gt; redisData = <span class="keyword">new</span> <span class="title class_">RedisData</span>&lt;&gt;();</span><br><span class="line">        redisData.setData(value);</span><br><span class="line">        <span class="comment">// 过期时间是以当前时间为基准后的多少秒为基准</span></span><br><span class="line">        redisData.setExpireTime(LocalDateTime.now().plusSeconds(timeUnit.toSeconds(time)));</span><br><span class="line">        <span class="comment">// 写入Redis</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key,JSONUtil.toJsonStr(redisData));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T,ID&gt; T <span class="title function_">queryWithPassThough</span><span class="params">(</span></span><br><span class="line"><span class="params">            String keyPrefix, ID id, Class&lt;T&gt; type, Function&lt;ID,T&gt; function,Long time,TimeUnit timeUnit)</span>&#123;</span><br><span class="line">        <span class="comment">// keyPrefix是key的前缀</span></span><br><span class="line">        <span class="comment">// keyPrefix+id = key</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据Key可以从redis中查询</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从redis中查询缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cache</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否存在，如果存在，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(cache))&#123;</span><br><span class="line">            <span class="comment">// 将cache转为对应的类型</span></span><br><span class="line">            <span class="keyword">return</span> JSONUtil.toBean(cache,type);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否为null</span></span><br><span class="line">        <span class="keyword">if</span> (cache != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 解决缓存穿透</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不存在，根据Id查询数据库</span></span><br><span class="line">        <span class="comment">//  Function&lt;ID,T&gt; function</span></span><br><span class="line">        <span class="comment">// ID是传递的参数，T是返回的类型</span></span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> function.apply(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果得到的结果为Null，说明缓存穿透了，解决这个问题</span></span><br><span class="line">        <span class="comment">// 向Redis中存入一个空值即可</span></span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 将空值写入Redis</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(key,<span class="string">&quot;&quot;</span>,time,timeUnit);</span><br><span class="line">            <span class="comment">// 返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存在，存入Redis</span></span><br><span class="line">        <span class="built_in">this</span>.set(key,t,time,timeUnit);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缓存穿透修改</p><p>function需要的是传递一个函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CacheClient cacheClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">/* 缓存穿透</span></span><br><span class="line"><span class="comment">         Result = queryWithPassThrough(id);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 互斥锁解决缓存击穿</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        return queryWithMutex(id);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> cacheClient.queryWithPassThough(CACHE_SHOP_KEY, id, Shop.class, <span class="built_in">this</span>::getById,CACHE_SHOP_TTL,TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(shop == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;该店铺信息不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>缓存穿透测试，没啥问题</p><p>缓存击穿<code>queryWithLogicalExpire</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建线程池</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">CACHE_BUILD_EXECUTOR</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存击穿（基于逻辑过期实现）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> &lt;T,ID&gt; T <span class="title function_">queryWithLogicalExpire</span><span class="params">(</span></span><br><span class="line"><span class="params">        String keyPrefix, ID id, Class&lt;T&gt; type,Function&lt;ID,T&gt; function,Long time,TimeUnit timeUnit)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">    <span class="comment">// 从redis中查询缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">cache</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">    <span class="comment">// 判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isBlank(cache)) &#123;</span><br><span class="line">        <span class="comment">// 不存在，直接返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 命中，需要先把json反序列化为对象</span></span><br><span class="line">    <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(cache, RedisData.class);</span><br><span class="line">    <span class="comment">// 获取对应数据</span></span><br><span class="line">    <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), type);</span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">    <span class="keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">        <span class="comment">// 如果超时时间在当前时间之后</span></span><br><span class="line">        <span class="comment">// 说明未过期，直接返回商铺信息</span></span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 否则，已过期，需要缓存重建</span></span><br><span class="line">    <span class="comment">// 获取互斥锁</span></span><br><span class="line">    <span class="comment">// 失败</span></span><br><span class="line">    <span class="keyword">if</span> (TryLock(key)) &#123;</span><br><span class="line">        <span class="comment">// 成功</span></span><br><span class="line">        <span class="comment">// 成功后，开启一个新的线程并让新的线程去操作更新的问题</span></span><br><span class="line">        CACHE_BUILD_EXECUTOR.submit(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 查询数据库</span></span><br><span class="line">                <span class="type">T</span> <span class="variable">dbResult</span> <span class="operator">=</span> function.apply(id);</span><br><span class="line">                <span class="comment">// 写入redis</span></span><br><span class="line">                <span class="built_in">this</span>.setWithLogicalExpire(key,JSONUtil.toJsonStr(dbResult),time,timeUnit);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line">                unlock(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取互斥锁失败，则直接返回旧数据</span></span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取锁</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">TryLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取锁，并设置保存时间为10秒，因为业务一般1秒内都能结束</span></span><br><span class="line">    <span class="comment">// 如果出现10秒还未结束的业务，说明有问题，将锁删除</span></span><br><span class="line">    <span class="comment">// setIfAbsent，当key存在时，不创建key，否则创建key</span></span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="comment">// 返回可能会进行自动拆箱的操作，导致空指针，这里借助具体类修改</span></span><br><span class="line">    <span class="keyword">return</span> BooleanUtil.isTrue(aBoolean);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放锁</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    stringRedisTemplate.delete(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="优惠券秒杀"><a href="#优惠券秒杀" class="headerlink" title="优惠券秒杀"></a>优惠券秒杀</h1><h2 id="全局ID生成器"><a href="#全局ID生成器" class="headerlink" title="全局ID生成器"></a>全局ID生成器</h2><p>每个店铺都可以发布优惠券，当用户抢购时，就会生成订单保存到订单表中，而订单表的id如果使用数据库自增id就存在一些问题：</p><ul><li>id的规律性太明显</li><li>受单表数据量的限制</li></ul><p>此时就需要用到全局ID生成器</p><p>全局ID生成器：是一种在分布式系统下用来生成全局唯一ID的工具，一般要满足下列特性：</p><ul><li>唯一性</li><li>高可用</li><li>高性能</li><li>递增性</li><li>安全性</li></ul><p>为了增加ID的安全性，我们可以不直接使用Redis自增的数值，而是拼接一些其他信息：</p><p><img src="https://s2.loli.net/2023/09/03/fL5AIlaoxOQG1Tv.png" alt="image-20230903123716447.png"></p><p>ID的组成部分：</p><ul><li>符号位：1bit</li><li>时间戳：31bit，以秒为单位，可以使用69年</li><li>序列号：32bit，秒内的计数器，支持每秒产生2*32个不同的ID</li></ul><p>在utils包下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneOffset;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisIdWorker</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始的时间戳</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">BEGIN_STAMP</span> <span class="operator">=</span> <span class="number">1672531200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移动的位数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">COUNT_BITS</span> <span class="operator">=</span> <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextId</span><span class="params">(String keyPrefix)</span> &#123;</span><br><span class="line">        <span class="comment">// 生成时间戳</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="comment">// 得到时间戳</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">second</span> <span class="operator">=</span> now.toEpochSecond(ZoneOffset.UTC);</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> second - BEGIN_STAMP;</span><br><span class="line">        <span class="comment">// 生成序列号</span></span><br><span class="line">        <span class="comment">// 获取当前日期，精确到天</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy:MM:dd&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 采用date的方式，每天可以生成不同的id，不至于让缓存无限堆积，而且也不利于查找</span></span><br><span class="line">        <span class="comment">// 不使用包装类是因为后面还要进行运算</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">increment</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().increment(<span class="string">&quot;icr:&quot;</span> + keyPrefix + <span class="string">&quot;:&quot;</span> + date);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拼接并返回(移动指定位数是为了让increment可以填充到后面的位数上返回一个long类型的订单号)</span></span><br><span class="line">        <span class="keyword">return</span> timestamp&lt;&lt;COUNT_BITS | increment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">time</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2023</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 将时间转为秒</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">second</span> <span class="operator">=</span> time.toEpochSecond(ZoneOffset.UTC);</span><br><span class="line">        System.out.println(<span class="string">&quot;second = &quot;</span> + second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisIdWorker redisIdWorker;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">300</span>);</span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">order</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;order = &quot;</span> + order);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        executorService.submit(task);</span><br><span class="line">    &#125;</span><br><span class="line">    countDownLatch.await();</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;time = &quot;</span> + (end-begin));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全局唯一ID生成策略：</p><ul><li>UUID</li><li>Redis自增</li><li>snowflake算法（雪花算法）</li><li>数据库自增</li></ul><p>Reids自增ID策略：</p><ul><li>每天一个key，方便统计订单量</li><li>ID构造是时间戳+计数器</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础篇</title>
      <link href="/eastwind/0.html"/>
      <url>/eastwind/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="初识Redis"><a href="#初识Redis" class="headerlink" title="初识Redis"></a>初识Redis</h1><h2 id="认识NoSQL"><a href="#认识NoSQL" class="headerlink" title="认识NoSQL"></a>认识NoSQL</h2><p><img src="https://s2.loli.net/2023/08/26/z1VS4BrAotuqgpQ.png" alt="image-20230826191849828"></p><p>SQL的全称是结构化查询语言(Structured Query Language)，是一种用于关系型数据库的查询语言</p><p>NOSQL的全称是Not Only SQL，不限于SQL，也可以说是非关系型数据库，说明它于传统的SQL有所不同，而Redis正是一种NOSQL，接下来看一下两者的不同</p><table><thead><tr><th align="center"></th><th align="center">SQL</th><th align="center">NOSQL</th></tr></thead><tbody><tr><td align="center">数据结构</td><td align="center">结构化(Structured)</td><td align="center">非结构化</td></tr><tr><td align="center">数据关联</td><td align="center">关联的(Relational)</td><td align="center">无关联的</td></tr><tr><td align="center">查询方式</td><td align="center">SQL查询</td><td align="center">非SQL</td></tr><tr><td align="center">事务特性</td><td align="center">ACID</td><td align="center">BASE</td></tr><tr><td align="center">存储方式</td><td align="center">磁盘</td><td align="center">内存</td></tr><tr><td align="center">拓展性</td><td align="center">垂直</td><td align="center">水平</td></tr><tr><td align="center">使用场景</td><td align="center">1、数据结构固定<br />2、相关业务对数据安全性、一致性要求较高</td><td align="center">1、数据结构不固定<br />2、对一致性、安全性要求不高<br />3、对性能要求较高</td></tr></tbody></table><p>NOSQL的非结构化类型主要有：</p><ul><li>键值类型（Redis）</li><li>文档类型（MongoDB）</li><li>列类型（Hbase）</li><li>Graph类型（Neo4j）</li></ul><p>NOSQL没有统一的SQL语句</p><h2 id="认识Redis"><a href="#认识Redis" class="headerlink" title="认识Redis"></a>认识Redis</h2><p>Redis诞生于2009年，全称是Remote Dictionary Server，远程词典服务器，是一个基于内存的键值型NoSQL数据库。</p><p>特征：</p><ul><li>键值（key-value）型，value支持多种不同数据结构，功能丰富</li><li>单线程，每个命令具备原子性</li><li>低延迟，速度快（基于内存、IO多路复用、良好的编码）</li><li>支持数据持久化</li><li>支持主从集群、分片集群</li><li>支持多语言客户端</li></ul><h2 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h2><p>这里简单讲述一下Linux中Redis的安装过程</p><p>Redis的官方网站：<a href="https://redis.io/">https://redis.io/</a></p><p>因为Redis是基于C语言编写的，因此需要安装Redis所需要的gcc依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc tcl</span><br></pre></td></tr></table></figure><p>在Redis官方网站下载好安装包，并上传到Linux上，目录看自己喜好，上传完成后进行解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redis的文件名</span><br></pre></td></tr></table></figure><p>进入redis的安装目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 解压完成后的redis目录</span><br></pre></td></tr></table></figure><p>运行编译命令</p><p>make是编译，make install是安装</p><p><code>make &amp; make install</code>是编译并安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp; make install</span><br></pre></td></tr></table></figure><p>默认的安装路径就是在<code>/usr/local/bin</code>目录下</p><p>该目录以及默认配置到环境变量，因此可以在任意目录下运行这些命令</p><ul><li>redis-cli：redis提供的命令行客户端</li><li>redis-server：redis提供的服务端启动脚本</li><li>redis-sentinel：是redis的哨兵启动脚本</li></ul><h3 id="默认启动"><a href="#默认启动" class="headerlink" title="默认启动"></a>默认启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure><p>启动后，你会发现你无法连接客户端，因为服务端已经建立连接了，如果你想连接客户端，你得重新打开一个页面建立客户端的连接，我们发现这样很麻烦，所以我们需要让它后台启动</p><h3 id="指定配置启动"><a href="#指定配置启动" class="headerlink" title="指定配置启动"></a>指定配置启动</h3><p>在我们之前解压的redis安装包下，有一个redis.conf的配置文件，我们先将这个文件备份一份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> redis.conf redis.conf.bck </span><br></pre></td></tr></table></figure><p>然后对redis.conf进行修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi redis.conf</span><br></pre></td></tr></table></figure><h4 id="Redis的常用配置"><a href="#Redis的常用配置" class="headerlink" title="Redis的常用配置"></a>Redis的常用配置</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监听的地址，默认是127.0.0.1，会导致只能在本地访问，修改为0.0.0.0可以在任意IP进行访问</span></span><br><span class="line"><span class="attr">bind</span> <span class="string">0.0.0.0</span></span><br><span class="line"><span class="comment"># 守护进程，修改为yes后即可在后台运行</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes</span></span><br><span class="line"><span class="comment"># 密码，设置后访问Redis必须输入密码</span></span><br><span class="line"><span class="attr">requirepass</span> <span class="string">123456</span></span><br></pre></td></tr></table></figure><h4 id="Redis的其他配置"><a href="#Redis的其他配置" class="headerlink" title="Redis的其他配置"></a>Redis的其他配置</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监听的端口</span></span><br><span class="line"><span class="attr">port</span> <span class="string">6379</span></span><br><span class="line"><span class="comment"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">.</span></span><br><span class="line"><span class="comment"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号为0~15</span></span><br><span class="line"><span class="attr">databases</span> <span class="string">1</span></span><br><span class="line"><span class="comment"># 设置redis能够使用的最大内存</span></span><br><span class="line"><span class="attr">maxmemory</span> <span class="string">512mb</span></span><br><span class="line"><span class="comment"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">&quot;redis.log&quot;</span></span><br></pre></td></tr></table></figure><p>指定配置文件启动，如果在redis-server命令所在的文件夹下启动的，则不需要指定，默认为当前目录下的redis.conf配置文件，如需指定，可使用下面的代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server redis.conf</span><br></pre></td></tr></table></figure><p>查看redis进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure><p>停止redis进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 redis对应的进程号</span><br></pre></td></tr></table></figure><h4 id="默认自启动"><a href="#默认自启动" class="headerlink" title="默认自启动"></a>默认自启动</h4><h2 id="Redis客户端"><a href="#Redis客户端" class="headerlink" title="Redis客户端"></a>Redis客户端</h2><h3 id="Redis命令行客户端"><a href="#Redis命令行客户端" class="headerlink" title="Redis命令行客户端"></a>Redis命令行客户端</h3><p>Redis安装完成后就自带了命令行客户端：redis-cli，使用方式如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli [options] [commonds]</span><br></pre></td></tr></table></figure><p>options是可选项，常见options有：</p><ul><li><code>-h 127.0.0.1</code>：指定要连接的redis节点的IP地址，默认是127.0.0.1</li><li><code>-p 6379</code>：指定要连接的redis节点的端口，默认是6379</li><li>-a 123456：指定redis的访问密码</li></ul><p>commonds是Redis的操作命令，例如：</p><p><code>ping</code>：与redis服务做连通测试，服务端正常会返回<code>pong</code></p><p>不指定commonds时，会进入<code>redis-cli</code>的交互控制台</p><h3 id="Redis图形化客户端"><a href="#Redis图形化客户端" class="headerlink" title="Redis图形化客户端"></a>Redis图形化客户端</h3><p>Redis图形化客户端是一个GitHub上的大神出的，所以需要在GitHub上下载</p><p>地址如下：<a href="https://github.com/MicrosoftArchive/redis/releases">https://github.com/MicrosoftArchive/redis/releases</a></p><p>这里就不讲关于Redis图形化客户端的安装了，都很简单，我们讲讲如何使用</p><img src="https://s2.loli.net/2023/08/27/hJ4F5RnXsUyNDBj.png" alt="image-20230827093318995" style="zoom:50%;" /><p>打开后的页面如上图所示，我们单击<code>连接到Redis服务器</code></p><img src="https://s2.loli.net/2023/08/27/dULOKV1xZGN4Db2.png" alt="image-20230827093621171" style="zoom:50%;" /><img src="https://s2.loli.net/2023/08/27/38Rg5TsFXPWaVfL.png" alt="image-20230827093720046" style="zoom:50%;" /><p>连接成功后一路确定即可</p><img src="https://s2.loli.net/2023/08/27/sFuaXTgN32cniKO.png" alt="image-20230827093906710" style="zoom:50%;" /><p>添加键后的效果如下</p><img src="https://s2.loli.net/2023/08/27/erwT8qDs6NiUcKy.png" alt="image-20230827093944301" style="zoom:50%;" /><h1 id="Redis常见命令"><a href="#Redis常见命令" class="headerlink" title="Redis常见命令"></a>Redis常见命令</h1><h2 id="Redis数据结构介绍"><a href="#Redis数据结构介绍" class="headerlink" title="Redis数据结构介绍"></a>Redis数据结构介绍</h2><p>Redis是一个key-value的数据库，key一般是String类型，value的类型多样</p><img src="https://s2.loli.net/2023/08/27/Kz4TFqb2emZQ9xJ.png" alt="image-20230827094756629" style="zoom:50%;" /><p>学习Redis可以多看看Redis的官方文档：<a href="https://redis.io/commands/">https://redis.io/commands/</a></p><p>甚至你可以在Redis的命令行中使用help来查看帮助</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span></span><br></pre></td></tr></table></figure><h2 id="Redis的通用命令"><a href="#Redis的通用命令" class="headerlink" title="Redis的通用命令"></a>Redis的通用命令</h2><h3 id="KEYS"><a href="#KEYS" class="headerlink" title="KEYS"></a>KEYS</h3><p>一般是用来查找满足条件的key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KEYS pattern</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KEYS *</span><br></pre></td></tr></table></figure><p><strong>查询所有的key</strong></p><p><img src="https://s2.loli.net/2023/08/27/tQ25iOsqBRvH8rn.png" alt="image-20230827095911637"></p><p>一般都是根据pattern通配符来查找专门的key</p><p><strong>不建议在生产环境使用，因为Redis是单线程的，模糊查询很慢，如果数据量较大，一查可能会出现问题</strong></p><h3 id="DEL"><a href="#DEL" class="headerlink" title="DEL"></a>DEL</h3><p>删除一个指定的key</p><p>废话不多说，直接上示例</p><p><strong>删除单个key</strong></p><p><img src="https://s2.loli.net/2023/08/27/VbUXdKpfEB2uSj8.png" alt="image-20230827100250004"></p><p><strong>删除多个key，中间用空格隔开</strong></p><p><img src="https://s2.loli.net/2023/08/27/cu4tLTFKMIsVJlU.png" alt="image-20230827100415966"></p><h3 id="EXISTS"><a href="#EXISTS" class="headerlink" title="EXISTS"></a>EXISTS</h3><p>判断key是否存在</p><p>EXISTS后面可以传递多个key，返回的是key存在的数量</p><p><img src="https://s2.loli.net/2023/08/27/Z9ErATS2UOwvhqn.png" alt="image-20230827100944335"></p><h3 id="EXPIRE"><a href="#EXPIRE" class="headerlink" title="EXPIRE"></a>EXPIRE</h3><p>为key设置有效期，到期后key会被自动删除，设置的有效期一般为秒</p><img src="https://s2.loli.net/2023/08/27/lGHbXa85YgKhBAf.png" alt="image-20230827101505382" style="zoom:50%;" /><h3 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h3><p>查看key的有效时间，一般和EXPIRE联用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TTL key</span><br></pre></td></tr></table></figure><p>使用TTL查看一个key的默认有效时间</p><p><img src="https://s2.loli.net/2023/08/27/BQrjkHKyEOpD3Cx.png" alt="image-20230827101635387"></p><p>-1代表永久有效</p><h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h2><p>String类型，也就是字符串类型，是Redis中最简单的存储类型</p><p>其value是字符串，不过根据字符串的格式不同，又可以分为3类：</p><ul><li>string：普通字符串</li><li>int：整数类型</li><li>float：浮点类型，可以做自增、自减操作</li></ul><p>不管哪种格式，底层都是字节数组形式存储，只不过编码方式不同。字符串类型的最大空间不能超过512m</p><table><thead><tr><th align="center">Key</th><th align="center">Value</th></tr></thead><tbody><tr><td align="center">msg</td><td align="center">hello world</td></tr><tr><td align="center">num</td><td align="center">10</td></tr><tr><td align="center">score</td><td align="center">66.6</td></tr></tbody></table><h3 id="String类型的常见命令"><a href="#String类型的常见命令" class="headerlink" title="String类型的常见命令"></a>String类型的常见命令</h3><h4 id="SET、GET"><a href="#SET、GET" class="headerlink" title="SET、GET"></a>SET、GET</h4><p>set：添加或者修改已经存在的一个String类型的键值对</p><p>get：根据key获取String类型的键值对</p><p><img src="https://s2.loli.net/2023/08/27/EKuqxZXl5cBWbmR.png" alt="image-20230827131504197"></p><h4 id="MSET、MGET"><a href="#MSET、MGET" class="headerlink" title="MSET、MGET"></a>MSET、MGET</h4><p>mset：批量添加多个String类型的键值对</p><p>mget：根据多个key获取多个String类型的value</p><p><img src="https://s2.loli.net/2023/08/27/rEqiWePjmzKaG85.png" alt="image-20230827131727462"></p><h4 id="INCR、INCRBY、INCRBYFLOAT"><a href="#INCR、INCRBY、INCRBYFLOAT" class="headerlink" title="INCR、INCRBY、INCRBYFLOAT"></a>INCR、INCRBY、INCRBYFLOAT</h4><p>incr：让一个整型的key自增1</p><p>incrby：让一个整型的key自增，并指定步长，例如：incrby num 2，让num值自增2</p><p>incrbyfloat：让一个浮点类型的数字自增并指定步长</p><img src="https://s2.loli.net/2023/08/27/8WcKOHDyBj7QIb4.png" alt="image-20230827132414507" style="zoom:67%;" /><h4 id="SETNX、SETEX"><a href="#SETNX、SETEX" class="headerlink" title="SETNX、SETEX"></a>SETNX、SETEX</h4><p>setnx：添加一个String类型的键值对，前提是这个key不存在，否则不执行</p><p>setex：添加一个String类型的键值对，并且指定有效期</p><img src="https://s2.loli.net/2023/08/27/kpwatK3xjQYeHcS.png" alt="image-20230827132614979" style="zoom:67%;" /><h2 id="Key的层级格式"><a href="#Key的层级格式" class="headerlink" title="Key的层级格式"></a>Key的层级格式</h2><p>Redis没有类似MySQL中的Table的概念，我们该如何区分不同类型的key呢？</p><p>Redis的key允许有多个单词形成层级结构，多个单词之间用<code>：</code>隔开，格式如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目名：业务名：类型：id</span><br></pre></td></tr></table></figure><p>这个格式并非固定，也可以根据自己的需求来删除和添加词条</p><p>例如我们的项目叫eastwind，有user和product两种不同类型的数据，我们可以这样定义key</p><ul><li>user相关的key：eastwind：user：1</li><li>product相关的key：eastwind：product：1</li></ul><p>如果Value是一个Java对象，例如一个User对象，则可以将对象序列化为JSON字符串后存储：</p><table><thead><tr><th>KEY</th><th>VALUE</th></tr></thead><tbody><tr><td>eastwind：user：1</td><td>{“id”：1，”name”：”Jack”，”age”：21}</td></tr><tr><td>eastwind：product：1</td><td>{“id”：1，”name”：”小米x66”，”price”：4999}</td></tr></tbody></table><p>测试一下层级</p><p><img src="https://s2.loli.net/2023/08/27/fmQskoAgWD9KHrN.png" alt="image-20230827135124187"></p><p>添加以下代码后，来到redis的桌面端查看</p><p><img src="https://s2.loli.net/2023/08/27/mFqXskBpoAZlb8i.png" alt="image-20230827135158442"></p><p>此时这里就有了层级关系</p><h2 id="Hash类型"><a href="#Hash类型" class="headerlink" title="Hash类型"></a>Hash类型</h2><p>Hash类型，也叫散列，其value是一个无序字典，类似于Java中的HashMap结构</p><p>String结构是将对象序列化为JSON字符串后存储，当需要修改对象某个字段时很不方便</p><img src="https://s2.loli.net/2023/08/27/RyNx4Ek8Smi2GtF.png" alt="image-20230827142321008" style="zoom:80%;" /><p>Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD：</p><img src="https://s2.loli.net/2023/08/27/YUKFPTVjin2IHzN.png" alt="image-20230827142353944" style="zoom:80%;" /><h3 id="Hash类型的常见命令"><a href="#Hash类型的常见命令" class="headerlink" title="Hash类型的常见命令"></a>Hash类型的常见命令</h3><h4 id="HSET、HGET"><a href="#HSET、HGET" class="headerlink" title="HSET、HGET"></a>HSET、HGET</h4><p>hset：添加或修改hash类型key的field的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hset hash名 字段名 值</span><br></pre></td></tr></table></figure><p>hget：获取一个hash类型key的field的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hget hash名 字段名</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/27/1BlDsJ4h5q7AYIa.png" alt="image-20230827142618982"></p><h4 id="HMSET、HMGET"><a href="#HMSET、HMGET" class="headerlink" title="HMSET、HMGET"></a>HMSET、HMGET</h4><p>hmset：添加多个键值对</p><p>hmget：获取多个键值对</p><p><img src="https://s2.loli.net/2023/08/27/orPqGvnkEThxfbm.png" alt="image-20230827143330348"></p><h4 id="HGETALL、HKEYS、HVALS"><a href="#HGETALL、HKEYS、HVALS" class="headerlink" title="HGETALL、HKEYS、HVALS"></a>HGETALL、HKEYS、HVALS</h4><p>hgetall：获取一个hash类型中的所有字段和值</p><p>hkeys：获取一个hash类型中所有的字段</p><p>hvals：获取一个hash类型中所有的值</p><img src="https://s2.loli.net/2023/08/27/VSbw4Fpij2x6Is5.png" alt="image-20230827143953427" style="zoom:80%;" /><h4 id="HINCRBY"><a href="#HINCRBY" class="headerlink" title="HINCRBY"></a>HINCRBY</h4><p>hincrby：让一个hash类型的字段值自增并指定步长</p><p><img src="https://s2.loli.net/2023/08/27/YRDoqEfh3pH72LB.png" alt="image-20230827144034484"></p><h4 id="HSETNX"><a href="#HSETNX" class="headerlink" title="HSETNX"></a>HSETNX</h4><p>hsetnx：添加一个hash类型的字段值，前提是该字段不存在，否则不执行</p><p><img src="https://s2.loli.net/2023/08/27/NE78mlIGWQUxPza.png" alt="image-20230827144125389"></p><h2 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h2><p>Redis中的List类型与Java中的LinkedList类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索。</p><p>特征也与LinkedList类似：</p><ul><li>有序</li><li>元素可以重复</li><li>插入和删除快</li><li>查询速度一般</li></ul><p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等。</p><p>关于左侧和右侧插入的情况，举出一个例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我们想插入值C，如果在左侧插入，那么就在A的前面，如果在右侧插入，就在B的后面</span><br><span class="line">A-B</span><br><span class="line">C-A-B</span><br><span class="line">A-B-C</span><br></pre></td></tr></table></figure><h3 id="List类型的常见命令"><a href="#List类型的常见命令" class="headerlink" title="List类型的常见命令"></a>List类型的常见命令</h3><h4 id="LPUSH"><a href="#LPUSH" class="headerlink" title="LPUSH"></a>LPUSH</h4><p>向列表左侧插入一个或多个元素</p><p><img src="https://s2.loli.net/2023/08/27/yhTBz5AoNZSgJ8L.png" alt="image-20230827144933737"></p><p>根据上面的例子，我们会依次插入name、123、jsda，都是左侧插入，所以插入顺序如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jsda-123-name</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/27/v9uDgO6rTsVhCcP.png" alt="image-20230827144944032"></p><h4 id="LPOP"><a href="#LPOP" class="headerlink" title="LPOP"></a>LPOP</h4><p>lpop：移除并返回列表左侧的第一个元素，没有则返回nil</p><p><img src="https://s2.loli.net/2023/08/27/yoNhUH8c27gISum.png" alt="image-20230827145219579"></p><h4 id="RPUSH"><a href="#RPUSH" class="headerlink" title="RPUSH"></a>RPUSH</h4><p>向列表右侧插入一个或多个元素</p><p><img src="https://s2.loli.net/2023/08/27/3caqeusUOSob2h9.png" alt="image-20230827145457900"></p><p>右侧插入也是同理，我们这次只插入了一个age</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123-name-age</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/27/vlhzHmoicn7pLBA.png" alt="image-20230827145528649"></p><h4 id="LRANGE"><a href="#LRANGE" class="headerlink" title="LRANGE"></a>LRANGE</h4><p>返回一段角标范围内的所有元素，0表示第一个，-1表示最后一个<br><img src="https://s2.loli.net/2023/08/27/LwPBkhzi1j4qxRr.png" alt="image-20230827145631724"></p><h4 id="BLPOP、BRPOP"><a href="#BLPOP、BRPOP" class="headerlink" title="BLPOP、BRPOP"></a>BLPOP、BRPOP</h4><p>与LPOP和RPOP类似，唯一不同是会在没有元素时等待指定时间，而不是直接返回nil</p><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的HashMap。因为也是一个hash表，因此具备与HashSet类似的特征：</p><ul><li>无序</li><li>元素不可重复</li><li>查找快</li><li>支持交集、并集、差集等功能</li></ul><h3 id="Set类型常见命令"><a href="#Set类型常见命令" class="headerlink" title="Set类型常见命令"></a>Set类型常见命令</h3><h4 id="SADD、SREM、SCARD"><a href="#SADD、SREM、SCARD" class="headerlink" title="SADD、SREM、SCARD"></a>SADD、SREM、SCARD</h4><p>sadd：向set中添加一个或多个元素</p><p><strong>不会重复</strong></p><img src="https://s2.loli.net/2023/08/27/h8TR4YlmWofF2NX.png" alt="image-20230827151033266" style="zoom: 67%;" /><p>srem：移除set中的指定元素</p><p><img src="https://s2.loli.net/2023/08/27/YcHpdsnK5ECuMx2.png" alt="image-20230827151130254"></p><p><img src="https://s2.loli.net/2023/08/27/v1j23dDscpzJFQr.png" alt="image-20230827151139268"></p><p>scard：返回set中元素的个数</p><p><img src="https://s2.loli.net/2023/08/27/PORxqeutNZbL5VQ.png" alt="image-20230827151155115"></p><h4 id="SISMEMBER、SMEMBERS"><a href="#SISMEMBER、SMEMBERS" class="headerlink" title="SISMEMBER、SMEMBERS"></a>SISMEMBER、SMEMBERS</h4><p>sismember：判断一个元素是否存在于set中</p><p>smembers：获取set中的所有元素</p><p><img src="https://s2.loli.net/2023/08/27/HDUvFaWLM6rm4Ez.png" alt="image-20230827151430246"></p><h4 id="SINTER、SUNION、SDIFF"><a href="#SINTER、SUNION、SDIFF" class="headerlink" title="SINTER、SUNION、SDIFF"></a>SINTER、SUNION、SDIFF</h4><p>sinter：求两个集合的交集</p><p>sunion：求两个集合的并集</p><p>sdiff：求两个集合的差集（补集）</p><h2 id="SortedSet"><a href="#SortedSet" class="headerlink" title="SortedSet"></a>SortedSet</h2><p>Redis的SortedSet是一个可排序的set集合，与Java中的TreeSet有些类似，但底层数据结构却差别很大。SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元素排序，底层的实现是一个跳表（SkipList）加 hash表。</p><p>SortedSet具备下列特性：</p><ul><li>可排序</li><li>元素不重复</li><li>查询速度快</li></ul><p>因为SortedSet的可排序特性，经常被用来实现排行榜这样的功能。</p><h3 id="SortedSet的常见命令"><a href="#SortedSet的常见命令" class="headerlink" title="SortedSet的常见命令"></a>SortedSet的常见命令</h3><h4 id="ZADD、ZREM"><a href="#ZADD、ZREM" class="headerlink" title="ZADD、ZREM"></a>ZADD、ZREM</h4><p>zadd：添加一个或多个元素到sorted set，如果已经存在则更新其score值</p><p>zrem：删除sorted set中的一个指定元素</p><p><img src="https://s2.loli.net/2023/08/27/cWQL2aUnB4wYJXt.png" alt="image-20230827152759717"></p><img src="https://s2.loli.net/2023/08/27/YGKhqyRTploI3JM.png" alt="image-20230827152812548" style="zoom: 67%;" /><p><img src="https://s2.loli.net/2023/08/27/fH2Y4uxJzeCNy1M.png" alt="image-20230827152844811"></p><img src="https://s2.loli.net/2023/08/27/tBEo9raG2WRXi5h.png" alt="image-20230827152854442" style="zoom:67%;" /><h4 id="ZSCORE、ZRANK"><a href="#ZSCORE、ZRANK" class="headerlink" title="ZSCORE、ZRANK"></a>ZSCORE、ZRANK</h4><p>zscore：获取sorted set中指定元素的score值</p><p>zrank：获取sorted set中的指定元素的排名，一般分数越高，排名越靠后</p><p><img src="https://s2.loli.net/2023/08/27/AIfCSXVT3OUrDje.png" alt="image-20230827153031622"></p><h4 id="ZCARD、ZCOUNT"><a href="#ZCARD、ZCOUNT" class="headerlink" title="ZCARD、ZCOUNT"></a>ZCARD、ZCOUNT</h4><p>zcard：统计元素个数</p><p>zcount：统计score值在给定范围内的所有元素的个数</p><p><img src="https://s2.loli.net/2023/08/27/mR71UZgJlNoQTIb.png" alt="image-20230827153415587"></p><h4 id="ZINCRBY"><a href="#ZINCRBY" class="headerlink" title="ZINCRBY"></a>ZINCRBY</h4><p>让sorted set中的指定元素自增，步长为指定的值，添加的是score</p><p><img src="https://s2.loli.net/2023/08/27/4uMvHGZSz9fAm53.png" alt="image-20230827153606740"></p><h4 id="ZRANGE"><a href="#ZRANGE" class="headerlink" title="ZRANGE"></a>ZRANGE</h4><p>按照score排序后，获取指定范围内的元素，这里的范围代指索引，也可以称为排名</p><p><img src="https://s2.loli.net/2023/08/27/xn3Ee6ATyWlq5tV.png" alt="image-20230827153718727"></p><h4 id="ZRANGEBYSCORE"><a href="#ZRANGEBYSCORE" class="headerlink" title="ZRANGEBYSCORE"></a>ZRANGEBYSCORE</h4><p>按照score排序后，获取score范围内的元素，根据score来获取值</p><p><img src="https://s2.loli.net/2023/08/27/ObIiZut8kcgUxRq.png" alt="image-20230827153927534"></p><h4 id="ZDIFF、ZINTER、ZUNION"><a href="#ZDIFF、ZINTER、ZUNION" class="headerlink" title="ZDIFF、ZINTER、ZUNION"></a>ZDIFF、ZINTER、ZUNION</h4><p>求差集、交集、并集，跟set一致</p><p>注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加REV即可，例如：</p><ul><li><code>升序</code>获取sorted set 中的指定元素的排名：ZRANK key member</li><li><code>降序</code>获取sorted set 中的指定元素的排名：ZREVRANK key memeber</li></ul><h1 id="Redis的Java客户端"><a href="#Redis的Java客户端" class="headerlink" title="Redis的Java客户端"></a>Redis的Java客户端</h1><h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p>新建一个maven工程</p><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jedis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在test下新建Java类</p><p>建立连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Jedis jedis;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @BeforeEach在测试类方法执行前所执行的方法</span></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 1、建立连接</span></span><br><span class="line">        jedis = <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">// 2、设置密码</span></span><br><span class="line">        jedis.auth(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">// 3、选择库</span></span><br><span class="line">        jedis.select(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 关闭连接</span></span><br><span class="line">        <span class="keyword">if</span> (jedis != <span class="literal">null</span>)</span><br><span class="line">            jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 存储数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">        <span class="comment">// 获取数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;newName = &quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下</p><p>报错是正常的，这个不用管</p><p><img src="https://s2.loli.net/2023/08/27/QfJaHh19KVqgoWD.png" alt="image-20230827175632015"></p><p>接着测试一下其他的写法</p><p>Hash</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    jedis.hset(<span class="string">&quot;user:1&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    jedis.hset(<span class="string">&quot;user:1&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;10&quot;</span>);</span><br><span class="line">    jedis.hset(<span class="string">&quot;user:1&quot;</span>,<span class="string">&quot;score&quot;</span>,<span class="string">&quot;99.9&quot;</span>);</span><br><span class="line">    Map&lt;String, String&gt; hgetAll = jedis.hgetAll(<span class="string">&quot;user:1&quot;</span>);</span><br><span class="line">    System.out.println(hgetAll);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/27/BsVNfn7dovMywLC.png" alt="image-20230827191620229"></p><p>其他的也是类似的，只要知道命令就会写了</p><h3 id="Jedis连接池"><a href="#Jedis连接池" class="headerlink" title="Jedis连接池"></a>Jedis连接池</h3><p>Jedis本身是线程不安全的，并且频繁的创建和销毁连接会造成有性能损耗，因此我们推荐Jedis连接池代替Jedis的直连方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisConnectionFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 配置连接池</span></span><br><span class="line">        <span class="type">JedisPoolConfig</span> <span class="variable">poolConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">        <span class="comment">// 最大连接数</span></span><br><span class="line">        poolConfig.setMaxTotal(<span class="number">8</span>);</span><br><span class="line">        <span class="comment">// 设置最大空闲时间,预备8个池子，即使没人访问，依然有8个池子</span></span><br><span class="line">        poolConfig.setMaxIdle(<span class="number">8</span>);</span><br><span class="line">        <span class="comment">// 最少可以为0，即使没人用，也可以释放掉</span></span><br><span class="line">        poolConfig.setMinIdle(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 设置等待时间为1秒，池子满了无法连接一秒后就报错</span></span><br><span class="line">        poolConfig.setMaxWaitMillis(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">// 创建连接池对象</span></span><br><span class="line">        jedisPool = <span class="keyword">new</span> <span class="title class_">JedisPool</span>(poolConfig,<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6379</span>,<span class="number">1000</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title function_">getJedis</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并修改JedisTest中的连接方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @BeforeEach在测试类方法执行前所执行的方法</span></span><br><span class="line"><span class="meta">@BeforeEach</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 1、建立连接</span></span><br><span class="line">    jedis = JedisConnectionFactory.getJedis();</span><br><span class="line">    <span class="comment">// 2、设置密码</span></span><br><span class="line">    jedis.auth(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="comment">// 3、选择库</span></span><br><span class="line">    jedis.select(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次测试</p><p><img src="https://s2.loli.net/2023/08/27/VCX4Sn1axfOiLwh.png" alt="image-20230827193556729"></p><h2 id="SpringDataRedis"><a href="#SpringDataRedis" class="headerlink" title="SpringDataRedis"></a>SpringDataRedis</h2><p>SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做SpringDataRedis</p><p>官网地址：<a href="https://spring.io/projects/spring-data-redis">https://spring.io/projects/spring-data-redis</a></p><ul><li>提供了对不同Redis客户端的整合（Lettuce和Jedis）</li><li>提供了RedisTemplate统一API来操作Redis</li><li>支持Redis的发布订阅模型</li><li>支持Redis哨兵和Redis集群</li><li>支持基于Lettuce的响应式编程</li><li>支持基于JDK、JSON、字符串、Spring对象的数据序列化及反序列化</li><li>支持基于Redis的JDKCollection实现</li></ul><p>SpringDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作API封装到了不同的类型中：</p><p><img src="https://s2.loli.net/2023/08/27/AC9oBh7J41cR5OX.png" alt="image-20230827194234532"></p><h3 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h3><p>创建一个Spring Boot项目</p><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>fun.eastwind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>RedisDemo2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>RedisDemo2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>RedisDemo2<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- redis依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- common-pool依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置application.yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="comment"># 最大连接数</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment"># 空闲时最大可连接数</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment"># 空闲时最少可连接数</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 连接的最大等待时间</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">100ms</span></span><br></pre></td></tr></table></figure><p>自动注入RedisTemplate并测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisDemo2ApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RedisTemplate的RedisSerializer（序列化器）"><a href="#RedisTemplate的RedisSerializer（序列化器）" class="headerlink" title="RedisTemplate的RedisSerializer（序列化器）"></a>RedisTemplate的RedisSerializer（序列化器）</h3><p>为什么说序列化器呢，当你执行完刚刚的测试代码后，去Redis客户端中get这个name字段</p><p><img src="https://s2.loli.net/2023/08/27/Wh6RFD9ef8uG4wY.png" alt="image-20230827200137337"></p><p>此时会发现是zhangsan，当你在Redis客户端后重新设置name，name会改变，而你在自己写的测试上运行后，再次get，依然是客户端上的值，这是怎么回事呢，我们keys *查看一下所有的key<img src="https://s2.loli.net/2023/08/27/tR4qKX3raJ6gdMP.png" alt="image-20230827200254513"></p><p>此时发现了一个很奇怪的东西，但不可否认的，这个key就是你刚刚set上去的name</p><p>RedisTemplate可以接收任意Object作为值写入Redis</p><p>只不过写入前会把Object序列化为字节形式，默认是采用JDK序列化，得到的结果是这样的</p><p><code>&quot;\xAC\xED\x00\x05t\x00\x04name&quot;</code></p><p>缺点：</p><ul><li>可读性差</li><li>内存占用较大</li></ul><p>我们可以自定义RedisTemplate的序列化方式</p><p>引入JackSon依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Jackson依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTemplateSerializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建RedisTemplate对象</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 设置连接工厂</span></span><br><span class="line">        redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">// 设置JSON序列化工具</span></span><br><span class="line">        <span class="type">GenericJackson2JsonRedisSerializer</span> <span class="variable">jsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line">        <span class="comment">// 设置key的序列化</span></span><br><span class="line">        redisTemplate.setKeySerializer(RedisSerializer.string());</span><br><span class="line">        redisTemplate.setHashKeySerializer(RedisSerializer.string());</span><br><span class="line">        <span class="comment">// 设置value的序列化</span></span><br><span class="line">        redisTemplate.setValueSerializer(jsonRedisSerializer);</span><br><span class="line">        redisTemplate.setHashValueSerializer(jsonRedisSerializer);</span><br><span class="line">        <span class="comment">// 返回</span></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisDemo2ApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/27/WfTNQ1qrOpLvd5P.png" alt="image-20230827201822126"></p><p>此时就成功了，如果你存入对象的话，会自动转为json对象并存入</p><h3 id="StringRedisTemplate"><a href="#StringRedisTemplate" class="headerlink" title="StringRedisTemplate"></a>StringRedisTemplate</h3><p>为了节省内存空间，我们可以不使用JSON序列化器来处理value，而是统一使用String序列化器，要求只能存储String类型的key和value。当需要存储Java对象时，手动完成对象的序列化和反序列化。</p><p>因为存入和读取时的序列化及反序列化都是我们自己实现的，SpringDataRedis就不会将class信息写入Redis了</p><p>这种用法比较普遍，因此SpringDataRedis就提供了RedisTemplate的子类：StringRedisTemplate，它的key和value的序列化方式默认就是String方式。</p><p>普通属性（非对象）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisDemo2ApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) stringRedisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象（手动序列化）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisDemo2ApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">zhangsan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">66</span>);</span><br><span class="line">        <span class="comment">// 手动序列化对象(将对象写成json)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> mapper.writeValueAsString(zhangsan);</span><br><span class="line">        <span class="comment">// 写入数据</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;user:1&quot;</span>,value);</span><br><span class="line">        <span class="comment">// 获取数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonUser</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;user:1&quot;</span>);</span><br><span class="line">        <span class="comment">// 手动反序列化对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.readValue(jsonUser, User.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：大大减少了字节码文件的空间</p><p><img src="https://s2.loli.net/2023/08/27/URK3DC5YnwWTBNA.png" alt="image-20230827203329137"></p><p>关于其他的类型，其实都是类似的，这里也不再赘述了</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-Plus代码生成器</title>
      <link href="/eastwind/ced26210.html"/>
      <url>/eastwind/ced26210.html</url>
      
        <content type="html"><![CDATA[<p><code>MyBatis-Plus-Generator</code>：自动生成 Controller Service Mapper&#x2F;DAO层等的基本代码，免去自己去写实体类映射数据库的繁琐操作</p><h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis-plus自动生成代码 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 代码自动生成依赖 begin --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- velocity --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 代码自动生成依赖 end--&gt;</span></span><br></pre></td></tr></table></figure><h1 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h1><p>在测试类中运行代码即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        <span class="comment">// 是否支持AR模式</span></span><br><span class="line">        config.setActiveRecord(<span class="literal">true</span>)</span><br><span class="line">                <span class="comment">// 作者</span></span><br><span class="line">                .setAuthor(<span class="string">&quot;EastWind&quot;</span>)</span><br><span class="line">                <span class="comment">// 生成路径，最好使用绝对路径</span></span><br><span class="line">                .setOutputDir(<span class="string">&quot;D:\\test&quot;</span>)</span><br><span class="line">                <span class="comment">// 文件覆盖</span></span><br><span class="line">                .setFileOverride(<span class="literal">true</span>)</span><br><span class="line">                <span class="comment">// 主键策略</span></span><br><span class="line">                .setIdType(IdType.AUTO)</span><br><span class="line"></span><br><span class="line">                .setDateType(DateType.ONLY_DATE)</span><br><span class="line">                <span class="comment">// 设置生成的service接口的名字</span></span><br><span class="line">                <span class="comment">// xxxService</span></span><br><span class="line">                .setServiceName(<span class="string">&quot;%sService&quot;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment">//实体类结尾名称</span></span><br><span class="line">                .setEntityName(<span class="string">&quot;%s&quot;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment">//生成基本的resultMap</span></span><br><span class="line">                .setBaseResultMap(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment">//不使用AR模式</span></span><br><span class="line">                .setActiveRecord(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment">//生成基本的SQL片段</span></span><br><span class="line">                .setBaseColumnList(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 数据源配置</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dsConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        <span class="comment">// 设置数据库类型</span></span><br><span class="line">        dsConfig.setDbType(DbType.MYSQL)</span><br><span class="line">                .setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class="line">                <span class="comment">//TODO  TODO  TODO  TODO</span></span><br><span class="line">                .setUrl(<span class="string">&quot;jdbc:mysql://localhost:13306/mall?serverTimezone=UTC&amp;useSSL=false&quot;</span>)</span><br><span class="line">                .setUsername(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">                .setPassword(<span class="string">&quot;密码&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 策略配置globalConfiguration中</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">stConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//全局大写命名</span></span><br><span class="line">        stConfig.setCapitalMode(<span class="literal">true</span>)</span><br><span class="line">                <span class="comment">// 数据库表映射到实体的命名策略</span></span><br><span class="line">                .setNaming(NamingStrategy.underline_to_camel)</span><br><span class="line"></span><br><span class="line">                <span class="comment">//使用restcontroller注解</span></span><br><span class="line">                .setRestControllerStyle(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 生成的表, 支持多表一起生成，以数组形式填写</span></span><br><span class="line">                <span class="comment">// 设置需要生成的表</span></span><br><span class="line">                .setInclude(<span class="string">&quot;自己在数据库中的表名&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 包名策略配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">pkConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        pkConfig.setParent(<span class="string">&quot;fun.eastwind.mall&quot;</span>)</span><br><span class="line">                .setMapper(<span class="string">&quot;mapper&quot;</span>)</span><br><span class="line">                .setService(<span class="string">&quot;service&quot;</span>)</span><br><span class="line">                .setController(<span class="string">&quot;controller&quot;</span>)</span><br><span class="line">                .setEntity(<span class="string">&quot;pojo&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 整合配置</span></span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">ag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line">        ag.setGlobalConfig(config)</span><br><span class="line">                .setDataSource(dsConfig)</span><br><span class="line">                .setStrategy(stConfig)</span><br><span class="line">                .setPackageInfo(pkConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6. 执行操作</span></span><br><span class="line">        ag.execute();</span><br><span class="line">        System.out.println(<span class="string">&quot;=======  Done 相关代码生成完毕  ========&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后就会在D:&#x2F;test目录下发现自己生成的代码了！</p>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis-Plus </tag>
            
            <tag> 实用工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postman工具</title>
      <link href="/eastwind/8cbd8d9c.html"/>
      <url>/eastwind/8cbd8d9c.html</url>
      
        <content type="html"><![CDATA[<p>由于Postman在2018年后，就不支持浏览器版本，所以需要下载客户端再安装使用</p><p>下面以Windows为例进行安装</p><h1 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h1><p>访问postman官方网站，下载最新版本：<a href="https://www.postman.com/">https://www.postman.com/</a></p><p><img src="https://s2.loli.net/2023/08/17/bxGYAruhDpitvmg.png" alt="image-20230817085128946"></p><p>根据自己电脑的系统来下载</p><p><img src="https://s2.loli.net/2023/08/17/vc7gTsW2HaXYRKw.png" alt="image-20230817085254054"></p><p>下载好之后，进行安装，安装就不讲了，跟普通软件的安装方式是一样的，安装完成后，进行一个注册和登录，就可以进到页面里了</p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><img src="https://s2.loli.net/2023/08/17/HPwsemhAyEtGWjo.png" alt="image-20230817085610314" style="zoom:50%;" /><p>点击创建一个工作空间</p><img src="https://s2.loli.net/2023/08/17/QSFsIer6HNx9fVk.png" alt="image-20230817085643819" style="zoom:50%;" /><p><img src="https://s2.loli.net/2023/08/17/DLQHYWeMcE3Utq2.png" alt="image-20230817085753069"></p><p>创建完成后会来到如下页面</p><p>点击这个按钮会新建一个连接</p><p><img src="https://s2.loli.net/2023/08/17/Pj4eq6tByIkKxFO.png" alt="image-20230817085905695"></p><p>右击这个按钮，添加一个请求</p><img src="https://s2.loli.net/2023/08/17/aHqxbXsI2gPYKtG.png" alt="image-20230817090053973" style="zoom:50%;" /><p>默认是get请求，你可以根据自己的需求来确定</p><p><img src="https://s2.loli.net/2023/08/17/a897CmKxLyqpkJX.png" alt="image-20230817090116652"></p><h1 id="常见的连接方式"><a href="#常见的连接方式" class="headerlink" title="常见的连接方式"></a>常见的连接方式</h1><p>讲一下常见的几种连接参数</p><h2 id="Get请求"><a href="#Get请求" class="headerlink" title="Get请求"></a>Get请求</h2><p>一般把地址拷贝到地址栏里就可以了，下面的Response是响应的内容</p><img src="https://s2.loli.net/2023/08/17/daDpH6UzNMyrTXC.png" alt="image-20230817090340322" style="zoom: 33%;" /><h2 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h2><h3 id="表单类型的接口请求"><a href="#表单类型的接口请求" class="headerlink" title="表单类型的接口请求"></a>表单类型的接口请求</h3><p>表单类型数据其实就是在请求头中查看Content-Type，它的值如果是:application&#x2F;x-www-form-urlencoded ，那么就说明客户端提交的数据是以表单形式提交的，这里一般发送的都是表单类的请求测试</p><p><img src="https://s2.loli.net/2023/08/17/OXoKswUz6jq3YmI.png" alt="image-20230817090617628"></p><h3 id="上传文件的表单请求"><a href="#上传文件的表单请求" class="headerlink" title="上传文件的表单请求"></a>上传文件的表单请求</h3><p>跟表单数据差不多，其实就是将x-www-form-urlencoded改为了form-data，可以携带的参数由Text变为File，File的Value就可以选择文件了</p><p><img src="https://s2.loli.net/2023/08/17/RW1nczqJyA35sk7.png" alt="image-20230817091134556"></p><h3 id="json类型的接口请求"><a href="#json类型的接口请求" class="headerlink" title="json类型的接口请求"></a>json类型的接口请求</h3><p>都没啥区别，其实还是跟上面的类似，只需要简单的变动一下参数</p><img src="https://s2.loli.net/2023/08/17/KwIJh4YL81EDCem.png" alt="image-20230817091440542" style="zoom: 33%;" />]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用工具 </tag>
            
            <tag> Postman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞吉外卖优化</title>
      <link href="/eastwind/ea7374cf.html"/>
      <url>/eastwind/ea7374cf.html</url>
      
        <content type="html"><![CDATA[<h1 id="缓存优化"><a href="#缓存优化" class="headerlink" title="缓存优化"></a>缓存优化</h1><h2 id="使用Git管理代码"><a href="#使用Git管理代码" class="headerlink" title="使用Git管理代码"></a>使用Git管理代码</h2><p>先让IDEA绑定<code>Github</code>，在vcs下选择创建一个git仓库，并选择需要被Git管理的目录，选择确认</p><p>再右击整个项目，菜单栏有个Git，依次点击命令即可</p><img src="https://s2.loli.net/2023/08/14/2lZQIyqfDFh75xW.png" alt="image-20230806102330765" style="zoom:50%;" /><p>记得选中整个文件夹，不然推送可能不一定完整，commit后会出现以下情况，展示页面跟IDEA的版本有关，不过整体内容大差不差</p><img src="https://s2.loli.net/2023/08/14/rfy4Xt7HdEaz9Ub.png" alt="image-20230806101315050" style="zoom:50%;" /><p>这里我们选择连Commit and Push提交带推送，这样比较快捷，但是我们还没有设置自己的远程仓库，需要去Github上复制一下自己的仓库地址来进行上传</p><img src="https://s2.loli.net/2023/08/14/aMI4sVzojSGxcZg.png" alt="image-20230806101640382" style="zoom:50%;" /><p>Commit and Push后出现以下页面</p><img src="https://s2.loli.net/2023/08/14/AlGxPWC7wDL9u5X.png" alt="image-20230806101805774" style="zoom:50%;" /><p>在这里定义远程仓库，把刚刚复制的仓库地址粘贴上去</p><img src="https://s2.loli.net/2023/08/14/K9GztY7yN5ZH8o3.png" alt="image-20230806101851407" style="zoom:50%;" /><img src="https://s2.loli.net/2023/08/14/qAPdUYi5uhZyBVJ.png" alt="image-20230806101948608" style="zoom:50%;" /><p>点击push推送过去，可能会让你登录一下Github进行授权啥的，这里登录就行了，然后等待推送完成，去Github上面查看一下，有就成功了<img src="https://s2.loli.net/2023/08/14/zVfioUqC5N3R8Pe.png" alt="image-20230806102219573" style="zoom:50%;" /></p><p>这时候我们再创建一个新的分支，把内容跟master分支分隔开</p><img src="https://s2.loli.net/2023/08/14/IR25xUjpYCZXb3c.png" alt="image-20230806103100562" style="zoom:50%;" /><p>这里我创建了一个v1.0的分支</p><p>然后，我们把内容推送到v1.0这个分支上去</p><img src="https://s2.loli.net/2023/08/14/SKAhk1MtL63bERw.png" alt="image-20230806103339971" style="zoom:50%;" /><img src="https://s2.loli.net/2023/08/14/HUmR62lZFD7zMoh.png" alt="image-20230806103356640" style="zoom:50%;" /><p>现在的内容没有变化，是因为还没有修改代码的内容，后期在v1.0上开发，内容就不一样了</p><p>在v1.0上开发完成后，还可以将内容合并回master分支上，非常方便和快捷，即使写错了也不会修改原master上的代码</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h3><p>问题说明：</p><ul><li>当用户数量足够多的时候，系统访问量大</li><li>频繁的访问数据库，系统性能下降，用户体验差</li><li>所以一些通用、常用的数据，我们可以使用Redis来缓存，避免用户频繁访问数据库</li></ul><h3 id="导入SpringDataRedis的maven坐标"><a href="#导入SpringDataRedis的maven坐标" class="headerlink" title="导入SpringDataRedis的maven坐标"></a>导入SpringDataRedis的maven坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="redis配置文件"><a href="#redis配置文件" class="headerlink" title="redis配置文件"></a>redis配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redis:</span></span><br><span class="line"><span class="attr">host:</span> <span class="string">localhost</span> <span class="comment">#这里换成localhost或者你自己的linux上装的redis</span></span><br><span class="line"><span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">database:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="配置序列化器"><a href="#配置序列化器" class="headerlink" title="配置序列化器"></a>配置序列化器</h3><ul><li>配置一下序列化器，防止乱码问题（实际上不是乱码，只是一种展现的形式），方便我们在图形化界面中查看我们存入的数据，在config包下新建RedisConfig类</li><li>但是也可以不配置RedisConfig，而是直接用<code>SpringRedisConfig</code>，它的默认序列化器就是<code>StringRedisSerializer</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line"></span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//默认的Key序列化器为：JdkSerializationRedisSerializer</span></span><br><span class="line">        <span class="comment">// 设置键的序列化器统一</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="comment">// 设置值的序列化器统一</span></span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setHashValueSerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后将修改完的数据提交并推送到那个新的v1.0的分支上去即可</p><h2 id="缓存手机验证码"><a href="#缓存手机验证码" class="headerlink" title="缓存手机验证码"></a>缓存手机验证码</h2><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>先想一下之前做的邮件验证码是存储在哪的</p><p>存储在Session域中，现在学习了Redis，就可以缓存在Redis中</p><p>操作步骤如下：</p><ol><li>在服务端UserController中注入RedisTemplate对象，用于操作Redis；</li><li>在服务端UserController中的sendMsg方法中，将随机生成的验证码缓存到Redis中，并设置有效期为5分钟，因为一般的手机短信有效期也为5分钟</li><li>在服务端UserController中的login方法中，从Redis中获取缓存的代码，如果登录成功则删除Redis的验证码</li></ol><h3 id="代码改造"><a href="#代码改造" class="headerlink" title="代码改造"></a>代码改造</h3><p>在UserController中注入RedisTemplate对象，用于操作Redis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure><p>在服务端UserController中的sendMsg方法中，将随机生成的验证码缓存到Redis中，并设置有效期为5分钟</p><p>修改前后比较</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;/sendMsg&quot;)</span><br><span class="line">public Result&lt;String&gt; sendMsg(@RequestBody User user, HttpSession session) throws MessagingException &#123;</span><br><span class="line">    String phone = user.getPhone();</span><br><span class="line">    if (!phone.isEmpty()) &#123;</span><br><span class="line">        //随机生成一个验证码</span><br><span class="line">        String code = MailUtils.achieveCode();</span><br><span class="line">        log.info(code);</span><br><span class="line">        //这里的phone其实就是邮箱，code是我们生成的验证码</span><br><span class="line">        MailUtils.sendTestMail(phone, code);</span><br><span class="line"><span class="deletion">-       //验证码存session，方便后面拿出来比对phone</span></span><br><span class="line"><span class="deletion">-       session.setAttribute(phone, code);</span></span><br><span class="line"><span class="addition">+// 验证码缓存到Redis中，设置存活时间5分钟</span></span><br><span class="line"><span class="addition">+redisTemplate.opsForValue().set(&quot;code&quot;,code,5, TimeUnit.MINUTES);</span></span><br><span class="line">        return Result.success(&quot;验证码发送成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return Result.error(&quot;验证码发送失败&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/sendMsg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@RequestBody</span> User user, HttpSession session)</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> user.getPhone();</span><br><span class="line">        <span class="keyword">if</span> (!phone.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//随机生成一个验证码</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> MailUtils.achieveCode();</span><br><span class="line">            log.info(code);</span><br><span class="line">            <span class="comment">//这里的phone其实就是邮箱，code是我们生成的验证码</span></span><br><span class="line">            MailUtils.sendTestMail(phone, code);</span><br><span class="line">            <span class="comment">// 存储到Redis中并设置5分钟的存活时间</span></span><br><span class="line">            redisTemplate.opsForValue().set(<span class="string">&quot;code&quot;</span>,code,<span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line">            <span class="keyword">return</span> Result.success(<span class="string">&quot;验证码发送成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">&quot;验证码发送失败&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在服务端UserController中的login方法中，从Redis中获取缓存的代码，如果登录成功则删除Redis的验证码</p><p>修改前后比较</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;/login&quot;)</span><br><span class="line">public Result&lt;User&gt; login(@RequestBody Map map, HttpSession session) &#123;</span><br><span class="line">    // 获取邮箱</span><br><span class="line">    String phone = map.get(&quot;phone&quot;).toString();</span><br><span class="line">    // 获得验证码，需要和系统内部的验证码进行比对</span><br><span class="line">    String code = map.get(&quot;code&quot;).toString();</span><br><span class="line"><span class="deletion">-   // 从session中获得验证码，session中的验证码之前在发送时，已经让服务器获得了</span></span><br><span class="line"><span class="deletion">-   String codeInSession = session.getAttribute(phone).toString();</span></span><br><span class="line"><span class="addition">+// 把刚刚存入Redis的code拿出来</span></span><br><span class="line"><span class="addition">+   Object codeInRedis = redisTemplate.opsForValue().get(&quot;code&quot;);</span></span><br><span class="line"><span class="deletion">-   if (code != null &amp;&amp; code.equals(codeInSession)) &#123;</span></span><br><span class="line">// 用redis中的code进行比较</span><br><span class="line"><span class="addition">+if (code != null &amp;&amp; code.equals(codeInRedis)) &#123;</span></span><br><span class="line">        // 如果输入正确，验证用户是否存在</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getPhone, phone);</span><br><span class="line">        User user = userService.getOne(queryWrapper);</span><br><span class="line">        if (user == null) &#123;</span><br><span class="line">            // 如果user为空，就创建一个新的user对象</span><br><span class="line">            user = new User();</span><br><span class="line">            user.setPhone(phone);</span><br><span class="line">            userService.save(user);</span><br><span class="line"><span class="deletion">-           user.setName(&quot;用户&quot; + codeInSession);</span></span><br><span class="line"><span class="addition">+user.setName(&quot;用户&quot; + codeInRedis);</span></span><br><span class="line">        &#125;</span><br><span class="line">        // 存个session，表示登录状态</span><br><span class="line">        session.setAttribute(&quot;user&quot;, user.getId());</span><br><span class="line">        // 并作为结果返回</span><br><span class="line"><span class="addition">+       // 如果登录成功，则删除Redis中的验证码</span></span><br><span class="line"><span class="addition">+       redisTemplate.delete(&quot;code&quot;);</span></span><br><span class="line">        return Result.success(user);</span><br><span class="line">    &#125;</span><br><span class="line">    return Result.error(&quot;登录失败&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;User&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> Map map, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取邮箱</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> map.get(<span class="string">&quot;phone&quot;</span>).toString();</span><br><span class="line">    <span class="comment">// 获得验证码，需要和系统内部的验证码进行比对</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> map.get(<span class="string">&quot;code&quot;</span>).toString();</span><br><span class="line">    <span class="comment">// 把刚刚存入Redis的code拿出来</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">codeInRedis</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">    <span class="comment">// 判断从Redis中获取的code是否相同</span></span><br><span class="line">    <span class="keyword">if</span> (code != <span class="literal">null</span> &amp;&amp; code.equals(codeInRedis)) &#123;</span><br><span class="line">        <span class="comment">// 如果输入正确，验证用户是否存在</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getPhone, phone);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果user为空，就创建一个新的user对象</span></span><br><span class="line">            user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setPhone(phone);</span><br><span class="line">            userService.save(user);</span><br><span class="line">            user.setName(<span class="string">&quot;用户&quot;</span> + codeInRedis);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 存个session，表示登录状态</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;user&quot;</span>, user.getId());</span><br><span class="line">        <span class="comment">// 并作为结果返回</span></span><br><span class="line">        <span class="comment">// 如果登录成功，则删除Redis中的验证码</span></span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h3><p>在测试时，发现一个报错：ERR Client sent AUTH, but no password is set，说是密码没有设置，原因是我们是通过redis-server.exe启动的，而双击启动默认是去找redis.conf的配置文件，然后没找到，所以也就报了之前的ERR Client sent AUTH, but no password is set错误。</p><p>解决办法：</p><p>方案1：</p><p>在redis安装目录下找到<strong>redis.windows.conf</strong>文件</p><p>找到这一行：<img src="https://s2.loli.net/2023/08/14/Xjg32vfRtr4aSQl.png" alt="image-20230806150448405" style="zoom:50%;" /></p><p>然后在<strong>redis目录下</strong>cmd运行命令：<code>redis-server.exe redis.windows.conf</code></p><p>方案2：</p><p><strong>其实就没设置密码，你直接把IDEA里的密码删了就行，无需密码可以直接访问</strong></p><p>其实是类似于之前在Linux中的vim文件里的配置</p><p>这里我采用的是方案2，方案1我试了几次，感觉比较麻烦，所以我采用了方案2</p><p>配好之后我们再次测试</p><p>打开redis的服务器和客户端</p><p>获取邮箱验证码后，在redis中进行查看</p><p><img src="https://s2.loli.net/2023/08/14/1cEadSMUlnQqJmC.png" alt="image-20230806153106723"></p><p>这里发现，redis中已经缓存了我们的数据了</p><p>此时我们进行登录</p><img src="https://s2.loli.net/2023/08/14/n4eAvH5orIf7mG8.png" alt="image-20230806153248759" style="zoom:50%;" /><p>此时就登录成功了，我们再去看看验证码有没有被删除</p><p><img src="https://s2.loli.net/2023/08/14/kpPxKoXGdVNYfJB.png" alt="image-20230806153432733"></p><h2 id="缓存菜品数据"><a href="#缓存菜品数据" class="headerlink" title="缓存菜品数据"></a>缓存菜品数据</h2><ul><li>菜品数据是我们登录移动端之后的展示页面</li><li>所以每当我们访问首页的时候，都会调用数据库查询一遍菜品数据</li><li>对于这种需要频繁访问的数据，我们可以将其缓存到Redis中以减轻服务器的压力</li></ul><h3 id="实现思路-1"><a href="#实现思路-1" class="headerlink" title="实现思路"></a>实现思路</h3><ul><li>移动端对应的菜品查看功能，是DishController中的list方法，此方法会根据前端提交的查询条件进行数据库查询操作（用户选择不同的菜品分类）。在高并发的情况下，频繁查询数据库会导致系统性能下降，服务端响应时间增长。所以现在我们需要对此方法进行缓存优化，提高系统性能</li><li>但是还有存在一个问题，我们是将所有的菜品缓存一份，还是按照菜品&#x2F;套餐分类，来进行缓存数据呢？</li><li>答案是后者，当我们点击某一个分类时，只需展示当前分类下的菜品，而其他分类的菜品数据并不需要展示，所以我们在缓存的时候，根据菜品的分类，缓存多分类数据，页面在查询时，点击某个分类，则查询对应分类下的菜品的缓存数据</li><li>具体实现思路如下<ol><li>修改DishController中的list方法，先从Redis中获取分类对应的菜品数据，如果有，则直接返回；如果无，则查询数据库，并将查询到的菜品数据存入Redis缓存中</li><li>修改DishController的save、update和delete方法，加入清理缓存的逻辑，避免产生脏数据，也就是说我们修改&#x2F;更新&#x2F;删除了菜品，但是缓存没有被清理，数据还是之前的，所以展示的还是之前的，我们需要清理缓存，让它重新加载数据（其实就是我们实际已经在后台修改&#x2F;更新&#x2F;删除了某些菜品，但由于缓存数据未被清理，未重新查询数据库，用户看到的还是我们修改之前的数据）</li></ol></li></ul><h3 id="代码改造-1"><a href="#代码改造-1" class="headerlink" title="代码改造"></a>代码改造</h3><p>在DishController中需要注入<code>RedisTemplate</code>来使用Redis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure><p>修改后的代码如下</p><p>梳理一下思路，设立一个key用于区分不同的缓存内容，比如1号菜品里有什么菜，二号菜品有什么菜，这些缓存的key都是不同的，不能放在一个里面，通过key来进行区分，然后我们先从redis中获取对应的key，来进行判断，如果key存在，说明该缓存存在，直接返回缓存即可，否则，进行数据的查询，查询完成后，再使用redis进行数据的保存，最后返回数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="comment">// 先将返回值类型改为List&lt;DishDto&gt;</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;List&lt;DishDto&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span>&#123;</span><br><span class="line">        <span class="comment">// 将dishDtoList作为内容缓存到Redis中</span></span><br><span class="line">        List&lt;DishDto&gt; dishDtoList = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// key是用于区分不同的缓存内容</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dish.getCategoryId() + <span class="string">&quot;_&quot;</span> + dish.getStatus();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先从redis中获取缓存数据(获取的缓存数据应该是应该为dishDtoList)</span></span><br><span class="line">        dishDtoList = (List&lt;DishDto&gt;) redisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果存在，返回数据，无需查询</span></span><br><span class="line">        <span class="keyword">if</span> (dishDtoList != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 直接将查询到的缓存数据返回</span></span><br><span class="line">            <span class="keyword">return</span> Result.success(dishDtoList);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果不存在，就需要进行查询，并使用redis加以缓存</span></span><br><span class="line">        <span class="comment">// 以下代码都是进行数据查询</span></span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 得到该菜品项对应的菜品</span></span><br><span class="line">        queryWrapper.eq(dish.getCategoryId() != <span class="literal">null</span>,Dish::getCategoryId,dish.getCategoryId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加条件，查询状态为1（起售状态）的菜品</span></span><br><span class="line">        queryWrapper.eq(Dish::getStatus,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加排序条件(先按照sort来排序，如果sort相同，再按照更新时间来排序)</span></span><br><span class="line">        queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        dishDtoList = list.stream().map((item) -&gt; &#123;</span><br><span class="line">            <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">            BeanUtils.copyProperties(item,dishDto);</span><br><span class="line">            <span class="comment">// 分类id</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">            <span class="comment">// 根据Id查询分类对象</span></span><br><span class="line">            <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (category != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">// 如果分类对象查询到了，说明该菜品有分类</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">                <span class="comment">// 就让菜品设置一下这个分类对象名字</span></span><br><span class="line">                dishDto.setCategoryName(categoryName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 得到菜品的id</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">itemId</span> <span class="operator">=</span> item.getId();</span><br><span class="line"></span><br><span class="line">            LambdaQueryWrapper&lt;DishFlavor&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">            <span class="comment">// 查找与当前菜品id相同的口味信息</span></span><br><span class="line">            wrapper.eq(DishFlavor::getDishId,itemId);</span><br><span class="line">            List&lt;DishFlavor&gt; flavors = dishFlavorService.list(wrapper);</span><br><span class="line">            <span class="comment">// 设置菜品口味</span></span><br><span class="line">            dishDto.setFlavors(flavors);</span><br><span class="line">            <span class="keyword">return</span> dishDto;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将数据缓存到redis中，避免二次查询(并设置缓存时间为60分钟)</span></span><br><span class="line">        redisTemplate.opsForValue().set(key,dishDtoList,<span class="number">60</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> Result.success(dishDtoList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>为save和update方法加入清理缓存的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span> &#123;</span><br><span class="line">    dishService.saveWithFlavor(dishDto);</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dishDto.getCategoryId() + <span class="string">&quot;_1&quot;</span>;</span><br><span class="line">    <span class="comment">// 删除之前的key，也就是清除缓存，之前的内容就不存在了，会去数据库中重新查找</span></span><br><span class="line">    redisTemplate.delete(key);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;新增菜品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span> &#123;</span><br><span class="line">    dishService.updateWithFlavor(dishDto);</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dishDto.getCategoryId() + <span class="string">&quot;_1&quot;</span>;</span><br><span class="line">    <span class="comment">// 删除之前的key，也就是清除缓存，之前的内容就不存在了，会去数据库中重新查找</span></span><br><span class="line">    redisTemplate.delete(key);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;更新菜品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我还没有写这个停售起售的功能，所以就没有进行更改，后期项目做完了再回头来补</p><p><strong>注意：这里并不需要我们对删除操作也进行缓存清理，因为删除操作执行之前，必须先将菜品状态修改为<code>停售</code>，而停售状态也会帮我们清理缓存，同时也看不到菜品，随后将菜品删除，仍然看不到菜品，故删除操作不需要进行缓存清理</strong></p><h3 id="功能测试-1"><a href="#功能测试-1" class="headerlink" title="功能测试"></a>功能测试</h3><p>在进行测试前，我们需要做一件事，就是修改RedisConfig类中之前写的值的序列化器统一，之前把他们统一成String了，所以就会只能返回String，我们去注释掉里面的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line"></span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//默认的Key序列化器为：JdkSerializationRedisSerializer</span></span><br><span class="line">        <span class="comment">// 设置键的序列化器统一</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="comment">// 设置值的序列化器统一</span></span><br><span class="line"><span class="comment">//        redisTemplate.setValueSerializer(new StringRedisSerializer());</span></span><br><span class="line"><span class="comment">//        redisTemplate.setHashValueSerializer(new StringRedisSerializer());</span></span><br><span class="line">        redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后启动测试</p><img src="https://s2.loli.net/2023/08/14/2N6roeYWaxXnkAf.png" alt="image-20230806210554043" style="zoom:50%;" /><p>此时，内容就都展现出来了</p><p><img src="https://s2.loli.net/2023/08/14/w6rME5FiueahzJq.png" alt="image-20230806210641955"></p><p>并且，我们也能在redis中查询得到菜品的数据，其他内容我就不测试了，有兴趣可以自己测一下</p><p>最后，我们将这次写的代码push到github上</p><h2 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h2><h3 id="4-1Spring-Cache介绍"><a href="#4-1Spring-Cache介绍" class="headerlink" title="4.1Spring Cache介绍"></a>4.1Spring Cache介绍</h3><ul><li>SpringCache是一个框架，实现了基本注解的缓存功能，只需要简单的添加一个注解，就能实现缓存功能</li><li>SpringCache提供了一层抽象，底层可以切换不同的cache实现，具体就是通过CacheManager接口来统一不同的缓存技术</li><li>针对不同的缓存技术，需要实现不同的CacheManager</li></ul><table><thead><tr><th align="center">CacheManger</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">EhCacheCacheManager</td><td align="center">使用EhCache作为缓存技术</td></tr><tr><td align="center">GuavaCacheManager</td><td align="center">使用Googke的GuavaCache作为缓存技术</td></tr><tr><td align="center">RedisCacheManager</td><td align="center">使用Rdis作为缓存技术</td></tr></tbody></table><h3 id="SpringCache使用方式"><a href="#SpringCache使用方式" class="headerlink" title="SpringCache使用方式"></a>SpringCache使用方式</h3><p>在springboot项目中，使用缓存技术只需在项目中导入相关缓存技术的依赖包，并在启动类上使用<code>@EnableCaching</code>开启缓存支持即可</p><p>如果只是使用SpringCache的基础功能，只需要导入spring-boot-starter-web这个包就可以了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用Redis作为缓存技术，需要导入<code>Spring data Redis</code>的maven坐标即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>随后配置application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span> <span class="comment">#这里换成localhost或者你自己的linux上装的redis</span></span><br><span class="line">    <span class="comment"># 这里我没有密码的原因是之前在缓存菜品数据的时候告诉我需要密码，我感觉有点麻烦就把密码去掉了</span></span><br><span class="line">    <span class="comment"># 有需要可以自己设置一下</span></span><br><span class="line">    <span class="comment"># password: 123456</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">time-to-live:</span> <span class="number">3600000</span> <span class="comment">#设置缓存存活时间为一小时，如果不设置，则一直存活</span></span><br></pre></td></tr></table></figure><h3 id="Spring-Cache常用注解"><a href="#Spring-Cache常用注解" class="headerlink" title="Spring Cache常用注解"></a>Spring Cache常用注解</h3><table><thead><tr><th align="center">注解</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@EnableCaching</td><td align="center">开启缓存注解功能</td></tr><tr><td align="center">@Cacheable</td><td align="center">在方法执行前spring先查看缓存中是否有数据。如果有数据，则直接返回缓存数据；若没有数据，调用方法并将方法返回值放到缓存中</td></tr><tr><td align="center">@CachePut</td><td align="center">将方法的返回值放到缓存中</td></tr><tr><td align="center">@CacheEvict</td><td align="center">将一条或者多条数据从缓存中删除</td></tr></tbody></table><h4 id="Cacheable"><a href="#Cacheable" class="headerlink" title="@Cacheable"></a>@Cacheable</h4><p><code>@Cacheable</code>的作用主要针对在方法执行前spring先查看缓存中是否有数据。如果有数据，则直接返回缓存数据；若没有数据，调用方法并将方法返回值放到缓存中，其主要参数说明如下</p><table><thead><tr><th align="center">注解</th><th align="center">说明</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">缓存的名称，每个缓存的名称下面可以有多个Key，必须指定至少一个value</td><td align="center">例如:@Cacheable(value&#x3D;”mycache”)或者@Cacheable(value&#x3D;(“cache7”, “cache2”]</td></tr><tr><td align="center">key</td><td align="center">缓存的key，可以为空</td><td align="center">例如:@Cacheable(value&#x3D;”testcache”,key&#x3D;”#userName”)</td></tr><tr><td align="center">condition</td><td align="center">缓存的条件，可以为空，返回true或者false，只有为true 才进行缓存</td><td align="center">例如:@Cacheable(value&#x3D;”testcache”,condition&#x3D;”#userName.length()&gt;2”)</td></tr><tr><td align="center">unless</td><td align="center">满足条件则不缓存</td><td align="center">例如：@Cacheable(value &#x3D; “userCache”,key &#x3D; “#id”,unless &#x3D; “#result &#x3D;&#x3D; null”)</td></tr></tbody></table><h4 id="CachePut"><a href="#CachePut" class="headerlink" title="@CachePut"></a>@CachePut</h4><p><code>@CachePut</code>的作用主要针对方法配置，能够根据方法的请求参数对其结果进行缓存，将方法的返回值放入缓存</p><table><thead><tr><th align="center">注解</th><th align="center">说明</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">缓存的名称，每个缓存的名称下面可以有多个Key，必须指定至少一个value</td><td align="center">例如:@CachePut(value &#x3D; {“userCache”,”userCacher2”}</td></tr><tr><td align="center">key</td><td align="center">缓存的key，可以为空</td><td align="center">例如:@CachePut(value &#x3D; {“userCache”,”userCacher2”},key &#x3D; “#user.id”)</td></tr><tr><td align="center">condition</td><td align="center">缓存的条件，可以为空，返回true或者false，只有为true 才进行缓存</td><td align="center">例如:@CachePut(value&#x3D;”testcache”,condition&#x3D;”#userName.length()&gt;2”</td></tr></tbody></table><p>这边的key可以通过里面的参数名.属性的形式来获取，使用**#参数名.属性**就可以将数据放入缓存中</p><p><strong>当整个方法执行完后，通过返回的值来给key赋上值，缓存的值是被返回的整个对象</strong></p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CachePut(value = &#123;&quot;userCache&quot;,&quot;userCacher2&quot;&#125;,key = &quot;#user.id&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">save</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    userService.save(user);</span><br><span class="line">    <span class="comment">// user是参数名，通过user.id就可以得到用户的id</span></span><br><span class="line">    <span class="comment">// 当整个方法执行完后，就会将key赋上值</span></span><br><span class="line">    <span class="comment">// 缓存的值是返回的整个对象，而key是自己设定的缓存key</span></span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CacheEvict"><a href="#CacheEvict" class="headerlink" title="@CacheEvict"></a>@CacheEvict</h4><p><code>@CacheEvict</code>的作用是清除缓存</p><table><thead><tr><th align="center">注解</th><th align="center">说明</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">缓存的名称，每个缓存的名称下面可以有多个Key，必须指定至少一个value</td><td align="center">例如:@CacheEvict(value&#x3D;”mycache”)或者@CacheEvict(value&#x3D;{“cache1”, “cache2”]</td></tr><tr><td align="center">key</td><td align="center">缓存的key，可以为空</td><td align="center">例如:@CacheEvict(value&#x3D;”testcache”,key&#x3D;”#userName”)</td></tr><tr><td align="center">condition</td><td align="center">缓存的条件，可以为空，返回true或者false，只有为true 才进行缓存</td><td align="center">例如:@CacheEvict(value&#x3D;”testcache”,condition&#x3D;”#userName.length()&gt;2”)</td></tr></tbody></table><p><code>@CacheEvict</code>可以清除某个缓存名称下的key缓存数据</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果key为#p1,#p2这种，代表有多参数，根据p后面的数字来决定的</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;userCache&quot;,key = &quot;#p0&quot;)</span>    <span class="comment">// #p0代表第一次参数id</span></span><br><span class="line"><span class="comment">//@CacheEvict(value = &quot;userCache&quot;,key = &quot;#root.args[0]&quot;)   这个与#p1,#p2方法类似，也是参数列表</span></span><br><span class="line"><span class="comment">//@CacheEvict(value = &quot;userCache&quot;,key = &quot;#id&quot;)  通过名称获取</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    userService.removeById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存套餐数据"><a href="#缓存套餐数据" class="headerlink" title="缓存套餐数据"></a>缓存套餐数据</h2><p>在做套餐之前，我们可以先用注解的方式去<strong>缓存菜品数据</strong></p><p>先在main下开启缓存功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TakeOutApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(TakeOutApplication.class, args);</span><br><span class="line">        log.info(<span class="string">&quot;项目启动成功...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后来到DishController的list方法下进行修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@Cacheable(value=&quot;DishCache&quot;,key = &quot;#dish.getCategoryId() + &#x27;_&#x27; + #dish.getStatus()&quot;,unless = &quot;#result == null&quot;)</span></span><br><span class="line"><span class="comment">// 先将返回值类型改为List&lt;DishDto&gt;</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;List&lt;DishDto&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span>&#123;</span><br><span class="line">    <span class="comment">// 将dishDtoList作为内容缓存到Redis中</span></span><br><span class="line">    List&lt;DishDto&gt; dishDtoList = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果不存在，就需要进行查询，并使用redis加以缓存</span></span><br><span class="line">    <span class="comment">// 以下代码都是进行数据查询</span></span><br><span class="line"></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 得到该菜品项对应的菜品</span></span><br><span class="line">    queryWrapper.eq(dish.getCategoryId() != <span class="literal">null</span>,Dish::getCategoryId,dish.getCategoryId());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加条件，查询状态为1（起售状态）的菜品</span></span><br><span class="line">    queryWrapper.eq(Dish::getStatus,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加排序条件(先按照sort来排序，如果sort相同，再按照更新时间来排序)</span></span><br><span class="line">    queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    dishDtoList = list.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">        BeanUtils.copyProperties(item,dishDto);</span><br><span class="line">        <span class="comment">// 分类id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">        <span class="comment">// 根据Id查询分类对象</span></span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (category != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 如果分类对象查询到了，说明该菜品有分类</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            <span class="comment">// 就让菜品设置一下这个分类对象名字</span></span><br><span class="line">            dishDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到菜品的id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">itemId</span> <span class="operator">=</span> item.getId();</span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 查找与当前菜品id相同的口味信息</span></span><br><span class="line">        wrapper.eq(DishFlavor::getDishId,itemId);</span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishFlavorService.list(wrapper);</span><br><span class="line">        <span class="comment">// 设置菜品口味</span></span><br><span class="line">        dishDto.setFlavors(flavors);</span><br><span class="line">        <span class="keyword">return</span> dishDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.success(dishDtoList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在做缓存的时候报了一个错误DefaultSerializer requires a Serializable payload but received an object of type</p><p>解决方法：</p><p>为Result对象实现一个Serializable接口即可，因为Spring 会将对象先序列化再存入 Redis，所以需要实现这个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;  <span class="comment">// 编码：1成功。0和其他数字失败</span></span><br><span class="line">    <span class="keyword">private</span> String msg;  <span class="comment">// 错误信息</span></span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">// 数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();  <span class="comment">// 动态数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        Result&lt;T&gt; r = <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;();</span><br><span class="line">        r.code = <span class="number">1</span>;  <span class="comment">//成功状态码</span></span><br><span class="line">        r.data = data;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">error</span><span class="params">(String errMsg)</span> &#123;</span><br><span class="line">        Result&lt;T&gt; r = <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;();</span><br><span class="line">        r.msg = errMsg; <span class="comment">//设置错误信息</span></span><br><span class="line">        r.code = <span class="number">0</span>;  <span class="comment">//默认失败状态码，后期我们可以根据自己的需求来设置其他状态码</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Result&lt;T&gt; <span class="title function_">add</span><span class="params">(String msg, String value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map.put(msg, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记得删除缓存，在方法中删除缓存使用<code>@CacheEvict</code></p><p>save：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;DishCache&quot;,key = &quot;#dishDto.getCategoryId() + &#x27;_1&#x27;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span> &#123;</span><br><span class="line">    dishService.saveWithFlavor(dishDto);</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dishDto.getCategoryId() + <span class="string">&quot;_1&quot;</span>;</span><br><span class="line">    <span class="comment">// 删除之前的key，也就是清除缓存，之前的内容就不存在了，会去数据库中重新查找</span></span><br><span class="line">    redisTemplate.delete(key);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;新增菜品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>update：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;DishCache&quot;,key = &quot;#dishDto.getCategoryId() + &#x27;_1&#x27;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span> &#123;</span><br><span class="line">    dishService.updateWithFlavor(dishDto);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;更新菜品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于为什么不给delete清缓存，在3.3功能测试有讲</p><p>这里我们的菜品就全部重新用注解重写了</p><p>再来写套餐的，写法是类似的，这里就不做说明了，直接给上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@Cacheable(value = &quot;SetmealCache&quot;,key = &quot;#setmeal.categoryId + &#x27;_&#x27; + #setmeal.status&quot;,unless = &quot;#result == null &quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;List&lt;SetmealDto&gt;&gt; <span class="title function_">list</span><span class="params">(Setmeal setmeal)</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 得到该套餐项对应的菜品</span></span><br><span class="line">    queryWrapper.eq(setmeal.getCategoryId() != <span class="literal">null</span>,Setmeal::getCategoryId,setmeal.getCategoryId());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加条件，查询状态为1（起售状态）的菜品</span></span><br><span class="line">    queryWrapper.eq(Setmeal::getStatus,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加排序条件(按照更新时间来排序)</span></span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Setmeal&gt; list = setMealService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    List&lt;SetmealDto&gt; setmealDtoList = list.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line">        BeanUtils.copyProperties(item,setmealDto);</span><br><span class="line">        <span class="comment">// 分类id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">        <span class="comment">// 根据Id查询分类对象</span></span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (category != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 如果分类对象查询到了，说明该套餐有分类</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            <span class="comment">// 就让套餐设置一下这个分类对象名字</span></span><br><span class="line">            setmealDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到套餐的id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">itemId</span> <span class="operator">=</span> item.getId();</span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;SetmealDish&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 查找与当前套餐id相同的口味信息</span></span><br><span class="line">        wrapper.eq(SetmealDish::getDishId,itemId);</span><br><span class="line">        List&lt;SetmealDish&gt; flavors = setmealDishService.list(wrapper);</span><br><span class="line">        <span class="comment">// 设置菜品口味</span></span><br><span class="line">        setmealDto.setSetmealDishes(flavors);</span><br><span class="line">        <span class="keyword">return</span> setmealDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> Result.success(setmealDtoList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;SetmealCache&quot;,,key = &quot;#setmealDto.categoryId + &#x27;_&#x27; + &#x27;_1&#x27;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;套餐信息：&#123;&#125;&quot;</span>, setmealDto);</span><br><span class="line">    setMealService.saveWithDish(setmealDto);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;套餐添加成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>update方法也没写，哎，后期学完补上</p><p>将代码push到仓库里</p><h1 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h1><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><ul><li>目前我们所有的读和写的压力都是由一台数据库来承担，</li><li>如果数据库服务器磁盘损坏，则数据会丢失（没有备份）</li><li>解决这个问题，就可以用MySQL的主从复制，写操作交给主库，读操作交给从库</li><li>同时将主库写入的内容，同步到从库中</li></ul><img src="https://s2.loli.net/2023/08/14/B4FOw5UECuAaj3v.png" alt="image-20230807164256580" style="zoom:50%;" /><h2 id="MySql主从复制"><a href="#MySql主从复制" class="headerlink" title="MySql主从复制"></a>MySql主从复制</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li>MySQL主从复制是一个异步的复制过程，底层是基于Mysql数据库自带的二进制日志功能。就是一台或多台NysQL数据库（slave，即从库）从另一台MySQL数据库(master，即主库）进行日志的复制然后再解析日志并应用到自身，最终实现从库的数据和主库的数据保持一致。<strong>MySQL主从复制是MySQL数据库自带功能，无需借助第三方工具</strong>。<ul><li>讲一下自己的理解，由从库(slave)向主库(master)进行日志的复制，再解析日志，解析完之后，就知道在主库里执行的是一个什么样的sql语句，然后在从库(slave)里面再执行一遍刚才得到的sql语句</li></ul></li><li>MySQL复制过程分成三步:<ol><li><code>maste</code>r将改变记录到二进制日志(<code>binary log</code>)</li><li><code>slave</code>将<code>master</code>的<code>binary log</code>拷贝到它的中继日志(<code>relay log</code>)</li><li><code>slave</code>重做中继日志中的事件，将改变应用到自己的数据库中</li></ol></li></ul><p><img src="https://s2.loli.net/2023/08/14/gQSNBOksC8p31Hm.png" alt="image-20230807170535714"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>前置条件<br>准备好两台服务器，分别安装MySQL并启动服务成功，这里准备两台虚拟机，建议使用克隆</p><p>我们先得到主库和从库的IP地址</p><p>进入系统，打开命令行，输入<code>ifconfig</code>查看IP地址</p><ul><li>主库IP地址：192.168.10.135</li><li>从库IP地址：192.168.10.134</li></ul><p>然后去mysql中连接这两个的数据库</p><p>如果在连接数据库时出现这样一个问题：</p><img src="https://s2.loli.net/2023/08/14/bCgD1wxzHYVXid9.png" alt="image-20230807175956288" style="zoom:50%;" /><p><code>vim /etc/my.cnf</code></p><p>在[mysqld]后添加[<code>skip-grant-tables</code>（登录时跳过权限检查）</p><p><img src="https://s2.loli.net/2023/08/14/AIEKXxecfont5zR.png" alt="image-20230807180136928"></p><p>重启MySQL服务：<code>sudo systemctl restart mysqld</code></p><p>然后输入mysql就可以进去了，在里面就可以改密码干啥了，改了密码再重新连接一下就行，或者不搞密码直接搞连接也是可以的</p><img src="https://s2.loli.net/2023/08/14/d2mrjQvDOzRF3HM.png" alt="image-20230807180505474" style="zoom:50%;" /><p>到数据库中连接，发现这里也可以了，我就没有设置密码，感觉设置密码比较麻烦，后面再来考虑密码的问题</p><p><img src="https://s2.loli.net/2023/08/14/WlLZ3OJRmUTewvN.png" alt="image-20230807180542967"></p><p>数据库搞好之后，我们用Xshell来连接一下自己的服务器，一个主库，一个从库</p><img src="https://s2.loli.net/2023/08/14/HE2wFQAKXY8Nqd3.png" alt="image-20230807181110947" style="zoom:50%;" /><p>OK，这里连接完毕，确认一下mysql服务是否开启</p><img src="https://s2.loli.net/2023/08/14/V8JuQqt6SjRacTy.png" alt="image-20230807181309551" style="zoom:50%;" /><h4 id="配置主库"><a href="#配置主库" class="headerlink" title="配置主库"></a>配置主库</h4><p>修改Mysql数据库的配置文件&#x2F;etc&#x2F;my.cnf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/14/artLKTpVeRMivmz.png" alt="image-20230807181738719"></p><p>在mysqld下加入如下内容，skip-grant-tables是我们之前加上来用于跳过权限检查的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log-bin=mysql-bin  <span class="comment">#[必须]启用二进制日志</span></span><br><span class="line">server-id=100<span class="comment">#[必须]服务器唯一ID，值不是固定的，你只要保证唯一就行</span></span><br></pre></td></tr></table></figure><p>因为刚刚改了配置文件，所以我们一下重启Mysql服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><p>这时候我们再登陆Mysql数据库，执行下面的SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> replication slave <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;eastwind&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;1234&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在执行SQL的时候报了个异常：<code>The MySQL server is running with the --[skip-grant-tables] option so it cannot execute this statement</code></p><p><strong>解决方法：</strong></p><p>先刷新一下权限表，把在所有数据库的所有表的所有权限赋值给位于所有IP地址的root用户。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/14/u1icHWXnOPTSy6z.png" alt="image-20230807183641047"></p><p>再执行就没问题了</p><p>注：上面SQL的作用是创建一个用户eastwind，密码为1234，并且给eastwind用户授予<strong>REPLICATION SLAVE</strong>权限。常用于建立复制时所需要用到的用户权限，也就是slave必须被master授权具有该权限的用户，才能通过该用户复制。</p><p>接着登录Mysql数据库，执行下面的SQL，记录下结果File和Position的值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> master status</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> master status;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line"><span class="operator">|</span> File             <span class="operator">|</span> Position <span class="operator">|</span> Binlog_Do_DB <span class="operator">|</span> Binlog_Ignore_DB <span class="operator">|</span> Executed_Gtid_Set <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line"><span class="operator">|</span> mysql<span class="operator">-</span>bin<span class="number">.000001</span> <span class="operator">|</span>      <span class="number">612</span> <span class="operator">|</span>              <span class="operator">|</span>                  <span class="operator">|</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>注：上面的SQL的作用是查看Master的状态，执行完该SQL后不要再执行任何操作，因为我们在执行其他任何操作时，里面的日志会变化，所以不要执行其他任何操作</p><h4 id="配置从库"><a href="#配置从库" class="headerlink" title="配置从库"></a>配置从库</h4><p><strong>修改配置文件</strong></p><p>跟配置从表差不多，也是在文件里面加入一点内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server-id=101 <span class="comment">#[必须]服务器唯一ID</span></span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2023/08/14/i3gBFUMCIP78yX6.png" alt="image-20230807210445457" style="zoom:50%;" /><p>接着重启mysql服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><p>登陆Mysql数据库，执行下面的SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">change master <span class="keyword">to</span> master_host<span class="operator">=</span><span class="string">&#x27;192.168.10.135&#x27;</span>,master_user<span class="operator">=</span><span class="string">&#x27;eastwind&#x27;</span>,master_password<span class="operator">=</span><span class="string">&#x27;1234&#x27;</span>,master_log_file<span class="operator">=</span><span class="string">&#x27;mysql-bin.000001&#x27;</span>,master_log_pos<span class="operator">=</span><span class="number">612</span>;</span><br></pre></td></tr></table></figure><p>简单解释一下这里的配置，master_host对应主库的ip地址，master_user对应主库的用户名，master_password对应主库的密码，master_log_file对应之前主库查出来的File，master_log_pos对应对应之前主库查出来的Position，根据自己的情况修改</p><p>然后执行这条SQL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start slave;</span><br></pre></td></tr></table></figure><p>最后执行一条SQL查看一下slave的状态</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> slave status\G;</span><br></pre></td></tr></table></figure><p>本来是<code>show slave status</code>但是显示的不太美观，所以加上\G格式化输出</p><img src="https://s2.loli.net/2023/08/14/gjol45GL23BrM6T.png" alt="image-20230807213311786" style="zoom:50%;" /><p>这两个是必须是yes的，并且<code>Slave IO State</code> 什么也没有，我们发现这里其中一个是no，在翻看了文档后发现是克隆机的问题，我们需要修改克隆机的uuid，现在我们修改一下uuid</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> uuid();</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> uuid()                               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> a499587b<span class="number">-3525</span><span class="number">-11</span>ee<span class="operator">-</span>b696<span class="number">-000</span>c29daa809 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+</span></span><br></pre></td></tr></table></figure><p>查询克隆机的uuid，并记住它</p><p>接着查看配置文件目录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> &quot;datadir&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> datadir       <span class="operator">|</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-----------------+</span></span><br></pre></td></tr></table></figure><p>编辑配置文件目录，修改uuid为刚刚我们生成的uuid</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /var/lib/mysql/auto.cnf</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><p>再次进入mysql查看slave的状态</p><img src="https://s2.loli.net/2023/08/14/Xew1gMD5LJx9c8t.png" alt="image-20230807213409815" style="zoom:50%;" /><p>此时发现这两个都是Yes了，并且<code>Slave IO State</code>也有了对应的内容，说明我们的配置完成了</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>在主库中新建数据库，刷新一下从库</p><img src="https://s2.loli.net/2023/08/14/I5P9lYJn7f8WkeS.png" alt="image-20230808072609590" style="zoom:50%;" /><p>继续在主库中进行测试，新建一张表，对表进行一下增删改操作，看看从库中是否有变化，如果有变化说明配置的没有问题，这里其他的测试我就不展示了，挺简单的</p><h2 id="读写分离案例"><a href="#读写分离案例" class="headerlink" title="读写分离案例"></a>读写分离案例</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>面对日益增加的系统访问量，数据库的吞吐量面临着巨大的瓶颈。对于同一时刻有<code>大量并发读操作</code>和<code>较少的写操作</code>类型的应用系统来说，将数据库拆分为<code>主库</code>和<code>从库</code>，<code>主库</code>主要负责处理事务性的<code>增删改操作</code>，从库<code>主要负责查询操作</code>，这样就能有效避免由数据更新导致的行锁，使得整个系统的查询性能得到极大的改善</p><img src="https://s2.loli.net/2023/08/14/doWTAXflYCszhce.png" alt="image-20230808074358625" style="zoom: 50%;" /><h3 id="Sharding-JDBC介绍"><a href="#Sharding-JDBC介绍" class="headerlink" title="Sharding-JDBC介绍"></a>Sharding-JDBC介绍</h3><ul><li><p>Sharding-JDBC定位为轻量级的JAVA框架，在JAVA的JDBC层提供额外的服务，它使得客户端直连数据库，以jar包形式提供服务，无需额外部署和依赖，可理解为增强版的JDBC驱动，完全兼容JDBC和各种ORM框架</p></li><li><p>使用Sharding-JDBC可以在程序中轻松的实现数据库读写分离</p><ul><li>适用于任何基于JDBC的ORM框架</li><li>支持任何第三方的数据库连接池</li><li>支持任意实现JDBC规范的数据库</li></ul></li><li><p>使用Sharding-JDBC框架的步骤   </p><ol><li><p>导入对应的maven坐标</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0-RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在配置文件中配置读写分离规则，并配置允许bean定义覆盖配置项</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">names:</span></span><br><span class="line">        <span class="comment"># 这里的master和slave并不是写死的，但是需要跟下面的master和slave对应</span></span><br><span class="line">        <span class="comment"># 定义了两个数据源，名叫master和slave</span></span><br><span class="line">        <span class="string">master,slave</span></span><br><span class="line">      <span class="comment"># 主数据源</span></span><br><span class="line">      <span class="attr">master:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="comment"># 主库ip及连接的数据库名</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.10.135:3306/reggie?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="comment"># 我的数据库没有密码，所以这里注释了，有需要可以自己调整</span></span><br><span class="line">        <span class="comment"># password: root</span></span><br><span class="line">      <span class="comment"># 从数据源</span></span><br><span class="line">      <span class="attr">slave:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="comment"># 从库ip及连接的数据库名</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.10.134:3306/reggie?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="comment"># password: root</span></span><br><span class="line">    <span class="attr">masterslave:</span></span><br><span class="line">      <span class="comment"># 读写分离配置</span></span><br><span class="line">      <span class="comment"># 负载均衡：配置的是从库的负载均衡策略(轮询策略)</span></span><br><span class="line">      <span class="comment"># 轮询：从库可以有多个，假设有3个从库，第一次走sql查询就是走1号库，第二次走2号，这样以此类   推，直到走完之后再次重复一遍，说白了就是按顺序来</span></span><br><span class="line">      <span class="attr">load-balance-algorithm-type:</span> <span class="string">round_robin</span></span><br><span class="line">      <span class="comment"># 最终的数据源名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">dataSource</span></span><br><span class="line">      <span class="comment"># 指定主库数据源名称</span></span><br><span class="line">      <span class="attr">master-data-source-name:</span> <span class="string">master</span></span><br><span class="line">      <span class="comment"># 指定从库数据源名称列表，多个从库用逗号分隔</span></span><br><span class="line">      <span class="attr">slave-data-source-names:</span> <span class="string">slave</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span> <span class="comment">#开启SQL显示，默认false，就是在控制台可以输出sql</span></span><br><span class="line">    <span class="comment"># 配置允许bean定义覆盖配置项</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><p>​</p><h2 id="项目实现读写分离"><a href="#项目实现读写分离" class="headerlink" title="项目实现读写分离"></a>项目实现读写分离</h2><p>之前已经搭建好了主从复制的数据库，现在到主库去搭建项目的数据库</p><img src="https://s2.loli.net/2023/08/14/gN9tfXqWkcLYAjR.png" alt="image-20230808085658273" style="zoom:50%;" /><p>相应的，从库里面也会创建，检查一下就行</p><p>然后运行一下之前的sql文件代码</p><img src="https://s2.loli.net/2023/08/14/YFvRWgt5LpKaf8D.png" alt="image-20230808085953402" style="zoom:50%;" /><p>记得把这个下面这个读写分离的规则修改成改变之后的</p><p>导入对应的maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0-RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在配置文件中配置读写分离规则，并配置允许bean定义覆盖配置项</p><p><strong>配置项可能会爆红，但是不影响影响项目启动，是IDEA的问题</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">names:</span></span><br><span class="line">        <span class="comment"># 这里的master和slave并不是写死的，但是需要跟下面的master和slave对应</span></span><br><span class="line">        <span class="comment"># 定义了两个数据源，名叫master和slave</span></span><br><span class="line">        <span class="string">master,slave</span></span><br><span class="line">      <span class="comment"># 主数据源</span></span><br><span class="line">      <span class="attr">master:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="comment"># 主库ip及连接的数据库名</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.10.135:3306/reggie?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="comment"># 我的数据库没有密码，所以这里注释了，有需要可以自己调整</span></span><br><span class="line">        <span class="comment"># password: root</span></span><br><span class="line">      <span class="comment"># 从数据源</span></span><br><span class="line">      <span class="attr">slave:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="comment"># 从库ip及连接的数据库名</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.10.134:3306/reggie?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="comment"># password: root</span></span><br><span class="line">    <span class="attr">masterslave:</span></span><br><span class="line">      <span class="comment"># 读写分离配置</span></span><br><span class="line">      <span class="comment"># 负载均衡：配置的是从库的负载均衡策略(轮询策略)</span></span><br><span class="line">      <span class="comment"># 轮询：从库可以有多个，假设有3个从库，第一次走sql查询就是走1号库，第二次走2号，这样以此类   推，直到走完之后再次重复一遍，说白了就是按顺序来</span></span><br><span class="line">      <span class="attr">load-balance-algorithm-type:</span> <span class="string">round_robin</span></span><br><span class="line">      <span class="comment"># 最终的数据源名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">dataSource</span></span><br><span class="line">      <span class="comment"># 指定主库数据源名称</span></span><br><span class="line">      <span class="attr">master-data-source-name:</span> <span class="string">master</span></span><br><span class="line">      <span class="comment"># 指定从库数据源名称列表，多个从库用逗号分隔</span></span><br><span class="line">      <span class="attr">slave-data-source-names:</span> <span class="string">slave</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span> <span class="comment">#开启SQL显示，默认false，就是在控制台可以输出sql</span></span><br><span class="line">    <span class="comment"># 配置允许bean定义覆盖配置项</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>测试一下，主要检查的查询语句是不是由从库发出，以及增删改操作是不是由主库发出即可</p><p>最后我们将代码上传到github，</p><p>然后合并到master分支</p><p><strong>如何合并？</strong></p><p>先回到master分支，点一下master然后checkout就可以切回去了</p><img src="https://s2.loli.net/2023/08/14/Me9nbTHWcKy3XdA.png" alt="image-20230808093718695" style="zoom:50%;" /><p>然后选中v1.0，选中Merge，合并到master</p><img src="https://s2.loli.net/2023/08/14/iXNYRvfUG9jOd1s.png" alt="image-20230808093838512" style="zoom:50%;" /><p>查看master分支下的yml配置文件，发现已经更新了</p><img src="https://s2.loli.net/2023/08/14/esxmdz4VF2g75rt.png" alt="image-20230808094010705" style="zoom:50%;" /><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>Nginx是一款轻量级的<code>Web</code>&#x2F;<code>反向代理</code>服务器以及电子邮件(IMAP&#x2F;POP3)代理服务器，其特点是占有内存少，并发能力强。</li><li>事实上Nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用Nginx的网站有：百度、京东、新浪、网易、腾讯、淘宝等。</li><li>Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Pam6nep）开发的，第一个公开版本0.1.0发布于2004年10月4日。</li><li>官网：<code>https://nginx.org/</code></li></ul><h2 id="Nginx的下载和安装"><a href="#Nginx的下载和安装" class="headerlink" title="Nginx的下载和安装"></a>Nginx的下载和安装</h2><p>Nginx是C语言开发的，所以需要先安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure><p>安装时遇到一个问题：Another app is currently holding the yum lock; waiting for it to exit…</p><p>说是<strong>另一个应用程序目前持有yum锁；等待它退出</strong></p><p>解决方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 强行解除锁定</span></span><br><span class="line"><span class="built_in">rm</span> -rf /var/run/yum.pid </span><br><span class="line"><span class="comment"># 再次yum安装</span></span><br></pre></td></tr></table></figure><p>下载Nginx安装包</p><p>这里我去了nginx官网查看了现在的稳定版本，现在是1.24.0所以我也选择1.24.0</p><img src="https://s2.loli.net/2023/08/14/lW8ANYxayt74KdR.png" alt="image-20230808100050448" style="zoom:50%;" /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nginx.org/download/nginx-1.24.0.tar.gz</span><br></pre></td></tr></table></figure><p>可以使用命令行方式，你也可以通过在Windows下载好之后传上来，我是直接上传了</p><p>解压，放在<code>/usr/local</code>目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.24.0.tar.gz -C /usr/local/</span><br></pre></td></tr></table></figure><p>进入到我们解压完毕后的文件夹内</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx-nginx-1.24.0/</span><br></pre></td></tr></table></figure><p>创建安装路径文件夹 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/nginx</span><br></pre></td></tr></table></figure><p>安装前检查工作</p><p>使用nginx-nginx-1.24.0目录下的configure来指定安装目录（不是真正的安装，只是安装前的检查工作）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx</span><br></pre></td></tr></table></figure><p>编译并安装 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h2 id="Nginx目录结构"><a href="#Nginx目录结构" class="headerlink" title="Nginx目录结构"></a>Nginx目录结构</h2><ul><li>安装完Nginx后，我们先来熟悉一下Nginx的目录结构</li><li>重点目录&#x2F;文件:<ul><li>conf<ul><li>nginx配置文件</li><li>操作较多的是里面的nginx.conf</li></ul></li><li>html<ul><li>存放静态文件(html、css、Js等)</li></ul></li><li>logs  <ul><li>日志目录，存放日志文件</li></ul></li><li>sbin&#x2F;nginx  <ul><li>二进制文件，用于启动、停止Nginx服务</li></ul></li></ul></li></ul><p>可以使用一个命令来展示当前目录下的内容</p><p>先安装这个tree</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install tree</span><br></pre></td></tr></table></figure><p>再输入<code>tree</code></p><p>以树形结构来展示当前目录下的所有内容</p><img src="https://s2.loli.net/2023/08/14/ofRHVWZwyiEz3mN.png" alt="image-20230808103138800" style="zoom:50%;" /><h2 id="Nginx配置文件结构"><a href="#Nginx配置文件结构" class="headerlink" title="Nginx配置文件结构"></a>Nginx配置文件结构</h2><ul><li>Nginx配置文件(conf&#x2F;nginx.conf)整体分为三部分<ul><li><strong>全局块</strong>  和Nginx运行相关的全局配置</li><li><strong>events块</strong>  和网络连接相关的配置</li><li><strong>http块</strong>    代理、缓存、日志记录、虚拟主机配置<ul><li>http全局块</li><li><strong>Server块</strong><ul><li>Server全局块</li><li>location块</li></ul></li></ul></li></ul></li></ul><p>注意：http块中可以配置多个Server块，每个Server块中可以配置多个location块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;                             &lt;-- 全局块</span><br><span class="line">  </span><br><span class="line">events &#123;                                          &lt;-- events块</span><br><span class="line">    worker_connections  1024;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">http &#123;                                            &lt;-- http块</span><br><span class="line">    include       mime.types;                     &lt;-- http全局块</span><br><span class="line">    default_type  application/octet-stream;  </span><br><span class="line">    sendfile        on;  </span><br><span class="line">    keepalive_timeout  65;  </span><br><span class="line">  </span><br><span class="line">    server &#123;                                      &lt;-- Server块</span><br><span class="line">        listen       80;                          &lt;-- Server全局块</span><br><span class="line">        server_name  localhost;  </span><br><span class="line">        location / &#123;                              &lt;-- location块</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nginx命令"><a href="#Nginx命令" class="headerlink" title="Nginx命令"></a>Nginx命令</h2><h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><ul><li>进入sbin目录，输入<code>./nginx -v</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost sbin]<span class="comment"># ./nginx -v</span></span><br><span class="line">nginx version: nginx/1.24.0</span><br></pre></td></tr></table></figure><h3 id="检查配置文件正确性"><a href="#检查配置文件正确性" class="headerlink" title="检查配置文件正确性"></a>检查配置文件正确性</h3><p>进入sbin目录，输入<code>./nginx -t</code>，如果有错误会报错，而且也会记录日志</p><p>一般在启动Nginx服务之前检查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost sbin]<span class="comment"># ./nginx -t</span></span><br><span class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure><h3 id="启动和停止"><a href="#启动和停止" class="headerlink" title="启动和停止"></a>启动和停止</h3><p>进入sbin目录，输入<code>./nginx</code>，启动完成后查看进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost sbin]<span class="comment"># ./nginx </span></span><br><span class="line">[root@localhost sbin]<span class="comment"># ps -ef | grep nginx</span></span><br><span class="line">root      13485      1  0 19:36 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">nobody    13486  13485  0 19:36 ?        00:00:00 nginx: worker process</span><br><span class="line">root      13496   9863  0 19:36 pts/1    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><p>如果想停止Nginx服务，输入<code>./nginx -s stop</code>，停止服务后再次查看进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost sbin]<span class="comment"># ./nginx -s stop</span></span><br><span class="line">[root@localhost sbin]<span class="comment"># ps -ef | grep nginx</span></span><br><span class="line">root      13499   9863  0 19:37 pts/1    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><h3 id="重新加载配置文件"><a href="#重新加载配置文件" class="headerlink" title="重新加载配置文件"></a>重新加载配置文件</h3><p>重新加载配置文件</p><ul><li>当修改Nginx配置文件后，需要重新加载才能生效，可以使用下面命令重新加载配置文件：<code>./nginx -s reload</code></li></ul><p>上面的所有命令，都需要我们在sbin目录下才能运行，比较麻烦，所以我们可以将Nginx的二进制文件配置到环境变量中，这样无论我们在哪个目录下，都能使用上面的命令</p><p>使用<code>vim /etc/profile</code>命令打开配置文件，并配置环境变量，保存并退出</p><p>这个需要配置jdk的环境，记得改成自己的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/usr/local/jdk1.8.0_212</span><br><span class="line">PATH=/usr/local/nginx/sbin:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>之后重新加载配置文件，使用<code>source /etc/profile</code>命令，然后我们在任意位置输入<code>nginx</code>即可启动服务，<code>nginx -s stop</code>即可停止服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jdk1.8.0_212]<span class="comment"># vim /etc/profile</span></span><br><span class="line">[root@localhost jdk1.8.0_212]<span class="comment"># source /etc/profile</span></span><br><span class="line">[root@localhost jdk1.8.0_212]<span class="comment"># nginx</span></span><br><span class="line">[root@localhost jdk1.8.0_212]<span class="comment"># ps -ef | grep nginx</span></span><br><span class="line">root      13942      1  0 19:51 ?        00:00:00 nginx: master process nginx</span><br><span class="line">nobody    13943  13942  0 19:51 ?        00:00:00 nginx: worker process</span><br><span class="line">root      13945   9863  0 19:51 pts/1    00:00:00 grep --color=auto nginx</span><br><span class="line">[root@localhost jdk1.8.0_212]<span class="comment"># nginx -s stop</span></span><br><span class="line">[root@localhost jdk1.8.0_212]<span class="comment"># ps -ef | grep nginx</span></span><br><span class="line">root      13956   9863  0 19:52 pts/1    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><p>查看自己IP，启动服务后，浏览器输入ip地址就可以访问Nginx的默认页面</p><ul><li><code>ifconfig</code></li></ul><p>如果发现自己连不上Nginx的话，可能是防火墙的问题，这里我也遇到了这个问题，所以我们需要开放80端口，并重启防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart firewalld.service</span><br></pre></td></tr></table></figure><p>重启完成后，在浏览器中输入ip即可访问</p><img src="https://s2.loli.net/2023/08/14/SnKIjP36WoecsRH.png" alt="image-20230808111005173" style="zoom:50%;" /><h2 id="Nginux具体应用"><a href="#Nginux具体应用" class="headerlink" title="Nginux具体应用"></a>Nginux具体应用</h2><h3 id="部署静态资源"><a href="#部署静态资源" class="headerlink" title="部署静态资源"></a>部署静态资源</h3><ul><li>Nginx可以作为静态web服务器来部署静态资源。静态资源指在服务端真实存在并且能够直接展示的一些文件，比如常见的html页面、css文件、js文件、图片、视频等资源。</li><li>相对于Tomcat，Nginx处理静态资源的能力更加高效，所以在生产环境下，一般都会将静态资源部署到Nginx中。</li><li>将静态资源部署到Nginx非常简单，只需要将文件复制到Nginx安装目录下的html目录中即可。</li></ul><img src="https://s2.loli.net/2023/08/14/CYDpmozBg2Kq3ib.png" alt="image-20230808134539268" style="zoom:50%;" /><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p><strong>正向代理</strong></p><ul><li>正向代理是一个位于客户端和原始服务器（origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标（原始服务器），然后代理向原始服务器转交请求并将获得的内容返回给客户端。</li><li>正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。</li><li>正向代理一般是在客户端设置代理服务器，通过代理服务器转发请求，最终访问到目标服务器。</li></ul><img src="https://s2.loli.net/2023/08/14/zC65PldVj1ry7Lk.png" alt="image-20230808134722027" style="zoom:50%;" /><p>总结一下正向代理，其实很好理解，客户端直接访问原始服务器是访问不到的，得依靠代理服务器来访问，所以客户端需要先向代理服务器发送请求来指定原始服务器，然后代理服务器向原始服务器转交请求，原始服务器将内容发给代理服务器，再依靠代理服务器来返回给客户端</p><p><strong>反向代理</strong></p><ul><li>反向代理服务器位于用户与目标服务器之间，但是对于用户而言，反向代理服务器就相当于目标服务器，即用户直接访问反向代理服务器就可以获得目标服务器的资源，反向代理服务器负责将请求转发给目标服务器。</li><li>用户不需要知道目标服务器的地址，也无须在用户端作任何设定。</li></ul><img src="https://s2.loli.net/2023/08/14/3riCkwhIoZmDYqz.png" alt="image-20230808134745099" style="zoom:67%;" /><p>简单来说，正向代理是:(客户端+代理服务器)访问(web服务器)，，  反向代理是：(客户端)访问(代理服务器+web服务器)</p><p>反向代理直接访问的是代理服务器，然后让代理服务器去web服务器里转发给你</p><h4 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">listen</span>       <span class="string">82;</span></span><br><span class="line">    <span class="attr">server_name</span>  <span class="string">localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line"><span class="comment">    # 监听82端口，访问82端口则代理转发到下面的地址</span></span><br><span class="line">        <span class="attr">proxy_pass</span> <span class="string">http://IP地址:端口号;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><ul><li>早期的网站流量和业务功能都比较简单，单台服务器就可以满足基本需求，但是随着互联网的发展，业务流量越来越大并且业务逻辑也越来越复杂，单台服务器的性能及单点故障问题就凸显出来了，因此需要多台服务器组成应用集群，进行性能的水平扩展以及避免单点故障出现。</li><li>应用集群：将同一应用部署到多台机器上，组成应用集群，接收负载均衡器分发的请求，进行业务处理并返回响应数据。</li><li>负载均衡器：将用户请求根据对应的负载均衡算法分发到应用集群中的一台服务器进行处理。</li></ul><img src="https://s2.loli.net/2023/08/14/SWdngvQqLhOjAEw.png" alt="image-20230808140916732" style="zoom:67%;" /><p>配置负载均衡<br>默认是轮询算法，第一次访问是<code>IP地址1</code>，第二次访问是<code>IP地址2</code><br>也可以改用权重方式，权重越大，几率越大，现在的访问三分之二是第一台服务器接收，三分之一是第二台服务器接收<br><code>server IP地址1 weight=10</code><br><code>server IP地址2 weight=5</code></p><p>proxy_pass要与targetServer一致</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">upstream</span> <span class="string">targetServer&#123;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">IP地址1:端口号;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">IP地址2:端口号;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">listen</span>       <span class="string">82;</span></span><br><span class="line">    <span class="attr">server_name</span>  <span class="string">localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line">        <span class="attr">proxy_pass</span> <span class="string">http://targetServer;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>负载均衡策略</li></ul><table><thead><tr><th align="center">名称</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">轮询</td><td align="center">默认方式</td></tr><tr><td align="center">weight</td><td align="center">权重方式</td></tr><tr><td align="center">ip_hash</td><td align="center">依据ip分配方式</td></tr><tr><td align="center">least_conn</td><td align="center">依据最少连接方式</td></tr><tr><td align="center">url_hash</td><td align="center">依据url分配方式</td></tr><tr><td align="center">fair</td><td align="center">依据响应时间方式</td></tr></tbody></table><h2 id="Nginx的特点"><a href="#Nginx的特点" class="headerlink" title="Nginx的特点"></a>Nginx的特点</h2><ol><li>跨平台：Nginx可以在大多数操作系统中运行，而且也有Windows的移植版本</li><li>配置异常简单：非常容易上手。配置风格跟程序开发一样，神一般的配置</li><li>非阻塞、高并发：数据复制时，磁盘I&#x2F;O的第一阶段是非阻塞的。官方测试能够支撑5万并发连接，在实际生产环境中跑到2-3万并发连接数（这得益于Nginx使用了最新的epoll模型）</li><li>事件驱动：通信机制采用epoll模式，支持更大的并发连接数</li><li>内存消耗小：处理大并发的请求内存消耗非常小。在3万并发连接下，开启的10个Nginx进程才消耗150M内存（15M*10&#x3D;150M）</li><li>成本低廉：Nginx作为开源软件，可以免费试用。而购买F5 BIG-IP、NetScaler等硬件负载均衡交换机则需要十多万至几十万人民币</li><li>内置健康检查功能：如果Nginx Proxy后端的某台Web服务器宕机了，不会影响前端访问。</li><li>节省带宽：支持GZIP压缩，可以添加浏览器本地缓存的Header头。</li><li>稳定性高：用于反向代理，宕机的概率微乎其微。</li></ol><h1 id="前后端分离开发"><a href="#前后端分离开发" class="headerlink" title="前后端分离开发"></a>前后端分离开发</h1><h2 id="问题说明-1"><a href="#问题说明-1" class="headerlink" title="问题说明"></a>问题说明</h2><ul><li>开发人员同时负责前端和后端代码开发，分工不明确，开发效率低</li><li>前后端代码混合在一个工程中，不便于管理</li><li>对开发人员要求高，人员招聘困难</li><li>所以衍生出了一种前后端分离开发</li></ul><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><ul><li><code>前后端分离开发</code>，就是在项目开发过程中，对前端代码的开发，专门由<code>前端开发人员</code>负责，后端代码由<code>后端开发人员</code>负责，这样可以做到分工明确，各司其职，提高开发效率，前后端代码并行开发，可以加快项目的开发速度。目前，前后端分离开发方式已经被越来越多的公司采用了，成为现在项目开发的主流开发方式。</li><li>前后端分离开发后，从工程结构上也会发生变化，即前后端代码不再混合在同一个maven工程中，而是分为<code>前端工程和后端工程</code></li></ul><img src="https://s2.loli.net/2023/08/14/D9Qy2bpzGJ3HMEK.png" alt="image-20230808150333666" style="zoom:50%;" /><h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><ul><li>前后端开发人员都参照接口API文档进行开发</li><li>接口（API接口） 就是一个http的请求地址，主要就是去定义：请求路径、请求方式、请求参数、响应参数等内容。</li></ul><img src="https://s2.loli.net/2023/08/14/uZl4fXd8PMg69eD.png" alt="image-20230808150400991" style="zoom:67%;" /><h2 id="YApi"><a href="#YApi" class="headerlink" title="YApi"></a>YApi</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>Api是高效、易用、功能强大的api管理平台，旨在为开发、产品、测试人员提供更优雅的接口管理服务。可以帮助开发者轻松创建、发布、维护API，YApi还为用户提供了优秀的交互体验，开发人员只需要利用平台提供的接口数据写入工具以及简单的点击操作就可以实现接口的管理。</p><p>YApi让接口开发更简单高效，让接口的管理更具有可读性、可维护性，让团队协作更合理。</p><p>Git仓库：<code>https://github.com/YMFE/yapi</code></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用YApi，可以执行下面操作：</p><ul><li>添加项目</li><li>添加分类</li><li>添加接口</li><li>编辑接口</li><li>查看接口</li></ul><p>这个后期看看文档自学一下即可</p><h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><ul><li>使用Swagger你只需要按照它的规范去定义接口及接口相关的信息，再通过Swagger衍生出来的一系列项目和工具，就可以做成各种格式的接口文档，以及在线接口调试页面等。</li><li>官网：<code>https://swagger.io/</code></li></ul><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ol><li>导入对应的maven坐标</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>导入knife4j相关配置，并配置静态资源映射，否则接口文档页面无法访问，注意将controller的包路径修改为你自己的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="meta">@EnableKnife4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始进行静态资源映射...&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/backend/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/backend/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/front/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/front/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;doc.html&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">messageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">        <span class="comment">//设置对象转化器，底层使用jackson将java对象转为json</span></span><br><span class="line">        messageConverter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line">        <span class="comment">//将上面的消息转换器对象追加到mvc框架的转换器集合当中(index设置为0，表示设置在第一个位置，避免被其它转换器接收，从而达不到想要的功能)</span></span><br><span class="line">        converters.add(<span class="number">0</span>, messageConverter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//文档类型</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.eastwind.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;瑞吉外卖&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;瑞吉外卖接口文档&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在拦截器在中设置不需要处理的请求路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义不需要处理的请求</span></span><br><span class="line">String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">        <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/front/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/common/**&quot;</span>,</span><br><span class="line">        <span class="comment">//对用户登陆操作放行</span></span><br><span class="line">        <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/user/sendMsg&quot;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;/doc.html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/webjars/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/swagger-resources&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/v2/api-docs&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>启动服务，访问 <code>http://localhost/doc.html</code> ，我这里的端口号用的80，根据自己的需求改，运行之前记得把linux的服务开起来</p><p>这里我启动时报了一个异常，</p><p><strong>Failed to start bean ‘documentationPluginsBootstrapper’; nested exception is java.lang.NullPointerException</strong></p><p>springboot 升级到 2.6.0之后，swagger版本和springboot出现了不兼容情况，因为SpringBoot处理映射匹配的默认策略发生变化：请求路径与 Spring MVC 处理映射匹配的默认策略已从AntPathMatcher更改为PathPatternParser</p><p>在application.yml中配置，加在spring的下面，注意层级关系</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mvc:</span></span><br><span class="line"><span class="attr">pathmatch:</span></span><br><span class="line"><span class="attr">matching-strategy:</span> <span class="string">ant_path_matcher</span></span><br></pre></td></tr></table></figure><p>访问接口文档<img src="https://s2.loli.net/2023/08/14/LtaATEVNFR9hBxm.png" alt="image-20230808155517784" style="zoom:50%;" /></p><p>此时就显示出来了</p><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><table><thead><tr><th align="center">注解</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@Api</td><td align="center">用在请求的类上，例如Controller，表示对类的说明</td></tr><tr><td align="center">@ApiModel</td><td align="center">用在类上，通常是个实体类，表示一个返回响应数据的信息</td></tr><tr><td align="center">@ApiModelProperty</td><td align="center">用在属性上，描述响应类的属性</td></tr><tr><td align="center">@ApiOperation</td><td align="center">用在请求的方法上，说明方法的用途、作用</td></tr><tr><td align="center">@ApilmplicitParams</td><td align="center">用在请求的方法上，表示一组参数说明</td></tr><tr><td align="center">@ApilmplicitParam</td><td align="center">用在@ApilmplicitParams注解中，指定一个请求参数的各个方面</td></tr></tbody></table><p>加上这些注解，可以将我们生成的接口文档更规范，具体使用效果可以看看文档，这里不做太多介绍</p><h1 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h1><h2 id="配置环境说明"><a href="#配置环境说明" class="headerlink" title="配置环境说明"></a>配置环境说明</h2><p>一共需要三台服务器</p><ul><li>192.168.10.135（服务器A）<ul><li>Nginx：部署前端项目、配置反向代理</li><li>MySql：主从复制结构中的主库</li></ul></li><li>192.168.10.134（服务器B）<ul><li>jdk：运行java项目</li><li>git：版本控制工具</li><li>maven：项目构建工具</li><li>jar：Spring Boot 项目打成jar包基于内置Tomcat运行</li><li>MySql：主从复制结构中的从库</li></ul></li><li>IP地址（服务器C）<ul><li>Redis：缓存中间件</li></ul></li></ul><p>在服务器A中安装Nginx，将前端项目<code>打包</code>目录上传到Nginx的html目录下</p><p>修改Nginx配置文件nginx.conf，新增如下配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">listen</span> <span class="string">80;</span></span><br><span class="line">    <span class="attr">server_name</span> <span class="string">localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line">        <span class="attr">root</span> <span class="string">html/dist;</span></span><br><span class="line">        <span class="attr">index</span> <span class="string">index.html;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">location</span> <span class="string">^~ /api/ &#123;</span></span><br><span class="line">        <span class="attr">rewrite</span> <span class="string">^/api/(.*)$ /$1 break;</span></span><br><span class="line">        <span class="attr">proxy_pass</span> <span class="string">http://192.168.10.134;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><p>在服务器B中安装JDK，Git，MySql</p><p>将项目打成jar包，手动上传并部署（当然你也可以选择git拉取代码，然后shell脚本自动部署）</p><p>部署完后端项目之后，我们就能完成正常的登录功能了，也能进入到后台系统进行增删改查操作</p>]]></content>
      
      
      <categories>
          
          <category> 实战项目 </category>
          
          <category> 瑞吉外卖优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瑞吉外卖 </tag>
            
            <tag> 实战项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞吉外卖</title>
      <link href="/eastwind/a1e1aa91.html"/>
      <url>/eastwind/a1e1aa91.html</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li>先建数据库，建表，再创建一个<code>SpringBoot</code>的工程，勾选<code>Spring web</code>、<code>MySql</code>、<code>MyBatis</code></li><li>在pom.xml文件中导入<code>druid</code>、<code>lombok</code>、<code>MyBatisPlus</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>删除没必要的文件</li></ul><p>导入前端资源，放在<code>resources/static</code>目录下</p><p>如果直接放在<code>resources</code>目录下，则需要配置一下资源映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始进行静态资源映射...&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/backend/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/backend/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/front/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/front/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置数据库的连接<code>端口</code>、<code>数据源</code>、<code>mybatisPlus驼峰映射</code>及日志等</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment"># 端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 数据连接池  </span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/TakeOut?serverTimezone=Asia</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">zjh97867860</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># 在映射实体类或者属性时，将数据库中的表名或字段名中的下划线去掉，按照驼峰命名映射</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 日志</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="comment"># 生成策略  </span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">assign_id</span></span><br></pre></td></tr></table></figure><h1 id="后台代码登录编写"><a href="#后台代码登录编写" class="headerlink" title="后台代码登录编写"></a>后台代码登录编写</h1><h2 id="创建对应的实体类"><a href="#创建对应的实体类" class="headerlink" title="创建对应的实体类"></a>创建对应的实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  员工实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String idNumber;    <span class="comment">// 身份证号码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这两个先不用管，后面再说</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写mapper、service、serviceImpl、controller"><a href="#编写mapper、service、serviceImpl、controller" class="headerlink" title="编写mapper、service、serviceImpl、controller"></a>编写mapper、service、serviceImpl、controller</h2><p><code>mapper</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eastwind.mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@author zhangJH</span></span><br><span class="line"><span class="comment">@create 2023-07-22-21:14</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.Employee;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Employee&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>service</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eastwind.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@author zhangJH</span></span><br><span class="line"><span class="comment">@create 2023-07-22-21:14</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.Employee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Employee&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>serviceImpl</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eastwind.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@author zhangJH</span></span><br><span class="line"><span class="comment">@create 2023-07-22-21:15</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.Employee;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.mapper.EmployeeMapper;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.service.EmployeeService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;EmployeeMapper, Employee&gt; <span class="keyword">implements</span> <span class="title class_">EmployeeService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>controller</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eastwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@author zhangJH</span></span><br><span class="line"><span class="comment">@create 2023-07-22-21:17</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/employee&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于前后端数据交互的一个管理、需要有<code>data</code>（数据）、<code>msg</code>（返回消息）、<code>code</code>（状态码）</p><h2 id="编写返回类-Result"><a href="#编写返回类-Result" class="headerlink" title="编写返回类(Result)"></a>编写返回类(Result)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eastwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;  <span class="comment">// 编码：1成功。0和其他数字失败</span></span><br><span class="line">    <span class="keyword">private</span> String errMsg;  <span class="comment">// 错误信息</span></span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">// 数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();  <span class="comment">// 动态数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        Result&lt;T&gt; r = <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;();</span><br><span class="line">        r.code = <span class="number">1</span>;  <span class="comment">//成功状态码</span></span><br><span class="line">        r.data = data;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">error</span><span class="params">(String errMsg)</span> &#123;</span><br><span class="line">        Result&lt;T&gt; r = <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;();</span><br><span class="line">        r.errMsg = errMsg; <span class="comment">//设置错误信息</span></span><br><span class="line">        r.code = <span class="number">0</span>;  <span class="comment">//默认失败状态码，后期我们可以根据自己的需求来设置其他状态码</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Result&lt;T&gt; <span class="title function_">add</span><span class="params">(String msg, String value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map.put(msg, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写登录登出代码"><a href="#编写登录登出代码" class="headerlink" title="编写登录登出代码"></a>编写登录登出代码</h2><p>在编写这一段的时候遇到了一个问题，系统报500的错误，原因是druid和MP的不兼容问题</p><p><strong>Error attempting to get column ‘XXX’ from result set. Cause: java.sql.</strong></p><p><code>这是因为我的表的createtime类型为DateTime，通过mybatis-plus代码生成器生成的是LocalDateTime，而Java8里面新出来了一些API，LocalDate、LocalTime、LocalDateTime ，但是在默认的情况下，在mybatis里面不支持java8的时间、日期</code></p><p><strong>更改javabean类中的类型，将LocalDate改为Date，实测有效</strong></p><p><img src="https://s2.loli.net/2023/08/14/PDsCWpydLJ4n5Z9.png" alt="image-20230723100144749"></p><p>或者在数据库连接池url中添加zeroDateTimeBehavior&#x3D;convertToNull</p><img src="https://s2.loli.net/2023/08/14/yNBxqw18l4c62pf.png" alt="image-20230723100233190" style="zoom:50%;" /><p>再者就是改变版本了，druid只有在1.1.21才支持MP(3.4)的兼容</p><p>接着是编写登录登出代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.common.Result;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.Employee;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.service.EmployeeService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.DigestUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/employee&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EmployeeService employeeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="comment">// @RequestBody可以接收json字符串</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Employee&gt; <span class="title function_">login</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line">        <span class="comment">// 1、对密码进行MD5加密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> employee.getPassword();   <span class="comment">// 获得密码</span></span><br><span class="line"><span class="comment">//        DigestUtils.md5DigestAsHex(输入流/字节数组)  所以需要将字符串转为字节</span></span><br><span class="line">        password = DigestUtils.md5DigestAsHex(password.getBytes());     <span class="comment">// 利用DigestUtils工具类进行加密</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、查找用户是否存在(利用MP编写)</span></span><br><span class="line">        LambdaQueryWrapper&lt;Employee&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// Employee::getName数据库中的name数据,employee.getName()传入的name数据</span></span><br><span class="line">        lqw.eq(Employee::getUsername,employee.getUsername());</span><br><span class="line">        <span class="comment">// 因为name设定了unique(唯一约束)，所以返回的对象唯一</span></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> employeeService.getOne(lqw);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、不存在则返回登录失败msg</span></span><br><span class="line">        <span class="keyword">if</span> (emp == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、验证密码是否正确(加密后的密码与数据库内的密码比对[数据库的密码是加密过的])</span></span><br><span class="line">        <span class="keyword">if</span> (!(password.equals(emp.getPassword())))&#123;</span><br><span class="line">            <span class="comment">// 如果密码相同，说明是正确的，继续往下判断，如果不同，说明密码是错误的，在这里结束</span></span><br><span class="line">            <span class="keyword">return</span> Result.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、验证员工状态，是否可用</span></span><br><span class="line">        <span class="keyword">if</span> (emp.getStatus() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 0不可用，1可用，当不可用时，则结束，否则继续往下判断</span></span><br><span class="line">            <span class="keyword">return</span> Result.error(<span class="string">&quot;账号已禁用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(emp.getCreateTime());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6、将ID数据存到session域中传递过去</span></span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;employee&quot;</span>,employee.getId());</span><br><span class="line">        <span class="keyword">return</span> Result.success(employee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">logout</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        request.getSession().removeAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;登出成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完善登录功能"><a href="#完善登录功能" class="headerlink" title="完善登录功能"></a>完善登录功能</h2><p>之前的登录功能，我们不登录也可以正常访问，这显然是不正确的，我们希望看到的是，只有<strong>登录成功后</strong>，才能看到登录页面，<strong>未登录状态</strong>跳转到登录页面。</p><p>可以使用过滤器或拦截器来对登录功能进行完善，如果你忘了Filter的知识，可以先通过大佬的这篇文章简单了解一下</p><p><code>https://cyborg2077.github.io/2022/08/21/JavaWeb08/</code></p><h3 id="编写拦截器"><a href="#编写拦截器" class="headerlink" title="编写拦截器"></a>编写拦截器</h3><p>新建一个<code>filter</code>包，在filter包下放置拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// filterName是拦截器的名字，urlPatterns是拦截路径，/*是拦截所有请求</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;loginCheckFilter&quot;,urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line">        <span class="comment">// request.getRequestURI()获取拦截路径</span></span><br><span class="line">        log.info(<span class="string">&quot;拦截到路径&#123;&#125;&quot;</span>,request.getRequestURI());</span><br><span class="line">        filterChain.doFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完拦截器，需要在主程序运行位置添加拦截器扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TakeOutApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(TakeOutApplication.class, args);</span><br><span class="line">        log.info(<span class="string">&quot;项目启动成功...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动服务器，访问页面，查看日志，现在可以拦截到URI了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">拦截到路径/backend/index.html</span><br><span class="line">拦截到路径/employee/page</span><br><span class="line">拦截到路径/backend/page/login/login.html</span><br></pre></td></tr></table></figure><h4 id="编写登录Filter逻辑"><a href="#编写登录Filter逻辑" class="headerlink" title="编写登录Filter逻辑"></a>编写登录Filter逻辑</h4><p>获取本次请求的URI，并编写不需要被拦截的URI</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取本次请求的URI</span></span><br><span class="line"><span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">log.info(<span class="string">&quot;拦截到路径&#123;&#125;&quot;</span>,uri);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义不需要被拦截的请求</span></span><br><span class="line">String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">        <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/front/**&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>/employee/login</code>和<code>/employee/logout</code>是两个请求，当发送登录和登出请求时，其实是不需要拦截的</p><p>backend下的和front下的静态资源，这两个可以直接放行，因为拦截的是ajax请求，页面是没有数据的。</p><p>在urls里定义了通配符，如何让它匹配上&#x2F;backend&#x2F;index.html这些文件呢，就需要用到一个工具类<code>AntPathMatcher</code></p><p>编写了一个判断请求是否需要被处理的方法，利用<code>AntPathMatcher</code>中的<code>match</code>方法来匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路径匹配</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">ANT_PATH_MATCHER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断该请求是否需要被处理</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String[] urls, String uri)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (String url : urls) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> ANT_PATH_MATCHER.match(url, uri);</span><br><span class="line">        <span class="comment">// 需要被处理</span></span><br><span class="line">        <span class="keyword">if</span> (match) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历完后不需要被处理</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不需要处理，直接放行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">check</span> <span class="operator">=</span> check(urls, uri);</span><br><span class="line"><span class="comment">// 不需要被处理，放行并退出</span></span><br><span class="line"><span class="keyword">if</span> (check) &#123;</span><br><span class="line">    log.info(<span class="string">&quot;路径&#123;&#125;不需要被处理&quot;</span>,request.getRequestURI());</span><br><span class="line">    filterChain.doFilter(request,response);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>已登录，放行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断登录状态，如果已登录，放行</span></span><br><span class="line"><span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">    log.info(<span class="string">&quot;用户已登录&quot;</span>);</span><br><span class="line">    filterChain.doFilter(request,response);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>未登录，拦截，并发送数据告知前端未登录，跳转回登录页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在前端页面有一个拦截器，可以拦截数据，如果数据符合条件则放行，否则重定向回登录页面</span></span><br><span class="line"><span class="comment">// 这个数据由我们进行发送</span></span><br><span class="line"><span class="comment">// 需要导入fastJson的包来发送Json字符串</span></span><br><span class="line">log.info(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line"><span class="comment">//未登录状态为什么要返回一个error呢？而且msg为NOTLOGIN</span></span><br><span class="line">response.getWriter().write(JSON.toJSONString(Result.error(<span class="string">&quot;NOTLOGIN&quot;</span>)));</span><br></pre></td></tr></table></figure><p>我们看一下JS代码就懂了，当符合未登录状态的条件时，会自动重定向到登录页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> === <span class="number">0</span> &amp;&amp; res.<span class="property">data</span>.<span class="property">msg</span> === <span class="string">&#x27;NOTLOGIN&#x27;</span>) &#123;<span class="comment">// 返回登录页面</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---/backend/page/login/login.html---&#x27;</span>)</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;userInfo&#x27;</span>)</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">top</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;/backend/page/login/login.html&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要导入fastJson坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.62<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整代码如下（使用了@Slf4j的log日志功能）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.common.Result;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.AntPathMatcher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// filterName是拦截器的名字，urlPatterns是拦截路径，/*是拦截所有请求</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;loginCheckFilter&quot;,urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 路径匹配</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">ANT_PATH_MATCHER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断该请求是否需要被处理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String[] urls, String uri)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String url : urls) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> ANT_PATH_MATCHER.match(url, uri);</span><br><span class="line">            <span class="comment">// 需要被处理</span></span><br><span class="line">            <span class="keyword">if</span> (match) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历完后不需要被处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取本次请求的URI</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        log.info(<span class="string">&quot;拦截到路径&#123;&#125;&quot;</span>,uri);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义不需要被拦截的请求</span></span><br><span class="line">        String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/front/**&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">check</span> <span class="operator">=</span> check(urls, uri);</span><br><span class="line">        <span class="comment">// 不需要被处理，放行并退出</span></span><br><span class="line">        <span class="keyword">if</span> (check) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;路径&#123;&#125;不需要被处理&quot;</span>,request.getRequestURI());</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断登录状态，如果已登录，放行</span></span><br><span class="line">        <span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;用户已登录&quot;</span>);</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在前端页面有一个拦截器，可以拦截数据，如果数据符合条件则放行，否则重定向回登录页面</span></span><br><span class="line">        <span class="comment">// 这个数据由我们进行发送</span></span><br><span class="line">        <span class="comment">// 需要导入fastJson的包来发送Json字符串</span></span><br><span class="line">        log.info(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        response.getWriter().write(JSON.toJSONString(Result.error(<span class="string">&quot;NOTLOGIN&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// request.getRequestURI()获取拦截路径</span></span><br><span class="line"><span class="comment">//        log.info(&quot;拦截到路径&#123;&#125;&quot;,request.getRequestURI());</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写登出Filter逻辑"><a href="#编写登出Filter逻辑" class="headerlink" title="编写登出Filter逻辑"></a>编写登出Filter逻辑</h4><p>登出的Filter逻辑不需要更改， 在前面已经写好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">logout</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    request.getSession().removeAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;登出成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要删除之前保存的employee属性，并在前端删除登录数据就可以了</p><p>简单分析一下前端代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right-menu&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里动态的显示登录的用户名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;avatar-wrapper&quot;</span>&gt;</span>&#123;&#123; userInfo.name &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里就是登出的按钮--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/icons/btn_close@2x.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;outLogin&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;退出&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;logout&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里是一个登出按钮，单击后触发登出方法</p><p>这是一个登出方法，触发后发送post请求，在登出方法成功结束后，删除登录数据userInfo，并跳转回登录页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">logoutApi</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(res.<span class="property">code</span> === <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;userInfo&#x27;</span>)</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;/backend/page/login/login.html&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送ajax请求后，触发登出方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">logoutApi</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/employee/logout&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="添加员工"><a href="#添加员工" class="headerlink" title="添加员工"></a>添加员工</h1><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><p>实现功能之前，先梳理一下整个流程</p><ol><li>页面发送ajax请求，将新增员工页面输入的数据以json的形式提交到服务器</li><li>服务器端Controller接收页面提交的数据并调用Service将数据保存</li><li>Service调用Mapper操作数据库，保存数据</li></ol><p>前端数据模型<code>ruleForm</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ruleForm : &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phone&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;idNumber&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提交函数，放置参数列表</p><img src="https://s2.loli.net/2023/08/14/sf4VHwDF8jY5pKP.png" alt="image-20230723194504266" style="zoom: 67%;" /><p>发送ajax请求:post请求，请求地址&#x2F;employee，携带参数params</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增---添加员工</span></span><br><span class="line">function <span class="title function_">addEmployee</span> <span class="params">(params)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    url: <span class="string">&#x27;/employee&#x27;</span>,</span><br><span class="line">    method: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    data: &#123; ...params &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">save</span><span class="params">(HttpServletRequest request,<span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line">    <span class="comment">// 设置新密码默认为12345，并进行MD5加密</span></span><br><span class="line">    employee.setPassword(DigestUtils.md5DigestAsHex(<span class="string">&quot;12345&quot;</span>.getBytes()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置创建时间为当前日期</span></span><br><span class="line">    employee.setCreateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置更新时间为当前日期</span></span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置用户创建者的id(谁创建了这个用户，这个id就是谁)</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    employee.setCreateUser(empId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置用户更新者的id(谁更新了这个用户，这个id就是谁)</span></span><br><span class="line">    employee.setUpdateUser(empId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存用户信息</span></span><br><span class="line">    employeeService.save(employee);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;添加员工成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此添加员工的功能就开发完毕了，启动服务器，测试一下添加员工，添加完毕后，如果没有问题，会显示添加员工成功，之后去数据库查看，数据库中也有对应的数据，且密码也经过了加密，createTime和createUser等数据也都有</p><p>值得注意的一点是，username不能重复，因为在建表的时候设定了unique，只能存在唯一的username，如果存入相同的username则会报错<br>控制台报错<code>java.sql.SQLIntegrityConstraintViolationException: Duplicate entry &#39;Kyle&#39; for key &#39;employee.idx_username&#39;</code></p><p><strong>统一异常处理</strong>，如果你没啥印象了，可以看看大佬写的这篇文章第三小节</p><p><code>https://cyborg2077.github.io/2022/09/10/SSMIntegration/</code></p><h2 id="完善全局异常处理器"><a href="#完善全局异常处理器" class="headerlink" title="完善全局异常处理器"></a>完善全局异常处理器</h2><p>在<code>com.eastwind.common</code>包下创建一个全局异常处理类<code>GlobalExceptionHandler</code>，并添加<code>exceptionHandler</code>方法用来捕获异常，并返回结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException exception)</span> &#123;</span><br><span class="line">        log.error(exception.getMessage());</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">&quot;未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先用日志输出一下看看能不能正常运行，这也是代码开发的一个好习惯<br>启动服务器，新增员工测试，输入数据库中已存在的username，这次会报错<code>未知错误</code>（如果你还没报未知错误，建议先调试好再往下进行）<br>控制台日志输出的错误信息为<code>Duplicate entry &#39;Kyle&#39; for key &#39;employee.idx_username&#39;</code></p><p>然后我们再来开发具体的异常处理逻辑<br>我们希望给出的错误信息为该用户名已存在，所以我们就需要对错误信息来进行判断，如果错误信息中包含<code>Duplicate entry</code>，则说明有条目是重复的，在本案例中，只可能是username重复了，所以我们在用split()方法来对错误信息切片，取出重复的username，采用字符串拼接的方式，告知该用户已经存在了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLIntegrityConstraintViolationException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @RestControllerAdvice由ControllerAdvice和ResponseBody组合</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @ExceptionHandler(被处理的异常类)</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException ex)</span>&#123;</span><br><span class="line">        <span class="comment">// ex.getMessage()得到具体错误信息</span></span><br><span class="line">        log.error(ex.getMessage());</span><br><span class="line">        <span class="comment">// 如果错误信息包含Duplicate entry，说明用户名已存在，提示错误</span></span><br><span class="line">        <span class="keyword">if</span> (ex.getMessage().contains(<span class="string">&quot;Duplicate entry&quot;</span>))&#123;</span><br><span class="line">            String[] split = ex.getMessage().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> split[<span class="number">2</span>] + <span class="string">&quot;已存在&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> Result.error(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">&quot;未知异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来重启服务器，测试添加功能，输入已经存在的username，输出的错误信息符合我们的预期</p><p><img src="https://s2.loli.net/2023/08/14/AxalYc2UNZnIeuo.png" alt="image-20230723211112431"></p><h1 id="员工信息分页查询"><a href="#员工信息分页查询" class="headerlink" title="员工信息分页查询"></a>员工信息分页查询</h1><ol><li>页面发送<code>ajax</code>请求，将分页查询参数(<code>page</code>、<code>pageSize</code>、<code>name</code>)提交到服务</li><li>服务端<code>Controller</code>接收页面提交的数据并调用<code>Service</code>查询数据</li><li><code>Service</code>调用<code>Mapper</code>操作数据库，查询分页数据</li><li><code>Controller</code>将查询到的分页数据响应给页面</li><li>页面接收到分页数据并通过<code>ElementUI</code>的<code>Table</code>组件展示到页面上</li></ol><p>关于分页功能的实现，我们在之前的学习中也做过了，下面文章连接中的第七小节就是分页查询</p><p><code>https://cyborg2077.github.io/2022/08/24/JavaWeb10/</code></p><h2 id="前端代码分析"><a href="#前端代码分析" class="headerlink" title="前端代码分析"></a>前端代码分析</h2><p><img src="https://s2.loli.net/2023/08/14/GPsLikCfRaKT1BM.png" alt="image-20230724085437993"></p><p>单击按钮后，会将数据通过ajax请求发送到后端</p><img src="https://s2.loli.net/2023/08/14/pG6RDXmOPFbhHjd.png" alt="image-20230724085526792" style="zoom: 67%;" /><p>数据显示部分的代码，是由这部分代码完成的，这里在获取参数后，将参数传递到了ajax请求上</p><p><img src="https://s2.loli.net/2023/08/14/H7OfXmluThIMnQL.png" alt="image-20230724085643216"></p><p>这里发送的是get请求，那么请求参数是哪里来的呢？</p><p>前端代码配置了一个<code>request</code>拦截器，拦截<code>get</code>请求，并将请求参数使用拼串的方式拼接到URL上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// request拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 是否需要设置 token</span></span><br><span class="line"><span class="comment">// const isToken = (config.headers || &#123;&#125;).isToken === false</span></span><br><span class="line"><span class="comment">// if (getToken() &amp;&amp; !isToken) &#123;</span></span><br><span class="line"><span class="comment">//   config.headers[&#x27;Authorization&#x27;] = &#x27;Bearer &#x27; + getToken() // 让每个请求携带自定义token 请根据实际情况自行修改</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// get请求映射params参数</span></span><br><span class="line"><span class="keyword">if</span> (config.<span class="property">method</span> === <span class="string">&#x27;get&#x27;</span> &amp;&amp; config.<span class="property">params</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> url = config.<span class="property">url</span> + <span class="string">&#x27;?&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> propName <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(config.<span class="property">params</span>)) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = config.<span class="property">params</span>[propName];</span><br><span class="line">    <span class="keyword">var</span> part = <span class="built_in">encodeURIComponent</span>(propName) + <span class="string">&quot;=&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (value !== <span class="literal">null</span> &amp;&amp; <span class="title function_">typeof</span>(value) !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(value)) &#123;</span><br><span class="line">            <span class="keyword">let</span> params = propName + <span class="string">&#x27;[&#x27;</span> + key + <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">            <span class="keyword">var</span> subPart = <span class="built_in">encodeURIComponent</span>(params) + <span class="string">&quot;=&quot;</span>;</span><br><span class="line">            url += subPart + <span class="built_in">encodeURIComponent</span>(value[key]) + <span class="string">&quot;&amp;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        url += part + <span class="built_in">encodeURIComponent</span>(value) + <span class="string">&quot;&amp;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    url = url.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    config.<span class="property">params</span> = &#123;&#125;;</span><br><span class="line">    config.<span class="property">url</span> = url;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="编写具体的业务逻辑"><a href="#编写具体的业务逻辑" class="headerlink" title="编写具体的业务逻辑"></a>编写具体的业务逻辑</h2><h3 id="配置MyBatisPlus插件"><a href="#配置MyBatisPlus插件" class="headerlink" title="配置MyBatisPlus插件"></a>配置MyBatisPlus插件</h3><p>新建com.eastwind.config包，并新建MyBatisPlusConfig类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置MyBatisPlus的分页插件</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">myBatisPlusFilterInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写日志查看数据"><a href="#编写日志查看数据" class="headerlink" title="编写日志查看数据"></a>编写日志查看数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize,String name)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;page=&#123;&#125;,pageSize=&#123;&#125;,name=&#123;&#125;&quot;</span>,page,pageSize,name);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/14/lR2iBYNjWZPe4hu.png" alt="image-20230724090133696"></p><p><img src="https://s2.loli.net/2023/08/14/DFRCV3JHGB5qUxd.png" alt="image-20230724090150060"></p><h3 id="具体的业务逻辑"><a href="#具体的业务逻辑" class="headerlink" title="具体的业务逻辑"></a>具体的业务逻辑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize,String name)</span>&#123;</span><br><span class="line">   <span class="comment">// page:当前页码(startIndex)</span></span><br><span class="line">    <span class="comment">// pageSize:查询数量</span></span><br><span class="line">    log.info(<span class="string">&quot;page=&#123;&#125;,pageSize=&#123;&#125;,name=&#123;&#125;&quot;</span>,page,pageSize,name);</span><br><span class="line">    <span class="comment">// 得到分页的构造器</span></span><br><span class="line">    <span class="type">Page</span> <span class="variable">pageInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(page,pageSize);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加过滤条件</span></span><br><span class="line">    LambdaQueryWrapper&lt;Employee&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 如果name不为空，数据库就用like匹配外面的name字段,否则不匹配</span></span><br><span class="line">    lqw.like(!(name == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(name)),Employee::getName,name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对查询结果进行排序(更新时间)</span></span><br><span class="line">    lqw.orderByDesc(Employee::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行查询</span></span><br><span class="line">    employeeService.page(pageInfo,lqw);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时查询后，得到数据</p><p><img src="https://s2.loli.net/2023/08/14/jXSAERO7fWgh5sv.png" alt="image-20230724093936269"></p><p>对分页进行模糊匹配</p><p><img src="https://s2.loli.net/2023/08/14/eqpDCGrlLiyTHcR.png" alt="image-20230724094000426"></p><p>此时数据都被查询成功了</p><h1 id="启用-禁用员工账号"><a href="#启用-禁用员工账号" class="headerlink" title="启用&#x2F;禁用员工账号"></a>启用&#x2F;禁用员工账号</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ol><li>在员工管理列表页面，可以对某个员工账号进行启用或者禁用操作。账号禁用的员工不能登录系统，启用后的员工可以正常登录。</li><li>需要注意，只有管理员（<code>admin</code>用户）可以对其他普通用户进行启用、禁用操作，所以普通用户登录系统后启用、禁用按钮不显示。</li><li>管理员<code>admin</code>登录系统可以对所有员工账号进行启用、禁用操作。</li><li>如果某个员工账号状态为正常，则按钮显示为“禁用”，如果员工账号状态为已禁用，则按钮显示为“启用”</li></ol><p><img src="https://s2.loli.net/2023/08/14/GetVUXW9FjCDQAc.png" alt="image-20230724115815564"></p><p>如何做到，登录的是管理员(<code>admin</code>用户)时，才能看到启用&#x2F;禁用按钮呢？</p><p>当我们加载完页面的时候，获取一下当前登录账号的用户名，也就是<code>username</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">user</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;userInfo&#x27;</span>)).<span class="property">username</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后判断一下这个用户名是不是<code>admin</code>，如果是的话就显示启用&#x2F;禁用，否则不显示<br>那么我们现在就来button里设置一下，使用<code>v-if</code>来判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button</span><br><span class="line">    type=<span class="string">&quot;text&quot;</span></span><br><span class="line">    size=<span class="string">&quot;small&quot;</span></span><br><span class="line">    <span class="keyword">class</span>=<span class="string">&quot;delBut non&quot;</span></span><br><span class="line">    @click=<span class="string">&quot;statusHandle(scope.row)&quot;</span></span><br><span class="line">    v-<span class="keyword">if</span>=<span class="string">&quot;user === &#x27;admin&#x27;&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">    &#123;&#123; scope.<span class="property">row</span>.<span class="property">status</span> == <span class="string">&#x27;1&#x27;</span> ? <span class="string">&#x27;禁用&#x27;</span> : <span class="string">&#x27;启用&#x27;</span> &#125;&#125;</span><br><span class="line">&lt;/el-button&gt;</span><br></pre></td></tr></table></figure><h3 id="Ajax请求发送过程"><a href="#Ajax请求发送过程" class="headerlink" title="Ajax请求发送过程"></a>Ajax请求发送过程</h3><ol><li>页面发送<code>ajax</code>请求，将参数(<code>id</code>、<code>status</code>)提交到服务端</li><li>服务端<code>Controller</code>接收页面提交的数据并调用<code>Service</code>更新数据</li><li><code>Service</code>调用<code>Mapper</code>操作数据库</li></ol><p>从禁用&#x2F;启用的按钮中，我们可以看到是绑定了一个名为<code>statusHandle(scope.row)</code>函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;delBut non&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">&quot;statusHandle(scope.row)&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-if</span>=<span class="string">&quot;user === &#x27;admin&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    &#123;&#123; scope.row.status == &#x27;1&#x27; ? &#x27;禁用&#x27; : &#x27;启用&#x27; &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编写具体业务逻辑"><a href="#编写具体业务逻辑" class="headerlink" title="编写具体业务逻辑"></a>编写具体业务逻辑</h2><p>启用、禁用员工账号，本质上就是一个更新操作，也就是对status状态字段进行操作在Controller中创建update方法，此方法是一个通用的修改员工信息的方法<br>只不过现在我们的update只需要修改status，而后面我们还有修改员工其他信息的业务，根据传进来的employee</p><p><strong>update可以处理员工状态的代码和员工修改信息的代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">update</span><span class="params">(HttpServletRequest request,<span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    employee.setUpdateUser(empId);</span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    employeeService.updateById(employee);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;员工信息修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看数据库，我们发现<code>status</code>并没有被修改<br>通过查看日志，我们发现更新操作并没有完成，这是怎么回事呢？</p><p><img src="https://s2.loli.net/2023/08/14/Zpj9FvmgMLSKkiy.png" alt="image-20230724134638799"></p><p>我们发现，这里的id值不相同</p><p>问题的原因：</p><ul><li><strong>JS对Long型数据进行处理时丢失精度，导致提交的id和数据库中的id不一致。</strong></li></ul><p>如何解决这个问题?</p><ul><li>我们可以在服务端给页面响应json数据时进行处理，<strong>将Long型数据统一转为String字符串</strong></li></ul><h3 id="配置状态转换器（JacksonObjectMapper）"><a href="#配置状态转换器（JacksonObjectMapper）" class="headerlink" title="配置状态转换器（JacksonObjectMapper）"></a>配置状态转换器（JacksonObjectMapper）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="keyword">module</span>.SimpleModule;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.std.ToStringSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象</span></span><br><span class="line"><span class="comment"> * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]</span></span><br><span class="line"><span class="comment"> * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonObjectMapper</span> <span class="keyword">extends</span> <span class="title class_">ObjectMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;HH:mm:ss&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JacksonObjectMapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="comment">//收到未知属性时不报异常</span></span><br><span class="line">        <span class="built_in">this</span>.configure(FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化时，属性不存在的兼容处理</span></span><br><span class="line">        <span class="built_in">this</span>.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleModule</span> <span class="variable">simpleModule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleModule</span>()</span><br><span class="line">                .addDeserializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)))</span><br><span class="line"></span><br><span class="line">                .addSerializer(BigInteger.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(Long.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addSerializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addSerializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册功能模块 例如，可以添加自定义序列化器和反序列化器</span></span><br><span class="line">        <span class="built_in">this</span>.registerModule(simpleModule);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展Mvc框架的消息转换器"><a href="#扩展Mvc框架的消息转换器" class="headerlink" title="扩展Mvc框架的消息转换器"></a>扩展Mvc框架的消息转换器</h3><p>写这块代码的时候遇到一个问题，如果按照教程上的写法是继承类<code>WebMvcConfigurationSupport</code>，并重写里面的<code>extendMessageConverters</code>这个方法，但是按照这样写会出现报错</p><p>如下图所示，没有找到资源的404报错，遇到这个问题我也不太清楚，我把继承类<code>WebMvcConfigurationSupport</code>改成实现接口<code>WebMvcConfigurer</code>，并且实现了里面的<code>extendMessageConverters</code>这个方法后，就可以正常运行了</p><p><img src="https://s2.loli.net/2023/08/14/HRyo82f5cpM3zrN.png" alt="image-20230724144531818"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.eastwind.common.JacksonObjectMapper;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"><span class="comment">// 注意，这里是实现WebMvcConfigurer，并实现extendMessageConverters方法才可以使用</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果资源放在resources目录下，需要添加资源映射</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    protected void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span></span><br><span class="line"><span class="comment">//        registry.addResourceHandler(&quot;/backend/**&quot;).addResourceLocations(&quot;classpath:/backend/&quot;);</span></span><br><span class="line"><span class="comment">//        registry.addResourceHandler(&quot;/front/**&quot;).addResourceLocations(&quot;classpath:/front/&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">messageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">        <span class="comment">// 设置对象转化器，底层使用jackson将Java对象转为json</span></span><br><span class="line">        messageConverter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line">        <span class="comment">// 将上面的消息转化器追加到mvc框架的转化器集合中，(index=0,表示在第一个设置，避免被其他转换器接收，从而达不到想要的功能)</span></span><br><span class="line">        converters.add(<span class="number">0</span>,messageConverter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动服务器，尝试禁用按钮<br>数据库中的status字段数据发生了改变，且页面上也显示已禁用，再次点击启用，也能正常操作</p><p><img src="https://s2.loli.net/2023/08/14/iNkojJYHuSP2rWp.png" alt="image-20230724145052786"></p><h1 id="编辑员工信息"><a href="#编辑员工信息" class="headerlink" title="编辑员工信息"></a>编辑员工信息</h1><h2 id="流程分析-1"><a href="#流程分析-1" class="headerlink" title="流程分析"></a>流程分析</h2><ol><li>点击编辑按钮时，页面将跳转到<code>add.html</code>，并在url中携带参数<code>员工id</code></li><li>在<code>add.html</code>页面中获取url中的参数<code>员工id</code></li><li>发送<code>ajax</code>请求，请求服务端，同时提交<code>员工id</code>参数</li><li>服务端接受请求，并根据<code>员工id</code>查询员工信息，并将员工信息以<code>json</code>形式响应给页面</li><li>页面接收服务端响应的<code>json</code>数据，并通过Vue的<code>双向绑定</code>进行员工信息回显</li><li>点击保存按钮，发送ajax请求，将页面中的员工信息以json形式提交给服务端</li><li>服务端接受员工信息，并进行处理，完成后给页面响应</li><li>页面接收到服务端响应信息后进行相应处理</li></ol><h2 id="具体实现-1"><a href="#具体实现-1" class="headerlink" title="具体实现"></a>具体实现</h2><p>add.html如下</p><p><img src="https://s2.loli.net/2023/08/14/WCsZtqH7JQp9VdS.png" alt="image-20230724150121475"></p><p>点击编辑按钮后，页面会跳转到add.html，并在url中携带参数员工id</p><p>注意:add.html是公共页面，新建员工和编辑员工都是在此页面进行操作</p><p>编辑按钮绑定的事件为addMemberHandle</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;blueBug&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">&quot;addMemberHandle(scope.row.id)&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:class</span>=<span class="string">&quot;&#123;notAdmin:user !== &#x27;admin&#x27;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    编辑</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>add.html</code>页面中获取url中的参数<code>员工id</code>，判断是添加员工还是修改员工</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">addMemberHandle (st) &#123;</span><br><span class="line">    <span class="keyword">if</span> (st === <span class="string">&#x27;add&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">menuHandle</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/backend/page/member/add.html&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;添加员工&#x27;</span></span><br><span class="line">        &#125;,<span class="literal">true</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">menuHandle</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/backend/page/member/add.html?id=&#x27;</span>+st,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;修改员工&#x27;</span></span><br><span class="line">        &#125;,<span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端接受请求，并根据<code>员工id</code>查询员工信息，并将员工信息以<code>json</code>形式响应给页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = <span class="title function_">requestUrlParam</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">actionType</span> = <span class="variable language_">this</span>.<span class="property">id</span> ? <span class="string">&#x27;edit&#x27;</span> : <span class="string">&#x27;add&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">id</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>add.html加载完毕之后，调用钩子函数，主要看其中<code>requestUrlParam</code>函数,它传递了一个id进去，然后进行一个id数据的获取，requestUrlParam方法写了url地址参数的获取</p><p>首先是得到了整个地址</p><p>然后对地址进行获取，从?后面一位开始取，并对&amp;符号进行分割</p><p>什么意思呢？举个例子：<code>http://localhost/backend/page/member/add.html?id=1683100374560436226</code></p><p>例如这一段代码，从?后面开始取，就是得到数据<code>id=1683100374560436226</code>如果后面跟着其他的属性啥的</p><p>比如说<code>http://localhost/backend/page/member/add.html?id=1683100374560436226&amp;name=zhangsan</code></p><p>此时会得到<code>id=1683100374560436226&amp;name=zhangsan</code>，再对它进行分割</p><p>[“id&#x3D;1683100374560436226”,”name&#x3D;zhangsan”]</p><p>然后遍历数据，loc是在每个数据里面进行查询(indexOf)，查询前缀为(id&#x3D;xxx)的数据，这里的id是argname传递进来的</p><p>如果查到了，就!&#x3D;-1，并且对id&#x3D;这个进行替换，替换为空字符串，再对?进行替换，替换为空字符串，也就是说，收集到的id必然是一串<strong>数字</strong>，否则没查到就是-1，返回空字符串，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取url地址上面的参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">requestUrlParam</span>(<span class="params">argname</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> url = location.<span class="property">href</span></span><br><span class="line">  <span class="keyword">var</span> arrStr = url.<span class="title function_">substring</span>(url.<span class="title function_">indexOf</span>(<span class="string">&quot;?&quot;</span>)+<span class="number">1</span>).<span class="title function_">split</span>(<span class="string">&quot;&amp;&quot;</span>)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;arrStr.<span class="property">length</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">var</span> loc = arrStr[i].<span class="title function_">indexOf</span>(argname+<span class="string">&quot;=&quot;</span>)</span><br><span class="line">      <span class="keyword">if</span>(loc!=-<span class="number">1</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> arrStr[i].<span class="title function_">replace</span>(argname+<span class="string">&quot;=&quot;</span>,<span class="string">&quot;&quot;</span>).<span class="title function_">replace</span>(<span class="string">&quot;?&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面接收服务端响应的<code>json</code>数据，并通过Vue的<code>双向绑定</code>进行员工信息回显<br>在<code>created</code>钩子函数中还调用了<code>init</code>函数<br>该函数接收到服务端响应的<code>json</code>数据之后，先判断一下状态码，如果是1，则说明是操作成功<br>随后将获取到的数据赋给表单，从而达到回显数据的效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> init () &#123;</span><br><span class="line">    <span class="title function_">queryEmployeeById</span>(<span class="variable language_">this</span>.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">String</span>(res.<span class="property">code</span>) === <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ruleForm</span> = res.<span class="property">data</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">sex</span> = res.<span class="property">data</span>.<span class="property">sex</span> === <span class="string">&#x27;0&#x27;</span> ? <span class="string">&#x27;女&#x27;</span> : <span class="string">&#x27;男&#x27;</span></span><br><span class="line">        <span class="comment">// this.ruleForm.password = &#x27;&#x27;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当数据回显后，单击保存按钮会发送put请求让服务器端更新数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改---添加员工</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">editEmployee</span> (params) &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/employee&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; ...params &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端接受员工信息，并进行处理，完成后给页面响应<br>由于修改员工信息也是发送的<code>PUT</code>请求，与之前启用&#x2F;禁用员工账号是一致的，而且前面我们已经写过了PUT请求的<code>Controller</code>层<br>所以当我们点击保存按钮时，调用<code>submitForm</code>函数，而在<code>submitForm</code>函数中我们又调用了<code>editEmployee</code>函数，发送<code>PUT</code>请求，实现修改功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">update</span><span class="params">(HttpServletRequest request,<span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line">    log.info(employee.toString());</span><br><span class="line">    <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    employee.setUpdateUser(empId);</span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    employeeService.updateById(employee);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;员工信息修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面接收到服务端响应信息后进行相应处理<br>员工信息修改成功之后，调用了<code>goBack</code>函数，跳转至员工管理页面，并发起分页请求<code>list</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">goBack</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">menuHandle</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/backend/page/member/list.html&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;员工管理&#x27;</span></span><br><span class="line">    &#125;,<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，编辑员工信息的功能就完成了</p><h1 id="公共字段自动填充"><a href="#公共字段自动填充" class="headerlink" title="公共字段自动填充"></a>公共字段自动填充</h1><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><ul><li>前面我们已经完成了对员工数据的添加与修改，在添加&#x2F;修改员工数据的时候，都需要指定一下创建人、创建时间、修改人、修改时间等字段，而这些字段又属于公共字段，不仅员工表有这些字段，在菜品表、分类表等其他表中，也拥有这些字段。</li><li>那我们有没有办法让这些字段在一个地方统一管理呢？这样可以简化我们的开发<ul><li>答案就是使用<code>MybatisPlus</code>给我们提供的公共字段自动填充功能</li></ul></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><p>1、在实体类的属性上加入@TableField注解，指定填充策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span>    <span class="comment">// 插入时填充</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span>     <span class="comment">// 插入或更新时填充</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span> <span class="comment">// 插入时填充</span></span><br><span class="line"><span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span> <span class="comment">// 插入或更新时填充</span></span><br><span class="line"><span class="keyword">private</span> Long updateUser;</span><br></pre></td></tr></table></figure><p>里面是四种情况，分别是<code>DEFAULT</code>、<code>INSERT</code>、<code>UPDATE</code>、<code>INSERT_UPDATE</code></p><p>这是个枚举类<br><code>DEFAULT</code>为默认值，表示不填充<br><code>INSERT</code>表示插入时填充<br><code>UPDATE</code>表示修改时填充<br><code>INSERT_UPDATE</code>表示插入和修改时填充</p><img src="https://s2.loli.net/2023/08/14/JcsjlPgNWODrGCQ.png" alt="image-20230725082012852" style="zoom:67%;" /><p>按照框架要求编写元数据对象处理器，在此类中统一对公共字段赋值，此类需要实现<code>MetaObjectHandler</code>接口<br>实现接口之后，重写两个方法，一个是<strong>插入时</strong>填充，一个是<strong>修改时</strong>填充<br>关于字段填充方式，使用<code>metaObject</code>的<code>setValue</code>来实现<br>关于id的获取，我们之前是存到<code>session</code>里的，但在<code>MyMetaObjectHandler</code>类中不能获得<code>HttpSession</code>对象，所以我们需要用其他方式来获取登录用户<code>Id</code></p><h3 id="ThreadLocal获取Id"><a href="#ThreadLocal获取Id" class="headerlink" title="ThreadLocal获取Id"></a>ThreadLocal获取Id</h3><ul><li>现在存在一个问题，如何获取当前登录用户的id值<ul><li>我们可以使用<code>ThreadLocal</code>来解决这个问题</li></ul></li><li>在学习ThreadLocal之前，我们需要先确认一个事情，就是客户端发送的每次http请求，对应的在服务端都会分配一个新的线程来处理，在处理过程中涉及到下面类中的方法都属于相同的一个线程:<ol><li><code>LocalCheekFilter</code>中的<code>doFilter</code>方法</li><li><code>EmployeeController</code>中的<code>update</code>方法</li><li><code>MyMetaObjectHandler</code>中的<code>updateFill</code>方法</li></ol></li></ul><p>现在我们在这三个方法中添加日志输出测试</p><p><code>Thread.currentThread().getId();</code>获取当前线程id</p><ul><li>doFilter</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//强转</span></span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">    <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.获取本次请求的URI</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">    log.info(<span class="string">&quot;拦截到请求：&#123;&#125;&quot;</span>, requestURI);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义不需要处理的请求</span></span><br><span class="line">    String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">            <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/front/**&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.判断本次请求是否需要处理</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">check</span> <span class="operator">=</span> check(urls, requestURI);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.如果不需要处理，则直接放行</span></span><br><span class="line">    <span class="keyword">if</span> (check) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;本次请求：&#123;&#125;，不需要处理&quot;</span>, requestURI);</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.判断登录状态，如果已登录，则直接放行</span></span><br><span class="line">    <span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;用户已登录，id为&#123;&#125;&quot;</span>, request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>));</span><br><span class="line">        <span class="comment">//在这里获取一下线程id</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">        log.info(<span class="string">&quot;doFilter的线程id为：&#123;&#125;&quot;</span>, id);</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.如果未登录则返回未登录结果,通过输出流方式向客户端页面响应数据</span></span><br><span class="line">    log.info(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;用户id&#123;&#125;&quot;</span>, request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>));</span><br><span class="line">    response.getWriter().write(JSON.toJSONString(Result.error(<span class="string">&quot;NOTLOGIN&quot;</span>)));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>update</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Employee employee, HttpServletRequest request)</span> &#123;</span><br><span class="line">    log.info(employee.toString());</span><br><span class="line">    <span class="comment">//获取线程id</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">    log.info(<span class="string">&quot;update的线程id为：&#123;&#125;&quot;</span>, id);</span><br><span class="line">    employeeService.updateById(employee);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;员工信息修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>updateFill</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;公共字段自动填充(update)...&quot;</span>);</span><br><span class="line">    log.info(metaObject.toString());</span><br><span class="line">    <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">    log.info(<span class="string">&quot;updateFill的线程id为：&#123;&#125;&quot;</span>, id);</span><br><span class="line">    metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">    metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">    metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, <span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line">    metaObject.setValue(<span class="string">&quot;createUser&quot;</span>, <span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新启动服务器，登录页面并编辑员工信息（什么都不需要动），随后点击保存，随后查看日志输出信息</p><blockquote><p>com.blog.filter.LoginCheckFilter         : doFilter的线程id为：34<br>com.blog.controller.EmployeeController   : update的线程id为：34<br>com.blog.common.MyMetaObjectHandler      : updateFill的线程id为：34</p></blockquote><p>发现这三者确实是在同一个线程中</p><p>那么什么是<code>ThreadLocal</code>?</p><ul><li><code>ThreadLocal</code>并不是一个<code>Thread</code>，而是<code>Thread</code>的局部变量</li><li>当使用<code>ThreadLocal</code>维护变量时，<code>ThreadLocal</code>为每个使用该变量的线程提供独立的变量副本</li><li>所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本</li><li><code>ThreadLocal</code>为每个线程提供单独一份存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，线程外则不能访问。</li></ul><p>总结来说：<code>ThreadLocal</code>可以获取当前线程的值，并保存起来，在当前线程运行时，你也可以在其他地方获取它的值。</p><p>ThreadLocal常用方法:</p><ul><li><code>public void set(T value)</code> 设置当前线程的线程局部变量的值</li><li><code>public T get()</code> 返回当前线程所对应的线程局部变量的值</li></ul><p>那么我们如何用ThreadLocal来解决我们上述的问题呢？</p><ul><li>我们可以在<code>LoginCheckFilter</code>的<code>doFilter</code>方法中获取当前登录用户id，并调用<code>ThreadLocal</code>的<code>set</code>方法来设置当前线程的线程局部变量的值（用户id)，然后在<code>MyMetaObjectHandler</code>的<code>updateFill</code>方法中调用<code>ThreadLocal</code>的<code>get</code>方法来获得当前线程所对应的线程局部变量的值（用户id)。</li></ul><p>具体实现</p><ul><li>在com.blog.common包下新建BaseContext类</li><li>作用：基于ThreadLocal的封装工具类，用于保护和获取当前用户id</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于ThreadLocal的工具类</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;Long&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置id</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setCurrentId</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        threadLocal.set(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取id</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getCurrentId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后在<code>LoginCheckFilterInterceptor</code>类中获取id</p><p>为什么在这里获取id呢，因为当用户已经登录之后，id是存储在session域中的，所以这时候获取很方便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断登录状态，如果已登录，放行</span></span><br><span class="line"><span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">    log.info(<span class="string">&quot;用户已登录&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据session获取我们存的id值</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    BaseContext.setCurrentId(empId);</span><br><span class="line"></span><br><span class="line">    filterChain.doFilter(request,response);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置<code>employee</code>的<code>id</code>到<code>session</code>域中，这是在登录的时候做的，详情可见如下代码倒数第三行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="comment">// @RequestBody可以接收json字符串</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Employee&gt; <span class="title function_">login</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line">        <span class="comment">// 1、对密码进行MD5加密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> employee.getPassword();   <span class="comment">// 获得密码</span></span><br><span class="line"><span class="comment">//        DigestUtils.md5DigestAsHex(输入流/字节数组)  所以需要将字符串转为字节</span></span><br><span class="line">        password = DigestUtils.md5DigestAsHex(password.getBytes());     <span class="comment">// 利用DigestUtils工具类进行加密</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、查找用户是否存在(利用MP编写)</span></span><br><span class="line">        LambdaQueryWrapper&lt;Employee&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// Employee::getName数据库中的name数据,employee.getName()传入的name数据</span></span><br><span class="line">        lqw.eq(Employee::getUsername,employee.getUsername());</span><br><span class="line">        <span class="comment">// 因为name设定了unique(唯一约束)，所以返回的对象唯一</span></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> employeeService.getOne(lqw);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、不存在则返回登录失败msg</span></span><br><span class="line">        <span class="keyword">if</span> (emp == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、验证密码是否正确(加密后的密码与数据库内的密码比对[数据库的密码是加密过的])</span></span><br><span class="line">        <span class="keyword">if</span> (!(password.equals(emp.getPassword())))&#123;</span><br><span class="line">            <span class="comment">// 如果密码相同，说明是正确的，继续往下判断，如果不同，说明密码是错误的，在这里结束</span></span><br><span class="line">            <span class="keyword">return</span> Result.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、验证员工状态，是否可用</span></span><br><span class="line">        <span class="keyword">if</span> (emp.getStatus() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 0不可用，1可用，当不可用时，则结束，否则继续往下判断</span></span><br><span class="line">            <span class="keyword">return</span> Result.error(<span class="string">&quot;账号已禁用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6、将ID数据存到session域中传递过去</span></span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;employee&quot;</span>,emp.getId());</span><br><span class="line">        <span class="keyword">return</span> Result.success(emp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在<code>MyMetaObjectHandler</code>类中，添加设置<code>id</code>的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *元数据对象处理器用于解决公共字段数据统一处理的问题</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充(insert)&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createUser&quot;</span>,BaseContext.getCurrentId());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>,BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充(update)&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>,BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新启动服务器，并登录一个非管理员账户，然后进行添加用户操作，观察数据库中的<code>updateUser</code>是否符合预期</p><p>在验证之后发现，符合预期</p><p>至此，公共字段填充功能，我们就完成了</p><h1 id="新增菜品分类"><a href="#新增菜品分类" class="headerlink" title="新增菜品分类"></a>新增菜品分类</h1><h2 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h2><ul><li>后台系统中可以管理分类信息，分类包括两种类型，分别是菜品分类和套餐分类</li><li>当我们在后台系统中添加菜品时，需要选择一个菜品分类</li><li>当我们在后台系统中天啊及一个套餐时，需要选择一个套餐分类</li><li>在移动端也会按照菜品分类和套餐分类来战士对应的菜品和套餐</li></ul><p>可以在后台系统的分类管理页面分别添加菜品分类和套餐分类，如下</p><p><img src="https://s2.loli.net/2023/08/14/wKTbYry3sEvl4iu.png" alt="image-20230725102555844"></p><p>新增菜品分类表单</p><p><img src="https://s2.loli.net/2023/08/14/12YzgbPGfqthyQr.png" alt="image-20230725102613006"></p><p>新增套餐分类表单</p><p><img src="https://s2.loli.net/2023/08/14/Uo9MRndCc7XarVf.png" alt="image-20230725102629432"></p><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>简单浏览一下category表中的数据</p><table><thead><tr><th align="center">Field</th><th align="center">Type</th><th align="center">Collation</th><th align="center">Null</th><th align="center">Key</th><th align="center">Default</th><th align="center">Comment</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center">PRI</td><td align="center">(NULL)</td><td align="center">主键</td></tr><tr><td align="center">type</td><td align="center">int</td><td align="center">(NULL)</td><td align="center">YES</td><td align="center"></td><td align="center"></td><td align="center">类型 1 菜品分类 2 套餐分类</td></tr><tr><td align="center">name</td><td align="center">varchar(64)</td><td align="center">utf8_bin</td><td align="center">NO</td><td align="center">UNI</td><td align="center">(NULL)</td><td align="center">分类名称</td></tr><tr><td align="center">sort</td><td align="center">int</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">0</td><td align="center">顺序</td></tr><tr><td align="center">create_time</td><td align="center">datetime</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">创建时间</td></tr><tr><td align="center">update_time</td><td align="center">datetime</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">更新时间</td></tr><tr><td align="center">create_user</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">创建人</td></tr><tr><td align="center">update_user</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">修改人</td></tr></tbody></table><p>id是主键，name分类名称是unique唯一的，type为1表示菜品分类，type为2表示套餐分类</p><h3 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h3><p>在开发业务之前，先将需要用到的类和接口的基本结构先创建好</p><p>1、实体类<strong>Category</strong>，对应上表来创建<br>菜品分类也有<code>createUser</code>和<code>createTime</code>等字段，也可以用上面的公共字段自动填充</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Category</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//类型 1 菜品分类 2 套餐分类</span></span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//分类名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//顺序</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新时间</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建人</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改人</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、Mapper接口<strong>CategoryMapper</strong><br>跟之前的EmployeeMapper没有本质上的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Category&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、业务层接口<strong>CategoryService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Category&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、业务层实现类<strong>CategoryServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CategoryMapper, Category&gt; <span class="keyword">implements</span> <span class="title class_">CategoryService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、控制层<strong>CategoryController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/category&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流程分析-2"><a href="#流程分析-2" class="headerlink" title="流程分析"></a>流程分析</h2><ol><li>页面发送ajax请求，将新增分类窗口输入的数据以json形式提交给服务端</li><li>服务端Controller接收页面提交的数据并调用Service将数据存储到数据库</li><li>Service调用Mapper操作数据库，保存数据</li></ol><p>我们先尝试监测一下前端给我们提供的是什么请求，以及会提交什么数据，打开开发者工具，监测NetWork，点击新增<code>菜品分类</code>表单的确定按钮</p><ul><li><p>请求方式</p><p>  请求网址: <code>http://localhost/category</code></p><p>  请求方法: <code>POST</code></p></li><li><p>json数据</p><p>  {name: “川菜”, type: “1”, sort: “10”}</p></li></ul><p>点击新增<code>套餐分类</code>表单的确定按钮</p><ul><li><p>请求方式</p><p>  请求网址: <code>http://localhost/category</code><br>  请求方法: <code>POST</code></p></li><li><p>json数据</p><p>  {name: “好吃的套餐”, type: “2”, sort: “10”}</p></li></ul><p>新增菜品分类和新增套餐分类请求的<code>服务端地址</code>和提交的<code>json数据</code>结构<code>相同</code>，所以服务端只需要提供一个方法统一处理即可</p><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><p>服务端只需要将接收到的<code>json</code>数据添加到数据库中，并响应一个成功的提示信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;category:&#123;&#125;&quot;</span>, category);</span><br><span class="line">    categoryService.save(category);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;新增分类成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但通过查看前端代码，发现显示的信息在前端<strong>写死了</strong>，只要最后的状态码是<strong>成功状态码</strong></p><p>则均显示<code>分类添加成功！</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;分类添加成功！&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如果我们想要添加菜品和添加套餐显示不同的响应结果，可以按照如下方式修改代码</p><p>前端代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(res.<span class="property">data</span>)</span><br></pre></td></tr></table></figure><p>后端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> Result.success(category.getType() == <span class="number">1</span> ? <span class="string">&quot;添加菜品分类成功！&quot;</span> : <span class="string">&quot;添加套餐分类成功！&quot;</span>);</span><br></pre></td></tr></table></figure><p>值得注意的一点是：当初建表的时候<code>name</code>是<code>unique</code>唯一的，如果我们尝试存入<strong>相同的</strong>菜品名称，则<strong>会报错</strong>，提示信息大概就是有字段名重复了，跟我们前面写过的全局异常处理器要处理的操作一样，所以会帮我们处理这个异常</p><h1 id="分类信息分页查询"><a href="#分类信息分页查询" class="headerlink" title="分类信息分页查询"></a>分类信息分页查询</h1><p>与之前的员工信息分页查询类似</p><h2 id="流程分析-3"><a href="#流程分析-3" class="headerlink" title="流程分析"></a>流程分析</h2><p>按照惯例，我们还是先来分析一下流程</p><ol><li>页面发送Ajax请求，将分页查询的参数（page、pageSize）提交到服务端</li><li>服务端Controller接受到页面提交的数据之后，调用Service进行查询</li><li>Service调用Mapper操作数据库，查询分页数据</li><li>Controller将查询到的分页数据响应给页面</li><li>页面接收分页数据，并通过ElementUI的Table组件战士到页面上</li></ol><h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><p>在CategorYController类中编写page方法</p><p>这里传递的参数是地址上携带的参数，所以不需要<code>@Pathvariable</code>或者<code>@RequestBody</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">    <span class="comment">//分页构造器</span></span><br><span class="line">    Page&lt;Category&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    <span class="comment">//条件查询器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加排序条件</span></span><br><span class="line">    queryWrapper.orderByDesc(Category::getSort);</span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    categoryService.page(pageInfo, queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> Result.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新启动服务器，查看一下效果</p><p><img src="https://s2.loli.net/2023/08/14/OYgpVxRsziUD74J.png" alt="image-20230725140007517"></p><h2 id="前端代码分析-1"><a href="#前端代码分析-1" class="headerlink" title="前端代码分析"></a>前端代码分析</h2><p>页面加载完毕之后调用created钩子函数<br>钩子函数内又调用的是init进行初始化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> init () &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">getCategoryPage</span>(&#123;<span class="string">&#x27;page&#x27;</span>: <span class="variable language_">this</span>.<span class="property">page</span>, <span class="string">&#x27;pageSize&#x27;</span>: <span class="variable language_">this</span>.<span class="property">pageSize</span>&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">String</span>(res.<span class="property">code</span>) === <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">//将服务端查询到的数据赋给tableData，然后就能看到了</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tableData</span> = res.<span class="property">data</span>.<span class="property">records</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">counts</span> = <span class="title class_">Number</span>(res.<span class="property">data</span>.<span class="property">total</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求出错了：&#x27;</span> + err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送的请求是get请求，请求参数值为<code>this.page</code>和<code>this.pageSize</code>，默认值分别为1和10</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询列表接口</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getCategoryPage</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/category/page&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    params</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="删除分类"><a href="#删除分类" class="headerlink" title="删除分类"></a>删除分类</h1><h2 id="需求分析-2"><a href="#需求分析-2" class="headerlink" title="需求分析"></a>需求分析</h2><ul><li>在分类管理列表页面，可以对某个分类进行删除操作</li><li>需要注意的是：当分类关联了菜品或者套餐时，此分类将不允许被删除</li></ul><h2 id="流程分析-4"><a href="#流程分析-4" class="headerlink" title="流程分析"></a>流程分析</h2><p>按照惯例，继续分析一遍流程</p><ol><li>页面发送ajax请求，将参数(id)提交给服务端</li><li>服务端Controller接收页面提交的数据，并调用Service删除数据</li><li>Service调用Mapper操作数据库</li></ol><h2 id="代码初步实现"><a href="#代码初步实现" class="headerlink" title="代码初步实现"></a>代码初步实现</h2><p>在CategoryController类上添加delete方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">delete</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;分类信息删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端代码分析-2"><a href="#前端代码分析-2" class="headerlink" title="前端代码分析"></a>前端代码分析</h2><p>删除按钮绑定了<code>deleteHandle</code>函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;delBut non&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">&quot;deleteHandle(scope.row.id)&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    删除</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里给了一个提示信息防止误操作<br>然后使用<code>deleCategory</code>函数发送delete请求<br>若服务端返回的状态为<code>success</code>，则状态码为1，删除成功<br>否则删除失败</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">deleteHandle</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$confirm(<span class="string">&#x27;此操作将永久删除该文件, 是否继续?&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;confirmButtonText&#x27;</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cancelButtonText&#x27;</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">deleCategory</span>(id).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;删除成功！&#x27;</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">handleQuery</span>()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求出错了：&#x27;</span> + err)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>deleCategory方法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除当前列的接口</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">deleCategory</span> = (<span class="params">id</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/category&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;id&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h2><p><img src="https://s2.loli.net/2023/08/14/msb6yEkre39CYL2.png" alt="image-20230725150144560"></p><h2 id="代码功能完善"><a href="#代码功能完善" class="headerlink" title="代码功能完善"></a>代码功能完善</h2><p>当菜品分类或套餐分类关联了其他菜品或套餐时，该分类将不允许被删除</p><ul><li>那么我们如何实现这个功能呢？<ul><li>其实也很简单，我们只需要在删除的时候，拿着当前分类的id值，去对应的菜品&#x2F;套餐表中进行查询，如果能查询到数据，则说明该分类关联了菜品，不允许被删除，否则则可以删除</li></ul></li></ul><p>那么明确了思路之后，我们就来写代码</p><ul><li>首先我们需要根据数据表创建菜品和套餐对应的模型类以及对应的Mapper和Service方法</li></ul><p><strong>Dish(菜品)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 菜品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dish</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品分类id</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品价格</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品码</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//描述信息</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//0 停售 1 起售</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//顺序</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Setmeal(套餐)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Setmeal</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//分类id</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐价格</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态 0:停用 1:启用</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//编码</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//描述信息</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>DishMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.Dish;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Dish&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SetmealMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.Setmeal;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Setmeal&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>DishService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.Dish;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Dish&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SetMealService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.Setmeal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetMealService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Setmeal&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>DishServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.Dish;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.mapper.DishMapper;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.service.DishService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;DishMapper, Dish&gt; <span class="keyword">implements</span> <span class="title class_">DishService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SetMealService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.Setmeal;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.mapper.SetmealMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetMealService</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;SetmealMapper, Setmeal&gt; <span class="keyword">implements</span> <span class="title class_">com</span>.eastwind.service.SetMealService &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在common包下新增<code>CustomException</code>类<br>该类用于封装我们的自定义异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomException</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在我们的全局异常处理器类中，使用<code>exceptionHandler</code>处理<code>CustomerException</code>异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(CustomException.class)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(CustomException ex)</span>&#123;</span><br><span class="line">    log.info(ex.getMessage());  <span class="comment">// 得到错误信息</span></span><br><span class="line">    <span class="keyword">return</span> Result.error(ex.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在CategoryService接口中自己写一个<code>delete</code>方法</p><p>在CategoryServiceImpl中来写具体业务逻辑<br>我们需要在删除数据之前，根据<code>id</code>值，去<code>Dish</code>表和<code>Setmeal</code>表中查询是否关联了数据<br>如果存在关联数据，则不能删除，并抛一个异常<br>如果不存在关联数据（也就是查询到的数据条数为0），正常删除即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.common.CustomException;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.Category;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.Dish;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.Setmeal;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.mapper.CategoryMapper;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.service.CategoryService;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.service.DishService;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.service.SetMealService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CategoryMapper, Category&gt; <span class="keyword">implements</span> <span class="title class_">CategoryService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DishService dishService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SetMealService setMealService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; dishLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        dishLambdaQueryWrapper.eq(Dish::getCategoryId,id);</span><br><span class="line">        <span class="type">int</span> <span class="variable">disCount</span> <span class="operator">=</span> dishService.count(dishLambdaQueryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (disCount &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;当前分类下关联了菜品，不能删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;Setmeal&gt; setmealLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        setmealLambdaQueryWrapper.eq(Setmeal::getCategoryId,id);</span><br><span class="line">        <span class="type">int</span> <span class="variable">setmealCount</span> <span class="operator">=</span> setMealService.count(setmealLambdaQueryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (setmealCount &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;当前分类下关联了套餐，不能删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果没有找到关联的，就正常删除</span></span><br><span class="line">        <span class="built_in">super</span>.removeById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后记得在<code>controller</code>中调用我们新写的<code>delete</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> Long ids)</span>&#123;</span><br><span class="line">    <span class="comment">// delete方法是我们自己写的更新后的，目的是为了对菜品和套餐关联的产品做一个保护</span></span><br><span class="line">    categoryService.delete(ids);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;分类信息删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/14/2Xt7EPi4DHLswor.png" alt="image-20230725182504491"></p><h1 id="修改分类"><a href="#修改分类" class="headerlink" title="修改分类"></a>修改分类</h1><h2 id="需求分析-3"><a href="#需求分析-3" class="headerlink" title="需求分析"></a>需求分析</h2><p>在分类管理列表页面点击修改按钮，弹出修改窗口，在修改窗口回显分类信息并进行修改，最后点击确定按钮完成修改操作<img src="https://s2.loli.net/2023/08/14/MJOxkhWiGHZlSr1.png" alt="image-20230725140612683"></p><h2 id="回显效果"><a href="#回显效果" class="headerlink" title="回显效果"></a>回显效果</h2><p>修改按钮绑定了一个<code>editHandle</code>函数，并传入了当前行数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;blueBug&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">&quot;editHandle(scope.row)&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    修改</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那我们再来看看这个<code>editHandle</code>函数做了什么<br>将当前行的数据赋给了classData下的<code>name</code>和<code>sort</code>属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">editHandle</span>(<span class="params">dat</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">classData</span>.<span class="property">title</span> = <span class="string">&#x27;修改分类&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">action</span> = <span class="string">&#x27;edit&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">classData</span>.<span class="property">name</span> = dat.<span class="property">name</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">classData</span>.<span class="property">sort</span> = dat.<span class="property">sort</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">classData</span>.<span class="property">id</span> = dat.<span class="property">id</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">classData</span>.<span class="property">dialogVisible</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表单中又使用v-model实现双向绑定，这样就实现了数据回显</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;demo-form-inline&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label-width</span>=<span class="string">&quot;100px&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;分类名称：&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">&quot;classData.name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">placeholder</span>=<span class="string">&quot;请输入分类名称&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxlength</span>=<span class="string">&quot;14&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;排序：&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;classData.sort&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入排序&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="代码开发"><a href="#代码开发" class="headerlink" title="代码开发"></a>代码开发</h2><p>修改操作是发送PUT请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改接口</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">editCategory</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/category&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; ...params &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;修改分类信息为：&#123;&#125;&quot;</span>, category);</span><br><span class="line">    categoryService.updateById(category);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;修改分类信息成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文件上传与下载"><a href="#文件上传与下载" class="headerlink" title="文件上传与下载"></a>文件上传与下载</h1><h2 id="文件上传简介"><a href="#文件上传简介" class="headerlink" title="文件上传简介"></a>文件上传简介</h2><ul><li>文件上传，也叫upload，是指将本地图片、视频、音频等文件上传到服务器中，可以供其他用户浏览或下载的过程</li><li>文件上传时，对页面的form表单有如下要求：<ol><li><code>method=&quot;post&quot;</code>，采用post方式提交数据</li><li><code>enctype=&quot;multipart/form-data&quot;</code>，采用multipart格式上传文件</li><li><code>type=&quot;file&quot;</code>，使用input的file控件上传</li></ol></li></ul><p>目前一些前端组件库也提供了相应的上传组件，但是底层原理还是基于form表单的文件上传，这里我们就用提供好的组件就行了<br>我们把这段代码放在<code>backend/page/demo</code>目录下，命名为<code>upload.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../../plugins/element-ui/index.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../../styles/common.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../../styles/page.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;addBrand-container&quot;</span> <span class="attr">id</span>=<span class="string">&quot;food-add-app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-upload</span> <span class="attr">class</span>=<span class="string">&quot;avatar-uploader&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">action</span>=<span class="string">&quot;/common/upload&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">:show-file-list</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">:on-success</span>=<span class="string">&quot;handleAvatarSuccess&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">:before-upload</span>=<span class="string">&quot;beforeUpload&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">ref</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">&quot;imageUrl&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;imageUrl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-plus avatar-uploader-icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../plugins/vue/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入组件库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../plugins/element-ui/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入axios --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../plugins/axios/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../js/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#food-add-app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">imageUrl</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            handleAvatarSuccess (response, file, fileList) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">imageUrl</span> = <span class="string">`/common/download?name=<span class="subst">$&#123;response.data&#125;</span>`</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            beforeUpload (file) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(file)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> suffix = file.<span class="property">name</span>.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> size = file.<span class="property">size</span> / <span class="number">1024</span> / <span class="number">1024</span> &lt; <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>([<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;jpeg&#x27;</span>,<span class="string">&#x27;jpg&#x27;</span>].<span class="title function_">indexOf</span>(suffix) &lt; <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;上传图片只支持 png、jpeg、jpg 格式！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">upload</span>.<span class="title function_">clearFiles</span>()</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(!size)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;上传文件大小不能超过 2MB!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> file</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>服务端要接收客户端页面上传的文件，通常都会使用Apache的两个组件:</p><ul><li><code>commons-fileupload</code></li><li><code>commons-io</code></li></ul><p>Spring框架在spring-web包中对文件上传进行了封装，大大简化了服务端代码，我们只需要在Controller的方法中声明一个MultipartFile类型的参数即可接收上传的文件，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.eastwind.common.Result;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/common&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span>&#123;</span><br><span class="line">        <span class="comment">// 输出文件</span></span><br><span class="line">        log.info(file.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写完这段代码之后，报了一个错误：<strong>The field file exceeds its maximum permitted size of 1048576 bytes</strong><br> 原因是因为<code>SpringBoot</code>内嵌<code>tomcat</code>默认所能上传的文件大小为<strong>1M</strong>,超出这个就会报错。</p><p>解决方法：</p><p>配置application.yml文件(把文件大小更新至30MB，再次上传，发现没有问题了)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment"># 端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 数据连接池</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:13306/db_takeout?zeroDateTimeBehavior=convertToNull</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">zjh97867860</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">30MB</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">30MB</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># 在映射实体类或者属性时，将数据库中的表名或字段名中的下划线去掉，按照驼峰命名映射</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 日志</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="comment"># 生成策略</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">assign_id</span></span><br></pre></td></tr></table></figure><p>启动服务器，登陆之后访问<code>http://localhost/backend/page/demo/upload.html</code> ，看看日志信息会不会输出获取文件：……</p><p><code>org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@4274086d</code></p><h2 id="文件下载简介"><a href="#文件下载简介" class="headerlink" title="文件下载简介"></a>文件下载简介</h2><ul><li><p>文件下载，也称为了download，是指将文件从服务器传输到本地计算机的过程</p></li><li><p>通过浏览器进行文件下载，通常有两种表现形式</p><ol><li>以附件形式下载，弹出保存对话框，将文件保存到指定磁盘目录</li><li>直接在浏览器中打开</li></ol></li><li><p>通过浏览器进行文件下载，本质上就是服务端将文件以流的形式写回浏览器的过程</p><p>  在编写代码之前，我们先来设置一下<strong>拦截路径</strong>，将common设置为不拦截，这样文件上传和下载的请求就都不会被拦截了。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义不需要被拦截的请求</span></span><br><span class="line">String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">        <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/front/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/common/**&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>随后将我们上传的临时文件<strong>转存</strong>到指定位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.eastwind.common.Result;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/common&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span>&#123;</span><br><span class="line">        <span class="comment">// 输出文件</span></span><br><span class="line">        log.info(file.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置文件转存</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\test.jpg&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，我们上传一张图片，去D盘查看，如果没有，就是代码写错了</p><p>文件转存的位置改为动态可配置的，通过配置文件的方式指定，我们在<code>application.yml</code>文件中加入以下内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置动态文件生成路径</span></span><br><span class="line"><span class="attr">takeout:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">D:\\takeout\\img\\</span></span><br></pre></td></tr></table></figure><ul><li>使用 @Value(“${reggie.path}”)读取到配置文件中的动态转存位置</li><li>使用uuid方式重新生成文件名，避免文件名重复造成文件覆盖</li><li>通过获取原文件名来截取文件后缀</li><li>注意事项：我们需要先判断一下文件目录是否存在，如果不存在则先创建</li><li>最后的返回值是将我们生成的新文件名返回给前端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.eastwind.common.Result;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/common&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;takeout.path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String basePath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span>&#123;</span><br><span class="line">        <span class="comment">// 输出文件</span></span><br><span class="line">        log.info(file.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断路径是否存在</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basePath);</span><br><span class="line">        <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">            <span class="comment">// 如果不存在</span></span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取传入的原文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="comment">// 获取文件后缀</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="comment">// 为了防止出现重复的文件名，我们需要使用UUID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID() + suffix;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置文件转存</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + fileName));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.success(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件下载代码的实现"><a href="#文件下载代码的实现" class="headerlink" title="文件下载代码的实现"></a>文件下载代码的实现</h2><p>前端页面的ElementUI的upload组件会在上传完图片后，触发img组件发送请求，服务端以流的方式（输出流）将文件写回给浏览器，在浏览器中展示图片</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-upload</span> <span class="attr">class</span>=<span class="string">&quot;avatar-uploader&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">action</span>=<span class="string">&quot;/common/upload&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:show-file-list</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:on-success</span>=<span class="string">&quot;handleAvatarSuccess&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:before-upload</span>=<span class="string">&quot;beforeUpload&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">ref</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">&quot;imageUrl&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;imageUrl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-plus avatar-uploader-icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义前端发送回显图片请求的地址<br>通过这个url我们可以看出，请求路径为<code>/common/download</code>，且发送的是GET请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handleAvatarSuccess (response, file, fileList) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">imageUrl</span> = <span class="string">`/common/download?name=<span class="subst">$&#123;response.data&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后端处理"><a href="#后端处理" class="headerlink" title="后端处理"></a>后端处理</h3><p>在<code>CommonController</code>类中添加<code>download</code>方法</p><ol><li>通过输入流读取文件内容</li><li>通过输出流将文件写回浏览器，在浏览器展示图片</li><li>关闭输入输出流，释放资源</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String name, HttpServletResponse httpServletResponse)</span> &#123;</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 输入流，通过输入流读取文件内容</span></span><br><span class="line">        fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(basePath + name);</span><br><span class="line">        <span class="comment">// 响应输出流，将数据输出到响应头是哪个</span></span><br><span class="line">        outputStream = httpServletResponse.getOutputStream();</span><br><span class="line">        <span class="comment">// 响应类型是一个image</span></span><br><span class="line">        httpServletResponse.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">// 每次读取1024个字节，并输出到响应头中</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fileInputStream.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            outputStream.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">            <span class="comment">// 刷新流</span></span><br><span class="line">            outputStream.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fileInputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                fileInputStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (outputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                outputStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候我们启动服务器测试一下</p><img src="https://s2.loli.net/2023/08/14/wrpx9DX41vNAnUW.png" alt="image-20230726153714577" style="zoom: 25%;" /><p>此时就发现，数据已经成功的回显到了页面上</p><h1 id="新增菜品"><a href="#新增菜品" class="headerlink" title="新增菜品"></a>新增菜品</h1><h2 id="需求分析-4"><a href="#需求分析-4" class="headerlink" title="需求分析"></a>需求分析</h2><ol><li>后台系统中可以管理菜品信息，通过新增功能来添加一个新的菜品</li><li>在添加菜品时需要选择当前菜品所属的菜品分类，并且需要上传当前的菜品图片</li><li>在移动端会按照菜品分类来展示对应的菜品信息（前端的活儿，跟咱没啥太大关系）</li></ol><p><img src="https://s2.loli.net/2023/08/14/WAwbEdiSCPLeJ3M.png" alt="image-20230727081341190"></p><h2 id="数据模型-1"><a href="#数据模型-1" class="headerlink" title="数据模型"></a>数据模型</h2><p>Dish表(菜品表)</p><p>is_deleted是逻辑删除，关于逻辑删除，可以回看大佬这篇MP的<code>https://cyborg2077.github.io/2022/09/20/MyBatisPlus/</code></p><p>DML编程控制</p><table><thead><tr><th align="center">Field</th><th align="center">Type</th><th align="center">Collation</th><th align="center">Null</th><th align="center">Key</th><th align="center">Default</th><th align="center">Comment</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center">PRI</td><td align="center">(NULL)</td><td align="center">主键</td></tr><tr><td align="center">name</td><td align="center">varchar(64)</td><td align="center">utf8_bin</td><td align="center">NO</td><td align="center">UNI</td><td align="center">(NULL)</td><td align="center">菜品名称</td></tr><tr><td align="center">category_id</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">菜品分类id</td></tr><tr><td align="center">price</td><td align="center">decimal(10,2)</td><td align="center">(NULL)</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">菜品价格</td></tr><tr><td align="center">code</td><td align="center">varchar(64)</td><td align="center">utf8_bin</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">商品码</td></tr><tr><td align="center">image</td><td align="center">varchar(200)</td><td align="center">utf8_bin</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">图片</td></tr><tr><td align="center">description</td><td align="center">varchar(400)</td><td align="center">utf8_bin</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">描述信息</td></tr><tr><td align="center">status</td><td align="center">int</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">1</td><td align="center">0 停售 1 起售</td></tr><tr><td align="center">sort</td><td align="center">int</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">0</td><td align="center">顺序</td></tr><tr><td align="center">create_time</td><td align="center">datetime</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">创建时间</td></tr><tr><td align="center">update_time</td><td align="center">datetime</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">更新时间</td></tr><tr><td align="center">create_user</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">创建人</td></tr><tr><td align="center">update_user</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">修改人</td></tr><tr><td align="center">is_deleted</td><td align="center">int</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">0</td><td align="center">是否删除</td></tr></tbody></table><p>dish_flavor表(菜品口味表)</p><table><thead><tr><th align="center">Field</th><th align="center">Type</th><th align="center">Collation</th><th align="center">Null</th><th align="center">Key</th><th align="center">Default</th><th align="center">Comment</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center">PRI</td><td align="center">(NULL)</td><td align="center">主键</td></tr><tr><td align="center">dish_id</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">菜品</td></tr><tr><td align="center">name</td><td align="center">varchar(64)</td><td align="center">utf8_bin</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">口味名称</td></tr><tr><td align="center">value</td><td align="center">varchar(500)</td><td align="center">utf8_bin</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">口味数据list</td></tr><tr><td align="center">create_time</td><td align="center">datetime</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">创建时间</td></tr><tr><td align="center">update_time</td><td align="center">datetime</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">更新时间</td></tr><tr><td align="center">create_user</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">创建人</td></tr><tr><td align="center">update_user</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">修改人</td></tr><tr><td align="center">is_deleted</td><td align="center">int</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">0</td><td align="center">是否删除</td></tr></tbody></table><p><img src="https://s2.loli.net/2023/08/14/NhxRV32JzsdG6B8.png" alt="image-20230727081936844"></p><p>我们先创建对应的实体类Dish和DishFlavor</p><p>Dish</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 菜品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dish</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品分类id</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品价格</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品码</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//描述信息</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//0 停售 1 起售</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//顺序</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DishFlavor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 菜品口味</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishFlavor</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品id</span></span><br><span class="line">    <span class="keyword">private</span> Long dishId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//口味名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//口味数据list</span></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的实体类都是对应的数据库中的内容，没什么好说的</p><p>然后编写对应的Mapper、Service、Controller</p><p>在前面已经写过了Dish对应的Mapper、Service了，这里就不再写了，格式都是一成不变的</p><p>DisFlavorMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.DishFlavor;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DisFlavorMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;DishFlavor&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DisFlavorService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.DishFlavor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DisFlavorService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;DishFlavor&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DisFlavorServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.DishFlavor;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.mapper.DisFlavorMapper;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.service.DisFlavorService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DisFlavorServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;DisFlavorMapper, DishFlavor&gt; <span class="keyword">implements</span> <span class="title class_">DisFlavorService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编写DishController类</p><p>为什么只写一个DishController类呢，这两个可以放在一起处理，一个Dish(菜品)，一个DisFlavor(菜品口味)</p><p>这两个可以放在一起处理，因为在一个地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.eastwind.service.DisFlavorService;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.service.DishService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 菜品管理</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/dish&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishService dishService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DisFlavorService disFlavorService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="梳理交互过程"><a href="#梳理交互过程" class="headerlink" title="梳理交互过程"></a>梳理交互过程</h2><p>按照惯例，在开发代码之前，我们先来梳理一下整个流程</p><ol><li>页面（backend&#x2F;page&#x2F;food&#x2F;add.html）发送ajax请求，请求服务端获取菜品分类数据并展示到下拉框中</li><li>页面发送请求进行图片上传，请求服务端将图片保存到服务器</li><li>页面发送请求进行图片下载，并回显上传的图片</li><li>点击保存按钮，发送ajax请求，将菜品相关数据以json形式提交到服务端</li></ol><p>所以开发新增菜品功能，其实就是在服务端编写代码去处理前端发送的这4次请求即可</p><h2 id="查询分类数据"><a href="#查询分类数据" class="headerlink" title="查询分类数据"></a>查询分类数据</h2><p>前端分析</p><p>在页面加载完成后，执行以下几个方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getDishList</span>()</span><br><span class="line">    <span class="comment">// 口味临时数据</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getFlavorListHand</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = <span class="title function_">requestUrlParam</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    <span class="comment">// 根据id确定是新增还是修改</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">actionType</span> = <span class="variable language_">this</span>.<span class="property">id</span> ? <span class="string">&#x27;edit&#x27;</span> : <span class="string">&#x27;add&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">id</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getDishList</p><p>根据响应状态码来判断操作是否成功，成功则将返回的数据赋给dishList，将获取到的菜品分类数据展示到下拉框中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">getDishList () &#123;</span><br><span class="line">    <span class="title function_">getCategoryList</span>(&#123; <span class="string">&#x27;type&#x27;</span>: <span class="number">1</span> &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dishList</span> = res.<span class="property">data</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getCategoryList(回显数据)</p><p>发送get请求，路径为<code>/category/list</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取菜品分类列表</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getCategoryList</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/category/list&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    params</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>v-for</code>遍历获取到的dishList</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-select</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.categoryId&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;请选择菜品分类&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in dishList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;item.name&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;item.id&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>CategoryController</code>类中，添加list方法<br>我们只需要发送get请求，将数据返回给前端即可，操作很简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;List&lt;Category&gt;&gt; <span class="title function_">list</span><span class="params">(Category category)</span>&#123;</span><br><span class="line">        <span class="comment">// 条件构造器</span></span><br><span class="line">        LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 当传入的category的对象类型不为空时，就用数据库中的Category的类型与category进行类型比较</span></span><br><span class="line">        <span class="comment">// 得到相同的数据</span></span><br><span class="line">        queryWrapper.eq(category.getType() != <span class="literal">null</span>,Category::getType,category.getType());</span><br><span class="line">        <span class="comment">// 添加排序条件，先按照sort的大小升序排序，再按照更新时间降序排序</span></span><br><span class="line">        queryWrapper.orderByAsc(Category::getSort).orderByDesc(Category::getUpdateTime);</span><br><span class="line">        List&lt;Category&gt; list = categoryService.list(queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> Result.success(list);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这时候我们开一下服务器，发现数据就已经出现了</p><img src="https://s2.loli.net/2023/08/14/WJFRmIHLKCdQylG.png" alt="image-20230727100009138" style="zoom:50%;" /><h2 id="接收与回显图片"><a href="#接收与回显图片" class="headerlink" title="接收与回显图片"></a>接收与回显图片</h2><p>刚刚这个功能，在12章的文件上传与下载已经说过了，只需要直接使用即可</p><img src="https://s2.loli.net/2023/08/14/yas1pZ7obSItCqT.png" alt="image-20230727100107523" style="zoom:50%;" /><p>数据在提交到服务器后是这样的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>name<span class="punctuation">:</span> <span class="string">&quot;啊&quot;</span><span class="punctuation">,</span> price<span class="punctuation">:</span> <span class="number">32100</span><span class="punctuation">,</span> code<span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> image<span class="punctuation">:</span> <span class="string">&quot;1eefc77c-12b6-4cd0-8e6e-347d8f92ae84.jpg&quot;</span><span class="punctuation">,</span>…<span class="punctuation">&#125;</span></span><br><span class="line">categoryId<span class="punctuation">:</span><span class="string">&quot;1397844263642378242&quot;</span></span><br><span class="line">code<span class="punctuation">:</span><span class="string">&quot;&quot;</span></span><br><span class="line">description<span class="punctuation">:</span><span class="string">&quot;好吃的彩虹&quot;</span></span><br><span class="line">flavors<span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span>name<span class="punctuation">:</span> <span class="string">&quot;甜味&quot;</span><span class="punctuation">,</span> value<span class="punctuation">:</span> <span class="string">&quot;[&quot;</span>无糖<span class="string">&quot;,&quot;</span>少糖<span class="string">&quot;,&quot;</span>半糖<span class="string">&quot;,&quot;</span>多糖<span class="string">&quot;,&quot;</span>全糖<span class="string">&quot;]&quot;</span><span class="punctuation">,</span> showOption<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">&#125;</span><span class="punctuation">,</span>…<span class="punctuation">]</span></span><br><span class="line"><span class="number">0</span><span class="punctuation">:</span><span class="punctuation">&#123;</span>name<span class="punctuation">:</span> <span class="string">&quot;甜味&quot;</span><span class="punctuation">,</span> value<span class="punctuation">:</span> <span class="string">&quot;[&quot;</span>无糖<span class="string">&quot;,&quot;</span>少糖<span class="string">&quot;,&quot;</span>半糖<span class="string">&quot;,&quot;</span>多糖<span class="string">&quot;,&quot;</span>全糖<span class="string">&quot;]&quot;</span><span class="punctuation">,</span> showOption<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="number">1</span><span class="punctuation">:</span><span class="punctuation">&#123;</span>name<span class="punctuation">:</span> <span class="string">&quot;温度&quot;</span><span class="punctuation">,</span> value<span class="punctuation">:</span> <span class="string">&quot;[&quot;</span>热饮<span class="string">&quot;,&quot;</span>常温<span class="string">&quot;,&quot;</span>去冰<span class="string">&quot;,&quot;</span>少冰<span class="string">&quot;,&quot;</span>多冰<span class="string">&quot;]&quot;</span><span class="punctuation">,</span> showOption<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">&#125;</span></span><br><span class="line">image<span class="punctuation">:</span><span class="string">&quot;1eefc77c-12b6-4cd0-8e6e-347d8f92ae84.jpg&quot;</span></span><br><span class="line">name<span class="punctuation">:</span><span class="string">&quot;啊&quot;</span></span><br><span class="line">price<span class="punctuation">:</span><span class="number">32100</span></span><br><span class="line">status<span class="punctuation">:</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p>价格在前端已被处理，在点击提交按钮后，先执行前端的submitForm方法，并将price做相应的处理（在页面中单位为元，在数据库中存储的单位为分，处理的时候将原有价格乘上了100），再通过ajax请求向后端提供相应的json数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">submitForm</span>(<span class="params">formName, st</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>[formName].<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">        <span class="keyword">let</span> params = &#123;...<span class="variable language_">this</span>.<span class="property">ruleForm</span>&#125;</span><br><span class="line">        <span class="comment">// params.flavors = this.dishFlavors</span></span><br><span class="line">        params.<span class="property">status</span> = <span class="variable language_">this</span>.<span class="property">ruleForm</span> ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">        params.<span class="property">price</span> *= <span class="number">100</span></span><br><span class="line">        params.<span class="property">categoryId</span> = <span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">categoryId</span></span><br><span class="line">        params.<span class="property">flavors</span> = <span class="variable language_">this</span>.<span class="property">dishFlavors</span>.<span class="title function_">map</span>(<span class="function"><span class="params">obj</span> =&gt;</span> (&#123; ...obj, <span class="attr">value</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj.<span class="property">value</span>) &#125;))</span><br><span class="line">        <span class="keyword">delete</span> params.<span class="property">dishFlavors</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">imageUrl</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请上传菜品图片&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">actionType</span> == <span class="string">&#x27;add&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> params.<span class="property">id</span></span><br><span class="line">            <span class="title function_">addDish</span>(params).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;菜品添加成功！&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> (!st) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">goBack</span>()</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">dishFlavors</span> = []</span><br><span class="line">                <span class="comment">// this.dishFlavorsData = []</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">imageUrl</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">ruleForm</span> = &#123;</span><br><span class="line">                    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;price&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;code&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;image&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;description&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;dishFlavors&#x27;</span>: [],</span><br><span class="line">                    <span class="string">&#x27;status&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">categoryId</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求出错了：&#x27;</span> + err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">delete</span> params.<span class="property">updateTime</span></span><br><span class="line">            <span class="title function_">editDish</span>(params).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;菜品修改成功！&#x27;</span>)</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">goBack</span>()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求出错了：&#x27;</span> + err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为Dish实体类不满足接收flavor参数，即需要导入DishDto，用于封装页面提交的数据</p><p>DTO，全称为<code>Data Transfer Object</code>，即数据传输对象，一般用于展示层与服务层之间的数据传输。</p><p>这个DTO里面用来封装Dish的数据，并加以使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishDto</span> <span class="keyword">extends</span> <span class="title class_">Dish</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;DishFlavor&gt; flavors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后面这两条属性暂时没用，这里只需要用第一条属性</span></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>DishController</code>类中添加<code>save</code>方法，重启服务器，断点调试一下看看是否封装好了数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span> &#123;</span><br><span class="line">    dishService.saveWithFlavor(dishDto);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;新增菜品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们发现，<code>DishFlavor</code>中的<code>dishId</code>为<code>null</code></p><p>但是我们需要对DishFlavor中的dishId进行赋值<br>所以我们要取出dishDto的dishId，然后对每一组flavor的dishId赋值</p><p>大致上就是<strong>先将菜品数据保存到菜品表，再把菜品数据中的菜品口味得到，保存到菜品口味表，而菜品口味表有对应的菜品表id，这个id需要我们自己从菜品数据里面获取，获取之后，再对每一组的口味的菜品id进行赋值即可</strong></p><ul><li>这里进行一下小结，我们需要做的有以下几点<ul><li>将菜品数据保存到<code>dish</code>表</li><li>将菜品口味数据保存到<code>dish_flavor</code>表<ul><li>但是<code>dish_flavor</code>表中需要一个<code>dishId</code>字段值，这个字段值需要我们从<code>dishDto</code>中获取</li><li>获取方式为：取出<code>dishDto</code>的<code>dishId</code>，对每一组<code>flavor</code>的<code>dishId</code>赋值</li></ul></li></ul></li><li>梳理完毕之后，那么我们就在<code>DishFlavorService</code>中编写一个<code>saveWithFlavor</code>方法</li></ul><p>DishService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Dish&gt; &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DishServiceImpl</p><p>由于涉及到了多张表之间的操作，为了安全起见，需要在<code>saveWithFlavor</code>上面加入事务注解<code>@Transactional</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.Dish;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.DishDto;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.DishFlavor;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.mapper.DishMapper;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.service.DisFlavorService;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.service.DishService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;DishMapper, Dish&gt; <span class="keyword">implements</span> <span class="title class_">DishService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DisFlavorService dishFlavorService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line">        <span class="comment">//将菜品数据保存到dish表</span></span><br><span class="line">        <span class="built_in">this</span>.save(dishDto);</span><br><span class="line">        <span class="comment">//获取dishId</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dishDto.getId();</span><br><span class="line">        <span class="comment">//将获取到的dishId赋值给dishFlavor的dishId属性</span></span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line">        <span class="keyword">for</span> (DishFlavor dishFlavor : flavors) &#123;</span><br><span class="line">            dishFlavor.setDishId(dishId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//同时将菜品口味数据保存到dish_flavor表</span></span><br><span class="line">        dishFlavorService.saveBatch(flavors);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并在main方法中，开启事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TakeOutApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(TakeOutApplication.class, args);</span><br><span class="line">        log.info(<span class="string">&quot;项目启动成功...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启服务器，测试功能</p><h1 id="菜品信息分页查询"><a href="#菜品信息分页查询" class="headerlink" title="菜品信息分页查询"></a>菜品信息分页查询</h1><h2 id="需求分析-5"><a href="#需求分析-5" class="headerlink" title="需求分析"></a>需求分析</h2><ul><li>系统中的菜品数据很多的时候，如果在一个页面中全部展示出来会显得比较乱，不便于查看</li><li>所以一般的系统中都会以分页的方式来展示列表数据。</li><li>其中图片列和菜品分类列比较特殊<ul><li>图片列：会用到文件的下载功能</li><li>菜品分类列：由于我们的菜品表只保存了category_id，所以我们需要查询category_id对应的菜品分类名称，从而回显数据</li></ul></li></ul><p><img src="https://s2.loli.net/2023/08/14/sNgnkdlbM1whe57.png" alt="image-20230727172423207"></p><h2 id="梳理交互过程-1"><a href="#梳理交互过程-1" class="headerlink" title="梳理交互过程"></a>梳理交互过程</h2><p>按照惯例，我们还是先来梳理一遍流程</p><ol><li>页面(backend&#x2F;page&#x2F;food&#x2F;list.html)发送ajax请求，将分页查询参数(<code>page</code>、<code>pageSize</code>、<code>name</code>)，提交到服务端，获取分页数据</li><li>页面发送请求，请求服务端进行图片下载，用于页面图片展示</li></ol><p>那么开发菜品信息分页查询功能，其实就是在服务端编写代码去处理前端页面发送的这2次请求即可</p><h2 id="代码开发-1"><a href="#代码开发-1" class="headerlink" title="代码开发"></a>代码开发</h2><p>在<code>DishController</code>下添加<code>page</code>方法，进行分页查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span> &#123;</span><br><span class="line">    <span class="comment">//构造分页构造器对象</span></span><br><span class="line">    Page&lt;Dish&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    <span class="comment">//条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加条件,当name不为空时，模糊匹配姓名</span></span><br><span class="line">    queryWrapper.like(name != <span class="literal">null</span>, Dish::getName, name);</span><br><span class="line">    <span class="comment">// 对更新时间进行降序排序，更新时间最晚的在最上面</span></span><br><span class="line">    queryWrapper.orderByDesc(Dish::getUpdateTime);</span><br><span class="line">    <span class="comment">//执行分页查询</span></span><br><span class="line">    dishService.page(pageInfo, queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> Result.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启服务器，效果如下，但是现在没有菜品分类数据，部分图片也没有加载</p><ul><li>我们只需要把资料中提供好的图片复制到我们存放图片的目录下即可</li></ul><img src="https://s2.loli.net/2023/08/14/dUeNxVosS2lchw6.png" alt="image-20230727172727992" style="zoom: 50%;" /><p>那么为什么没有菜品分类数据呢？</p><ul><li>我们传递的是一个Dish对象，dish对象没有菜品分类名称属性，但是有菜品分类id</li><li>那我们就可以根据这个菜品分类id，去菜品分类表中查询对应的菜品分类名称</li></ul><p>所以我们之前的<code>DishDto</code>类中的另外一个属性就派上用场了，我们返回一个<code>DishDto</code>对象就有菜品分类名称数据了</p><p>DishDto：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishDto</span> <span class="keyword">extends</span> <span class="title class_">Dish</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 菜品口味列表</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;DishFlavor&gt; flavors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品分类名称</span></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们现在就可以把<code>DishDto</code>看做是<code>Dish</code>类的基础上，增加了一个<code>categoryName</code>属性，到时候返回<code>DishDto</code><br>具体实现思路就是，将查询出来的<code>dish</code>数据，赋给<code>dishDto</code>，然后在根据<code>dish</code>数据中的<code>category_id</code>，去菜品分类表中查询到<code>category_name</code>，将其赋给<code>dishDto</code></p><p><strong>难点：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span> &#123;</span><br><span class="line">        <span class="comment">//构造分页构造器对象</span></span><br><span class="line">        Page&lt;Dish&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">        <span class="comment">//这个就是我们到时候返回的结果</span></span><br><span class="line">        Page&lt;DishDto&gt; dishDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">        <span class="comment">//条件构造器</span></span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加条件</span></span><br><span class="line">        queryWrapper.like(name != <span class="literal">null</span>, Dish::getName, name);</span><br><span class="line">        queryWrapper.orderByDesc(Dish::getUpdateTime);</span><br><span class="line">        <span class="comment">//执行分页查询</span></span><br><span class="line">        dishService.page(pageInfo, queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对象拷贝，将pageInfo对象中的所有属性，对应的拷贝到dishDtoPage中</span></span><br><span class="line">        <span class="comment">// 并且忽略records集合中的数据，为什么忽悠掉呢，因为records中的数据是展示列表上的所有数据</span></span><br><span class="line">        <span class="comment">// 而原来的数据缺少一个菜品分类属性无法被得到</span></span><br><span class="line">        <span class="comment">// 我们想让这个records中的数据来更新一下，然后赋值给新的分页对象，所以先忽略,由自己来设置</span></span><br><span class="line">        BeanUtils.copyProperties(pageInfo, dishDtoPage, <span class="string">&quot;records&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取原records数据</span></span><br><span class="line">        List&lt;Dish&gt; records = pageInfo.getRecords();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历每一条records数据(里面每一个数据都是Dish对象)</span></span><br><span class="line">        List&lt;DishDto&gt; list = records.stream().map((item) -&gt; &#123;</span><br><span class="line">            <span class="comment">// 新建的DishDto对象，用于存储新数据，也就是菜品分类名称数据</span></span><br><span class="line">            <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">            <span class="comment">//将旧数据赋给dishDto对象，这里面得到了records中的每一个Dish对象</span></span><br><span class="line">            <span class="comment">// 然后赋值给dishDto</span></span><br><span class="line">            BeanUtils.copyProperties(item, dishDto);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//然后获取一下dish对象的category_id属性</span></span><br><span class="line">            <span class="comment">// 得到dish对象的id</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();  <span class="comment">//分类id</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//根据这个id属性，获取到Category对象（这里需要用@Autowired注入一个CategoryService对象）</span></span><br><span class="line">            <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//随后获取Category对象的name属性，也就是菜品分类名称</span></span><br><span class="line">            <span class="comment">// 得到id属性，就可以根据id查询对象，并且获得对象的名字</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//最后将菜品分类名称赋给dishDto对象就好了</span></span><br><span class="line">            <span class="comment">// 最后把对象的菜品分类名称赋值给disDto对象即可</span></span><br><span class="line">            dishDto.setCategoryName(categoryName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//结果返回一个dishDto对象</span></span><br><span class="line">            <span class="keyword">return</span> dishDto;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//并将dishDto对象封装成一个集合，作为我们的最终结果，这个集合，就是要展示的新数据</span></span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后把新数据，设置到这个新的分页上</span></span><br><span class="line">        dishDtoPage.setRecords(list);</span><br><span class="line">        <span class="keyword">return</span> Result.success(dishDtoPage);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="修改菜品"><a href="#修改菜品" class="headerlink" title="修改菜品"></a>修改菜品</h1><h2 id="梳理交互过程-2"><a href="#梳理交互过程-2" class="headerlink" title="梳理交互过程"></a>梳理交互过程</h2><p>按照惯例，还是先来梳理一下整个流程</p><ol><li>页面发送ajax请求，请求服务器获取分类数据，用于菜品分类下拉框的数据回显（之前我们已经实现过了）</li><li>页面发送ajax请求，请求服务端，根据id查询当前菜品信息，用于菜品信息回显</li><li>页面发送请求，请求服务端进行图片下载，用于页面图片回显（之前我们已经实现过了）</li><li>点击保存按钮，页面发送ajax请求，将修改后的菜品相关数据以json形式提交到服务端</li></ol><img src="https://s2.loli.net/2023/08/14/AMEwO7hlfrGZ9vJ.png" alt="image-20230727193247689" style="zoom: 50%;" /><p>开发修改菜品功能，其实就是在服务端写代码去处理以上四次请求</p><h2 id="查询菜品信息"><a href="#查询菜品信息" class="headerlink" title="查询菜品信息"></a>查询菜品信息</h2><ul><li>菜品信息回显功能，需要我们先根据id来查询到对应的菜品信息才能回显</li><li>但修改表单中有一个菜品口味属性，普通的Dish类没有这个属性，所以还是要用到DishDto</li><li>那我们这里先编写一个<code>getByIdWithFlavor</code>方法</li><li>菜品口味需要根据<code>dish_id</code>去<code>dish_flavor</code>表中查询，将查询到的菜品口味数据赋给我们的<code>DishDto</code>对象即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该方法可以查询菜品对应的口味，用于回显到页面上</span></span><br><span class="line"><span class="keyword">public</span> DishDto <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">    <span class="comment">// 通过this，指向Dish对象，利用id得到Dish对象</span></span><br><span class="line">    <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line">    <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">    <span class="comment">// 将旧菜品的数据，拷贝到新菜品中</span></span><br><span class="line">    BeanUtils.copyProperties(dish,dishDto);</span><br><span class="line"></span><br><span class="line">    LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 找出口味表中菜品的id与传入的当前菜品表中的id对应的数据</span></span><br><span class="line">    queryWrapper.eq(DishFlavor::getId,dish.getId());</span><br><span class="line">    List&lt;DishFlavor&gt; flavors = dishFlavorService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 让新菜品设置口味，因为旧菜品不包含口味属性</span></span><br><span class="line">    dishDto.setFlavors(flavors);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dishDto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>DishController</code>中添加get方法，实现添加在<code>DishServicelmpl</code>中的逻辑代码，返回查询到的数据信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;DishDto&gt; <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    <span class="comment">// 通过在dishService中封装的getByIdWithFlavor方法来得到DishDto对象</span></span><br><span class="line">    <span class="comment">// 也就是得到一个新的菜品对象，返回给页面回显数据</span></span><br><span class="line">    <span class="type">DishDto</span> <span class="variable">idWithFlavor</span> <span class="operator">=</span> dishService.getByIdWithFlavor(id);</span><br><span class="line">    <span class="keyword">return</span> Result.success(idWithFlavor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们去访问一下修改菜品页面，看看是否有效果，如果没效果，打个断点或者看看日志</p><h2 id="修改菜品信息"><a href="#修改菜品信息" class="headerlink" title="修改菜品信息"></a>修改菜品信息</h2><p>由于Dish表中没有Flavor这个属性，所以修改的时候，我们也是需要修改两张表</p><p>修改按钮绑定过的是addFoodtype方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;blueBug&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">&quot;addFoodtype(scope.row.id)&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    修改</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该方法也是一个新增&#x2F;修改通用的方法，修改的时候多一个<code>id</code>属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加</span></span><br><span class="line">addFoodtype (st) &#123;</span><br><span class="line"><span class="keyword">if</span> (st === <span class="string">&#x27;add&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">menuHandle</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/backend/page/food/add.html&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;添加菜品&#x27;</span></span><br><span class="line">    &#125;,<span class="literal">true</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">menuHandle</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/backend/page/food/add.html?id=&#x27;</span>+st,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;修改菜品&#x27;</span></span><br><span class="line">    &#125;,<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这我们能看出请求路径与方式，所以后端代码我们需要提交<code>PUT</code>请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改接口</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">editDish</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/dish&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; ...params &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端代码就分析到这里，我们开始编写后端逻辑</p><p>主要框架就这点东西，重点是编写<code>updateWithFlavor</code>方法<br>首先去DishService中创建<code>updateWithFlavor</code>方法，然后在<code>DishServiceImpl</code>中重写方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span> &#123;</span><br><span class="line">    dishService.updateWithFlavor(dishDto);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;更新菜品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line">    <span class="comment">// 将菜品数据更新到dish表中</span></span><br><span class="line">    <span class="built_in">this</span>.updateById(dishDto);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理之前的菜品口味表，然后增添新的菜品口味上去</span></span><br><span class="line">    LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 比较菜品口味表中的id与菜品表的id是否相同，如果相同，就删除</span></span><br><span class="line">    queryWrapper.eq(DishFlavor::getDishId,dishDto.getId());</span><br><span class="line">    <span class="comment">// 删除菜品对应的口味</span></span><br><span class="line">    dishFlavorService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加当前提交过来的口味数据,对getFlavors数据进行数据插入</span></span><br><span class="line">    List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对口味数据进行菜品表id数据的更新</span></span><br><span class="line">    flavors = flavors.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="comment">// 设置item(口味)，也就是菜品表的id为当前菜品</span></span><br><span class="line">        item.setDishId(dishDto.getId());</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//同时将菜品口味数据保存到dish_flavor表</span></span><br><span class="line">    dishFlavorService.saveBatch(flavors);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意要在<code>DishServiceImpl</code>上添加<code>@Transactional</code>注解，同时也要在主启动类上加上<code>@EnableTransactionManagement</code>注解</p><h1 id="新增套餐"><a href="#新增套餐" class="headerlink" title="新增套餐"></a>新增套餐</h1><h2 id="需求分析-6"><a href="#需求分析-6" class="headerlink" title="需求分析"></a>需求分析</h2><ul><li>套餐就是菜品的集合</li><li>后台系统中可以管理套餐信息，通过新增套餐来添加一个新的套餐</li><li>在添加套餐时需要选择当前套餐所属的套餐分类和包含的菜品，并且需要上传套餐对应的图片</li></ul><h2 id="数据模型-2"><a href="#数据模型-2" class="headerlink" title="数据模型"></a>数据模型</h2><ul><li>新增套餐，其实就是将新增页面录入的套餐信息插入到setmeal表中，而且还要向setmeal_dish表中插入套餐和菜品关联数据</li><li>所以在新增套餐时，需要对两张表进行操作<ol><li>setmeal表 —&gt; 套餐表</li><li>setmeal_dish表 —&gt; 套餐菜品关系表</li></ol></li></ul><p>setmeal表</p><table><thead><tr><th align="center">Field</th><th align="center">Type</th><th align="center">Collation</th><th align="center">Null</th><th align="center">Key</th><th align="center">Default</th><th align="center">Comment</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center">PRI</td><td align="center">(NULL)</td><td align="center">主键</td></tr><tr><td align="center">category_id</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">菜品分类id</td></tr><tr><td align="center">name</td><td align="center">varchar(64)</td><td align="center">utf8_bin</td><td align="center">NO</td><td align="center">UNI</td><td align="center">(NULL)</td><td align="center">套餐名称</td></tr><tr><td align="center">price</td><td align="center">decimal(10,2)</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">套餐价格</td></tr><tr><td align="center">status</td><td align="center">int</td><td align="center">(NULL)</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">状态 0:停用 1:启用</td></tr><tr><td align="center">code</td><td align="center">varchar(32)</td><td align="center">utf8_bin</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">编码</td></tr><tr><td align="center">description</td><td align="center">varchar(512)</td><td align="center">utf8_bin</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">描述信息</td></tr><tr><td align="center">image</td><td align="center">varchar(255)</td><td align="center">utf8_bin</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">图片</td></tr><tr><td align="center">create_time</td><td align="center">datetime</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">创建时间</td></tr><tr><td align="center">update_time</td><td align="center">datetime</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">更新时间</td></tr><tr><td align="center">create_user</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">创建人</td></tr><tr><td align="center">update_user</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">修改人</td></tr><tr><td align="center">is_deleted</td><td align="center">int</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">0</td><td align="center">是否删除</td></tr></tbody></table><p>setmeal_dish表</p><table><thead><tr><th align="center">Field</th><th align="center">Type</th><th align="center">Collation</th><th align="center">Null</th><th align="center">Key</th><th align="center">Default</th><th align="center">Comment</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center">PRI</td><td align="center">(NULL)</td><td align="center">主键</td></tr><tr><td align="center">setmeal_id</td><td align="center">varchar(32)</td><td align="center">utf8_bin</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">套餐id</td></tr><tr><td align="center">dish_id</td><td align="center">varchar(32)</td><td align="center">utf8_bin</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">菜品id</td></tr><tr><td align="center">name</td><td align="center">varchar(32)</td><td align="center">utf8_bin</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">菜品名称 （冗余字段）</td></tr><tr><td align="center">price</td><td align="center">decimal(10,2)</td><td align="center">(NULL)</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">菜品原价（冗余字段）</td></tr><tr><td align="center">copies</td><td align="center">int</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">份数</td></tr><tr><td align="center">sort</td><td align="center">int</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">0</td><td align="center">排序</td></tr><tr><td align="center">create_time</td><td align="center">datetime</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">创建时间</td></tr><tr><td align="center">update_time</td><td align="center">datetime</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">更新时间</td></tr><tr><td align="center">create_user</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">创建人</td></tr><tr><td align="center">update_user</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">修改人</td></tr><tr><td align="center">is_deleted</td><td align="center">int</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">0</td><td align="center">是否删除</td></tr></tbody></table><h2 id="准备工作-2"><a href="#准备工作-2" class="headerlink" title="准备工作"></a>准备工作</h2><p>在开发业务功能前，先将需要用到的类和接口基本结构创建好:</p><p>实体类SetmealDish</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐菜品关系</span></span><br><span class="line"><span class="comment"> * 就是指在某个套餐中的菜品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealDish</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐id</span></span><br><span class="line">    <span class="keyword">private</span> Long setmealId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品id</span></span><br><span class="line">    <span class="keyword">private</span> Long dishId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品名称 （冗余字段）</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品原价</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//份数</span></span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DTO SetmealDto<br>普通的SetmealDish类肯定是不够我们用的，这里还需要加上套餐内的具体菜品和套餐分类名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealDto</span> <span class="keyword">extends</span> <span class="title class_">Setmeal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;SetmealDish&gt; setmealDishes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mapper接口SetmealDishMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.SetmealDish;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealDishMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;SetmealDish&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务层接口SetmealDishService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.SetmealDish;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealDishMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;SetmealDish&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务层实现类SetmealDishServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.SetmealDish;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.mapper.SetmealDishMapper;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.service.SetmealDishService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealDishServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;SetmealDishMapper, SetmealDish&gt; <span class="keyword">implements</span> <span class="title class_">SetmealDishService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制层SetmealController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.eastwind.service.SetMealService;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.service.SetmealDishService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/setmeal&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetMealService setMealService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealDishService setmealDishService;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="梳理交互过程-3"><a href="#梳理交互过程-3" class="headerlink" title="梳理交互过程"></a>梳理交互过程</h2><p>在开发代码之前，我们先来梳理一下新增套餐时前端页面与服务端的交互过程</p><ol><li>页面发送ajax请求，请求服务端，获取套餐分类数据并展示到下拉框中（这个之前做过）</li><li>页面发送ajax请求，请求服务端，获取菜品分类数据并展示到添加菜品窗口中</li><li>页面发送ajax请求，请求服务端，根据菜品分类查询对应的菜品数据并展示到添加菜品窗口中</li><li>页面发送请求进行图片上传，请求服务端将图片保存到服务器（已完成）</li><li>页面发送请求进行图片下载，将上传的图片进行回显（已完成）</li><li>点击保存按钮，发送ajax请求，将套餐相关数据以json形式提交到服务端</li></ol><p>开发新增套餐功能，其实就是在服务端编写代码去处理前端页面发送的这6次请求</p><h2 id="代码开发-2"><a href="#代码开发-2" class="headerlink" title="代码开发"></a>代码开发</h2><p>新增套餐页面，现在的套餐分类下拉框中已经能显示套餐分类了，这个功能在之前我们已经实现过了，在菜品分类的时候做的</p><img src="https://s2.loli.net/2023/08/14/CN6FXGMKk37wRVS.png" alt="image-20230728075441771" style="zoom: 50%;" /><p>添加菜品页面，这个页面是发送的<code>GET</code>请求，且路径为<code>dish/list?categoryId=xxx</code></p><p><img src="https://s2.loli.net/2023/08/14/SJhK16br9kUd3qC.png" alt="image-20230728075514756"></p><p>所以我们先去DishController中编写对应的get方法来正确显示菜品数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;List&lt;Dish&gt;&gt; <span class="title function_">get</span><span class="params">(Dish dish)</span>&#123;</span><br><span class="line">    <span class="comment">// Dish泛型在LambdaQueryWrapper中的作用是指定查询目标实体类类型的内容</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 比较传入的菜品id和数据库中的id是否相同</span></span><br><span class="line">    queryWrapper.eq(dish.getCategoryId() != <span class="literal">null</span>,Dish::getCategoryId,dish.getCategoryId());</span><br><span class="line">    <span class="comment">// 查询该菜品的启用情况，启用时，才会展示</span></span><br><span class="line">    queryWrapper.eq(Dish::getStatus,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 先用sort升序排序，sort相同的情况下，对更新时间降序排序</span></span><br><span class="line">    queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> Result.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写save方法</p><p>我们先打个断点，看看提交的数据是啥样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;套餐信息：&#123;&#125;&quot;</span>, setmealDto);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;套餐添加成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/14/M8b43rDGgpyU2sW.png" alt="image-20230728091012027"></p><p>需要注意的是这个setmealId为null，我们具体的代码中，要从setmealDao中获取并赋值</p><p>controller层</p><p>这里依旧是需要我们自己在SetmealService中编写一个setWithDish方法，并在SetmealServiceImpl中实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.eastwind.common.Result;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.SetmealDto;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.service.SetMealService;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.service.SetmealDishService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/setmeal&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetMealService setMealService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealDishService setmealDishService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;套餐信息：&#123;&#125;&quot;</span>, setmealDto);</span><br><span class="line">        setMealService.saveWithDish(setmealDto);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;套餐添加成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务层SetMealService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.Setmeal;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.SetmealDto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetMealService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Setmeal&gt; &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDto setmealDto)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务层实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.Setmeal;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.SetmealDish;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.SetmealDto;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.mapper.SetmealMapper;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.service.SetmealDishService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetMealServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;SetmealMapper, Setmeal&gt; <span class="keyword">implements</span> <span class="title class_">com</span>.eastwind.service.SetMealService &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SetmealDishService setmealDishService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDto setmealDto)</span> &#123;</span><br><span class="line">        <span class="comment">// 将setmealDto传递进来，保存套餐表的基本信息</span></span><br><span class="line">        <span class="built_in">this</span>.save(setmealDto);</span><br><span class="line">        <span class="comment">// 得到该套餐对应的菜品</span></span><br><span class="line">        List&lt;SetmealDish&gt; setmealDishes = setmealDto.getSetmealDishes();</span><br><span class="line">        setmealDishes = setmealDishes.stream().map((item) -&gt; &#123;</span><br><span class="line">            <span class="comment">// 并让每一个菜品都设置一下套餐id,因为传递的时候没法给菜品设置套餐id</span></span><br><span class="line">            <span class="comment">// 因为传递的时候套餐id是需要在套餐数据保存后使用算法生成的，在保存数据后，才能让关联的菜品设置套餐id</span></span><br><span class="line">            item.setSetmealId(setmealDto.getId());</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        setmealDishService.saveBatch(setmealDishes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端代码分析-3"><a href="#前端代码分析-3" class="headerlink" title="前端代码分析"></a>前端代码分析</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitForm(&#x27;ruleForm&#x27;, false)&quot;</span>&gt;</span> 保存 <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单击后触发<code>submitForm</code>方法</p><p>表单提交也是一个通用的代码，分为新增&#x2F;修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">submitForm</span>(<span class="params">formName, st</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>[formName].<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">        <span class="keyword">let</span> prams = &#123; ...<span class="variable language_">this</span>.<span class="property">ruleForm</span> &#125;</span><br><span class="line">        prams.<span class="property">price</span> *= <span class="number">100</span></span><br><span class="line">        prams.<span class="property">setmealDishes</span> = <span class="variable language_">this</span>.<span class="property">dishTable</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">obj</span>) =&gt;</span> (&#123;</span><br><span class="line">            <span class="attr">copies</span>: obj.<span class="property">copies</span>,</span><br><span class="line">            <span class="attr">dishId</span>: obj.<span class="property">dishId</span>,</span><br><span class="line">            <span class="attr">name</span>: obj.<span class="property">name</span>,</span><br><span class="line">            <span class="attr">price</span>: obj.<span class="property">price</span>,</span><br><span class="line">        &#125;))</span><br><span class="line">        prams.<span class="property">status</span> = <span class="variable language_">this</span>.<span class="property">ruleForm</span> ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">        prams.<span class="property">categoryId</span> = <span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">idType</span></span><br><span class="line">        <span class="keyword">if</span>(prams.<span class="property">setmealDishes</span>.<span class="property">length</span> &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请选择菜品！&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">imageUrl</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请上传套餐图片&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// delete prams.dishList</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">actionType</span> == <span class="string">&#x27;add&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> prams.<span class="property">id</span></span><br><span class="line">            <span class="title function_">addSetmeal</span>(prams)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;套餐添加成功！&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> (!st) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">goBack</span>()</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">ruleForm</span>.<span class="title function_">resetFields</span>()</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">dishList</span> = []</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">dishTable</span> = []</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">ruleForm</span> = &#123;</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="attr">categoryId</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="attr">price</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="attr">code</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="attr">image</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="attr">description</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="attr">dishList</span>: [],</span><br><span class="line">                    <span class="attr">status</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">id</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="attr">idType</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">imageUrl</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求出错了：&#x27;</span> + err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">delete</span> prams.<span class="property">updateTime</span></span><br><span class="line">            <span class="title function_">editSetmeal</span>(prams)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;套餐修改成功！&#x27;</span>)</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">goBack</span>()</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求出错了：&#x27;</span> + err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新增套餐的保存按钮是发送的<code>post</code>请求，请求路径为<code>/setmeal</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增数据接口</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addSetmeal</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/setmeal&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; ...params &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="套餐信息分页查询"><a href="#套餐信息分页查询" class="headerlink" title="套餐信息分页查询"></a>套餐信息分页查询</h1><h2 id="需求分析-7"><a href="#需求分析-7" class="headerlink" title="需求分析"></a>需求分析</h2><ul><li>系统中的套餐数据很多的时候，如果在一个页面中全部展示出来会显得比较乱，不便于查看</li><li>一般的系统中都会以分页的方式来展示列表数据</li></ul><h2 id="梳理交互过程-4"><a href="#梳理交互过程-4" class="headerlink" title="梳理交互过程"></a>梳理交互过程</h2><ol><li>页面发送ajax请求，将分页查询参数（page，pageSize，name）提交到服务端，获取分页数据</li><li>页面发送请求，请求服务端进行图片下载，用于页面图片展示（已完成）</li></ol><h2 id="前端分析"><a href="#前端分析" class="headerlink" title="前端分析"></a>前端分析</h2><p>点击套餐管理，在搜索框输入1，获取请求url与请求方式</p><ul><li>请求网址: <a href="http://localhost/setmeal/page?page=1&pageSize=10&name=1">http://localhost/setmeal/page?page=1&amp;pageSize=10&amp;name=1</a></li><li>请求方法: GET</li></ul><h2 id="代码开发-3"><a href="#代码开发-3" class="headerlink" title="代码开发"></a>代码开发</h2><ul><li>SetmealController类中，添加list方法<br>  其实跟前面的菜品信息分页查询代码几乎一模一样，这遍就当review了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize,String name)</span> &#123;</span><br><span class="line">    Page&lt;Setmeal&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    Page&lt;SetmealDto&gt; dtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    <span class="comment">// 条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.like(name != <span class="literal">null</span>,Setmeal::getName,name);</span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line">    <span class="comment">// 执行分页查询</span></span><br><span class="line">    setMealService.page(pageInfo,queryWrapper);</span><br><span class="line"></span><br><span class="line">    BeanUtils.copyProperties(pageInfo,dtoPage,<span class="string">&quot;records&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到之前的数据，对它的分类进行赋值更新</span></span><br><span class="line">    List&lt;SetmealDto&gt; records = dtoPage.getRecords();</span><br><span class="line">    records = records.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line">        <span class="comment">// 将旧数据赋值给新数据，再对数据分类进行更新</span></span><br><span class="line">        BeanUtils.copyProperties(item,setmealDto);</span><br><span class="line">        <span class="comment">// 得到套餐的Id,因为套餐关联了分类，所以我们可以去分类里查询相关的名称</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            <span class="comment">// 将套餐分类名称赋值给新数据</span></span><br><span class="line">            setmealDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setmealDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    dtoPage.setRecords(records);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.success(dtoPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="删除套餐"><a href="#删除套餐" class="headerlink" title="删除套餐"></a>删除套餐</h1><h2 id="需求分析-8"><a href="#需求分析-8" class="headerlink" title="需求分析"></a>需求分析</h2><ul><li>在套餐管理列表页面点击删除按钮，可以删除对应的套餐信息</li><li>也可以通过复选框选择多个套餐，选择批量删除一次性删除多个套餐</li></ul><p>注意：对于<code>在售</code>中的套餐不能删除，需要先<code>停售</code>，然后才能删除</p><h2 id="梳理交互过程-5"><a href="#梳理交互过程-5" class="headerlink" title="梳理交互过程"></a>梳理交互过程</h2><ol><li>删除单个套餐时，页面发送ajax请求，根据套餐id删除对应套餐</li><li>删除多个套餐时，页面发送ajax请求，根据提交的多个套餐id删除对应套餐开发删除套餐功能<ul><li>请求网址: <a href="http://localhost/setmeal?ids=1579044544635232258,1415580119015145474">http://localhost/setmeal?ids=1579044544635232258,1415580119015145474</a></li><li>请求方法: DELETE</li></ul></li></ol><ul><li>删除单个套餐和批量删除这两种请求的地址和请求方式都是相同的</li><li>不同的则是传递的id个数，所以在服务端可以提供一个方法来统一处理。</li></ul><h2 id="代码开发-4"><a href="#代码开发-4" class="headerlink" title="代码开发"></a>代码开发</h2><p>在SetmealController中添加<code>delete</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ids.size() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;请选中你要删除的套餐&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    setMealService.removeWithDish(ids);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我加入了一个判断，是为了确保用户万一点击时不携带参数所做的预防</p><p>@RequestParam记得给ids加上</p><p>业务层SetMealService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">removeWithDish</span><span class="params">(List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure><p>业务层实现类SetMealServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用来删除套餐</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeWithDish</span><span class="params">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 根据这一组id来查询对应的套餐(删除多个套餐的情况)</span></span><br><span class="line">    queryWrapper.in(Setmeal::getId,ids);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询这组被查出来的数据，状态是否为1</span></span><br><span class="line">    queryWrapper.eq(Setmeal::getStatus,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到查询的结果</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.count(queryWrapper);</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// count　&gt; 0 ：说明删除的数据中，包含在售的套餐</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;套餐正在售卖中，请先停售再进行删除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果没有在售套餐，则直接删除</span></span><br><span class="line">    <span class="built_in">this</span>.removeByIds(ids);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里删除的是套餐所绑定的菜品</span></span><br><span class="line">    LambdaQueryWrapper&lt;SetmealDish&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 套餐菜品表中的套餐id，是否存在于这个传入的套餐id中</span></span><br><span class="line">    wrapper.in(SetmealDish::getSetmealId,ids);</span><br><span class="line">    <span class="comment">// 存在的，都删除掉</span></span><br><span class="line">    setmealDishService.remove(wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="邮件发送（替换手机验证）"><a href="#邮件发送（替换手机验证）" class="headerlink" title="邮件发送（替换手机验证）"></a>邮件发送（替换手机验证）</h1><p>其实黑马这里用的是短信业务，但咱也没那条件，所以我只能自己换成QQ邮箱验证码了，这个简单，具体操作我们也只需要开启POP3&#x2F;STMP服务，获取一个16位的授权码</p><p><img src="https://s2.loli.net/2023/08/14/I2rH5f7jPYZwQVC.png" alt="image-20230728142908901"></p><img src="https://s2.loli.net/2023/08/14/UxFiCrz64RvZYHa.png" alt="image-20230728142949887" style="zoom:50%;" /><p>邮件发送的授权码：<strong>xnuuzgfmxuzedcdj</strong></p><h2 id="需求分析-9"><a href="#需求分析-9" class="headerlink" title="需求分析"></a>需求分析</h2><p>为了方便用户登录，移动端通常都会提供通过手机验证码登录的功能(咱平替成邮箱验证码)</p><p>手机（邮箱）验证码登录的优点：</p><ul><li>方便快捷，无需注册，直接登录</li><li>使用短信验证码作为登录凭证，无需记忆密码</li><li>安全</li></ul><p>登录流程:</p><ul><li>输入手机号（邮箱） &gt; 获取验证码 &gt; 输入验证码 &gt; 点击登录 &gt; 登录成功</li></ul><p>用户登录界面</p><p><img src="https://s2.loli.net/2023/08/14/YV1tKP5sqNoyb8n.png" alt="image-20230728143108122"></p><p>注意:通过手机（邮箱）验证码登录，手机号是区分不同用户的标识</p><h2 id="数据模型-3"><a href="#数据模型-3" class="headerlink" title="数据模型"></a>数据模型</h2><p>这里的手机号也是varchar类型，所以我们就不用动它了，咱就用它存咱自己邮箱号就行（动手能力强的自己改一下也无所谓，大不了改出BUG再自己修）</p><table><thead><tr><th align="center">Field</th><th align="center">Type</th><th align="center">Collation</th><th align="center">Null</th><th align="center">Key</th><th align="center">Default</th><th align="center">Comment</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center">PRI</td><td align="center">(NULL)</td><td align="center">主键</td></tr><tr><td align="center">name</td><td align="center">varchar(50)</td><td align="center">utf8_bin</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">姓名</td></tr><tr><td align="center">phone</td><td align="center">varchar(100)</td><td align="center">utf8_bin</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">手机号</td></tr><tr><td align="center">sex</td><td align="center">varchar(2)</td><td align="center">utf8_bin</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">性别</td></tr><tr><td align="center">id_number</td><td align="center">varchar(18)</td><td align="center">utf8_bin</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">身份证号</td></tr><tr><td align="center">avatar</td><td align="center">varchar(500)</td><td align="center">utf8_bin</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">头像</td></tr><tr><td align="center">status</td><td align="center">int</td><td align="center">(NULL)</td><td align="center">YES</td><td align="center"></td><td align="center">0</td><td align="center">状态 0:禁用，1:正常</td></tr></tbody></table><ul><li>手机号（邮箱）是区分不同用户的标识，在用户登录的时候判断所输入的手机号（邮箱）是否存储在表中</li><li>如果不在表中，说明该用户为一个<strong>新的用户</strong>，将该用户自动保存在<code>user</code>表中</li></ul><p>在开发业务功能之前，我们先将要用到的类和接口的基本结构都创建好</p><p>实体类User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//手机号</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//性别 0 女 1 男</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//身份证号</span></span><br><span class="line">    <span class="keyword">private</span> String idNumber;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//头像</span></span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态 0:禁用，1:正常</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mapper接口UserMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务层接口UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务层实现类UserServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper,User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制层UserController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工具类（我们自己造自己的邮箱工具类）</p><ul><li>首先导入坐标</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.activation/activation --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.activation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.mail/mail --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-email --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-email<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后编写一个工具类，用于发送邮件验证码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.mail.Authenticator;</span><br><span class="line"><span class="keyword">import</span> javax.mail.MessagingException;</span><br><span class="line"><span class="keyword">import</span> javax.mail.PasswordAuthentication;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Session;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Transport;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage.RecipientType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">        <span class="comment">//可以在这里直接测试方法，填自己的邮箱即可</span></span><br><span class="line">        sendTestMail(<span class="string">&quot;zhanghan2333@qq.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">MailUtils</span>().achieveCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendTestMail</span><span class="params">(String email, String code)</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">        <span class="comment">// 创建Properties 类用于记录邮箱的一些属性</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">// 表示SMTP发送邮件，必须进行身份验证</span></span><br><span class="line">        props.put(<span class="string">&quot;mail.smtp.auth&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="comment">//此处填写SMTP服务器</span></span><br><span class="line">        props.put(<span class="string">&quot;mail.smtp.host&quot;</span>, <span class="string">&quot;smtp.qq.com&quot;</span>);</span><br><span class="line">        <span class="comment">//端口号，QQ邮箱端口587</span></span><br><span class="line">        props.put(<span class="string">&quot;mail.smtp.port&quot;</span>, <span class="string">&quot;587&quot;</span>);</span><br><span class="line">        <span class="comment">// 此处填写，写信人的账号</span></span><br><span class="line">        props.put(<span class="string">&quot;mail.user&quot;</span>, <span class="string">&quot;zhanghan2333@qq.com&quot;</span>);</span><br><span class="line">        <span class="comment">// 此处填写16位STMP口令</span></span><br><span class="line">        props.put(<span class="string">&quot;mail.password&quot;</span>, <span class="string">&quot;xnuuzgfmxuzedcdj&quot;</span>);</span><br><span class="line">        <span class="comment">// 构建授权信息，用于进行SMTP进行身份验证</span></span><br><span class="line">        <span class="type">Authenticator</span> <span class="variable">authenticator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Authenticator</span>() &#123;</span><br><span class="line">            <span class="keyword">protected</span> PasswordAuthentication <span class="title function_">getPasswordAuthentication</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">// 用户名、密码</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> props.getProperty(<span class="string">&quot;mail.user&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> props.getProperty(<span class="string">&quot;mail.password&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PasswordAuthentication</span>(userName, password);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 使用环境属性和授权信息，创建邮件会话</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">mailSession</span> <span class="operator">=</span> Session.getInstance(props, authenticator);</span><br><span class="line">        <span class="comment">// 创建邮件消息</span></span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessage</span>(mailSession);</span><br><span class="line">        <span class="comment">// 设置发件人</span></span><br><span class="line">        <span class="type">InternetAddress</span> <span class="variable">form</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InternetAddress</span>(props.getProperty(<span class="string">&quot;mail.user&quot;</span>));</span><br><span class="line">        message.setFrom(form);</span><br><span class="line">        <span class="comment">// 设置收件人的邮箱</span></span><br><span class="line">        <span class="type">InternetAddress</span> <span class="variable">to</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InternetAddress</span>(email);</span><br><span class="line">        message.setRecipient(RecipientType.TO, to);</span><br><span class="line">        <span class="comment">// 设置邮件标题</span></span><br><span class="line">        message.setSubject(<span class="string">&quot;Kyle&#x27;s Blog 邮件测试&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置邮件的内容体</span></span><br><span class="line">        message.setContent(<span class="string">&quot;尊敬的用户:你好!\n注册验证码为:&quot;</span> + code + <span class="string">&quot;(有效期为一分钟,请勿告知他人)&quot;</span>, <span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 最后当然就是发送邮件啦</span></span><br><span class="line">        Transport.send(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">achieveCode</span><span class="params">()</span> &#123;  <span class="comment">//由于数字 1 、 0 和字母 O 、l 有时分不清楚，所以，没有数字 1 、 0</span></span><br><span class="line">        String[] beforeShuffle = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;F&quot;</span>,</span><br><span class="line">                <span class="string">&quot;G&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;M&quot;</span>, <span class="string">&quot;N&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;P&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;S&quot;</span>, <span class="string">&quot;T&quot;</span>, <span class="string">&quot;U&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;W&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y&quot;</span>, <span class="string">&quot;Z&quot;</span>, <span class="string">&quot;a&quot;</span>,</span><br><span class="line">                <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;j&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;m&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;s&quot;</span>, <span class="string">&quot;t&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;v&quot;</span>,</span><br><span class="line">                <span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>&#125;;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(beforeShuffle);<span class="comment">//将数组转换为集合</span></span><br><span class="line">        Collections.shuffle(list);  <span class="comment">//打乱集合顺序</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            sb.append(s); <span class="comment">//将集合转化为字符串</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.substring(<span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改拦截器"><a href="#修改拦截器" class="headerlink" title="修改拦截器"></a>修改拦截器</h2><p>对用户登录操作放行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义不需要处理的请求</span></span><br><span class="line">String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">        <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/front/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/common/**&quot;</span>,</span><br><span class="line">        <span class="comment">//对用户登陆操作放行</span></span><br><span class="line">        <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/user/sendMsg&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>判断用户是否登录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">    log.info(<span class="string">&quot;用户已登录，用户id为：&#123;&#125;&quot;</span>,request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> (Long)request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    BaseContext.setCurrentId(userId);</span><br><span class="line">    filterChain.doFilter(request,response);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发送验证码"><a href="#发送验证码" class="headerlink" title="发送验证码"></a>发送验证码</h2><p>由于这里部分前端代码做了修改，我们也需要修改一下</p><p>在front&#x2F;page&#x2F;login.html中修改</p><p><img src="https://s2.loli.net/2023/08/14/JxrTIpemuRZknzh.png" alt="image-20230728153000610"></p><p>这里有一个sendMsg方法，代码中没有，需要在front&#x2F;api&#x2F;login.js中添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sendMsgApi</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/user/sendMsg&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        data</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并更新btnLogin</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">btnLogin</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">phone</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">code</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">loginApi</span>(&#123;<span class="attr">phone</span>:<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">phone</span>,<span class="attr">code</span>:<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">code</span>&#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span>(res.<span class="property">code</span> === <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;userPhone&quot;</span>,<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">phone</span>)</span><br><span class="line">            <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>= <span class="string">&#x27;/front/index.html&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.$notify(&#123; <span class="attr">type</span>:<span class="string">&#x27;warning&#x27;</span>, <span class="attr">message</span>:res.<span class="property">msg</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.$notify(&#123; <span class="attr">type</span>:<span class="string">&#x27;warning&#x27;</span>, <span class="attr">message</span>:<span class="string">&#x27;请输入手机号码&#x27;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次尝试发送请求，就可以成功了(如果失败，记得清空缓存)</p><p>发送验证码的请求方式是POST，路径为<code>/user/sendMsg</code></p><p>那么我们在UserController控制层中，添加sendMsg方法<br>这个是真滴能发送的奥，邮箱里可以收到的，待会儿我就写校验功能了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/sendMsg&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@RequestBody</span> User user, HttpSession session)</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">    <span class="comment">// 得到json字符串中的号码对象</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> user.getPhone();</span><br><span class="line">    <span class="comment">// 如果号码不为空</span></span><br><span class="line">    <span class="keyword">if</span> (!phone.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">//随机生成一个验证码(利用MailUtils工具类)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> MailUtils.achieveCode();</span><br><span class="line">        log.info(code);</span><br><span class="line">        <span class="comment">//这里的phone其实就是邮箱，code是我们生成的验证码</span></span><br><span class="line">        MailUtils.sendTestMail(phone, code);</span><br><span class="line">        <span class="comment">//验证码存session，方便后面拿出来比对</span></span><br><span class="line">        session.setAttribute(phone, code);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;验证码发送成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.error(<span class="string">&quot;验证码发送失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入验证码，点击登录</p><ul><li><p>请求方法为Post,请求路径为:<code>/user/login</code>，数据以json格式返回给服务端<img src="https://s2.loli.net/2023/08/14/YrOv3QjVzWkobUK.png" alt="image-20230728153451260"></p><p>  <img src="https://s2.loli.net/2023/08/14/QXTlBzk85hICdxW.png" alt="image-20230728153808583"></p></li></ul><p>在UserController控制层中，添加<code>login</code>方法<br>先用日志输出一下，看看是否能接受到数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> Map map,HttpSession session)</span>&#123;</span><br><span class="line">    log.info(map.toString());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试之后发现，可以得到数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;User&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> Map map, HttpSession session)</span> &#123;</span><br><span class="line">    log.info(map.toString());</span><br><span class="line">    <span class="comment">//获取邮箱</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> map.get(<span class="string">&quot;phone&quot;</span>).toString();</span><br><span class="line">    <span class="comment">//获取验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> map.get(<span class="string">&quot;code&quot;</span>).toString();</span><br><span class="line">    <span class="comment">//从session中获取验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">codeInSession</span> <span class="operator">=</span> session.getAttribute(phone).toString();</span><br><span class="line">    <span class="comment">//比较这用户输入的验证码和session中存的验证码是否一致</span></span><br><span class="line">    <span class="keyword">if</span> (code != <span class="literal">null</span> &amp;&amp; code.equals(codeInSession)) &#123;</span><br><span class="line">        <span class="comment">//如果输入正确，判断一下当前用户是否存在</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//判断依据是从数据库中查询是否有其邮箱</span></span><br><span class="line">        queryWrapper.eq(User::getPhone, phone);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br><span class="line">        <span class="comment">//如果不存在，则创建一个，存入数据库</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setPhone(phone);</span><br><span class="line">            userService.save(user);</span><br><span class="line">            user.setName(<span class="string">&quot;用户&quot;</span> + codeInSession);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//存个session，表示登录状态</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;user&quot;</span>,user.getId());</span><br><span class="line">        <span class="comment">//并将其作为结果返回</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大功告成，输入邮箱，获取验证码，点击提交，正常登录，去数据库中查询，phone字段有我们刚刚填写的邮箱</p><img src="https://s2.loli.net/2023/08/14/oxpql7Gf8jcYvaA.png" alt="image-20230728154520879" style="zoom:33%;" /><p>可能遇到的问题：</p><ul><li><pre><code>  javax.mail.AuthenticationFailedException: 535 Login Fail.  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 遇到这个问题请重新获取一下授权码并更新授权码</span><br><span class="line"></span><br><span class="line">- 如果在从session中取code验证码的时候报</span><br><span class="line"></span><br></pre></td></tr></table></figure>  java.lang.NullPointerException  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 请清除浏览器缓存之后再次测试</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 地址簿</span><br><span class="line"></span><br><span class="line">## 需求分析</span><br><span class="line"></span><br><span class="line">- 地址簿，指的是移动端消费者用户的地址信息（外卖快递的收货地址）</span><br><span class="line">- 用户登录成功后可以维护自己的地址信息（自己修改删除新增等）</span><br><span class="line">- 同一个用户可以有多个地址信息，但是只能有一个默认地址。（有默认地址的话会很方便）</span><br><span class="line"></span><br><span class="line">## 数据模型</span><br><span class="line"></span><br><span class="line">**注意这里的phone类型为varchar(11)，这显然不够我们邮箱用的，所以我们自己改一下这里，改大一点，不然做到新增地址的时候，会报错**</span><br><span class="line">`com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column &#x27;phone&#x27; at row 1`</span><br><span class="line"></span><br><span class="line">|     Field     |     Type     |     Collation      | Null | Key  | Default |    Comment     |</span><br><span class="line">| :-----------: | :----------: | :----------------: | :--: | :--: | :-----: | :------------: |</span><br><span class="line">|      id       |    bigint    |       (NULL)       |  NO  | PRI  | (NULL)  |      主键      |</span><br><span class="line">|    user_id    |    bigint    |       (NULL)       |  NO  |      | (NULL)  |     用户id     |</span><br><span class="line">|   consignee   | varchar(50)  |      utf8_bin      |  NO  |      | (NULL)  |     收货人     |</span><br><span class="line">|      sex      |   tinyint    |       (NULL)       |  NO  |      | (NULL)  | 性别 0 女 1 男 |</span><br><span class="line">|     phone     | varchar(11)  |      utf8_bin      |  NO  |      | (NULL)  |     手机号     |</span><br><span class="line">| province_code | varchar(12)  | utf8mb4_0900_ai_ci | YES  |      | (NULL)  |  省级区划编号  |</span><br><span class="line">| province_name | varchar(32)  | utf8mb4_0900_ai_ci | YES  |      | (NULL)  |    省级名称    |</span><br><span class="line">|   city_code   | varchar(12)  | utf8mb4_0900_ai_ci | YES  |      | (NULL)  |  市级区划编号  |</span><br><span class="line">|   city_name   | varchar(32)  | utf8mb4_0900_ai_ci | YES  |      | (NULL)  |    市级名称    |</span><br><span class="line">| district_code | varchar(12)  | utf8mb4_0900_ai_ci | YES  |      | (NULL)  |  区级区划编号  |</span><br><span class="line">| district_name | varchar(32)  | utf8mb4_0900_ai_ci | YES  |      | (NULL)  |    区级名称    |</span><br><span class="line">|    detail     | varchar(200) | utf8mb4_0900_ai_ci | YES  |      | (NULL)  |    详细地址    |</span><br><span class="line">|     label     | varchar(100) | utf8mb4_0900_ai_ci | YES  |      | (NULL)  |      标签      |</span><br><span class="line">|  is_default   |  tinyint(1)  |       (NULL)       |  NO  |      |    0    | 默认 0 否 1是  |</span><br><span class="line">|  create_time  |   datetime   |       (NULL)       |  NO  |      | (NULL)  |    创建时间    |</span><br><span class="line">|  update_time  |   datetime   |       (NULL)       |  NO  |      | (NULL)  |    更新时间    |</span><br><span class="line">|  create_user  |    bigint    |       (NULL)       |  NO  |      | (NULL)  |     创建人     |</span><br><span class="line">|  update_user  |    bigint    |       (NULL)       |  NO  |      | (NULL)  |     修改人     |</span><br><span class="line">|  is_deleted   |     int      |       (NULL)       |  NO  |      |    0    |    是否删除    |</span><br><span class="line"></span><br><span class="line">## 准备工作</span><br><span class="line"></span><br><span class="line">创建对应的实体类`AddressBook`</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">import com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line">import com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 地址簿</span><br><span class="line"> */</span><br><span class="line">@Data</span><br><span class="line">public class AddressBook implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    private Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //用户id</span><br><span class="line">    private Long userId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //收货人</span><br><span class="line">    private String consignee;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //手机号</span><br><span class="line">    private String phone;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //性别 0 女 1 男</span><br><span class="line">    private String sex;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //省级区划编号</span><br><span class="line">    private String provinceCode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //省级名称</span><br><span class="line">    private String provinceName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //市级区划编号</span><br><span class="line">    private String cityCode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //市级名称</span><br><span class="line">    private String cityName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //区级区划编号</span><br><span class="line">    private String districtCode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //区级名称</span><br><span class="line">    private String districtName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //详细地址</span><br><span class="line">    private String detail;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //标签</span><br><span class="line">    private String label;</span><br><span class="line"></span><br><span class="line">    //是否默认 0否 1是</span><br><span class="line">    private Integer isDefault;</span><br><span class="line"></span><br><span class="line">    //创建时间</span><br><span class="line">    @TableField(fill = FieldFill.INSERT)</span><br><span class="line">    private LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //更新时间</span><br><span class="line">    @TableField(fill = FieldFill.INSERT_UPDATE)</span><br><span class="line">    private LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //创建人</span><br><span class="line">    @TableField(fill = FieldFill.INSERT)</span><br><span class="line">    private Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //修改人</span><br><span class="line">    @TableField(fill = FieldFill.INSERT_UPDATE)</span><br><span class="line">    private Long updateUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //是否删除</span><br><span class="line">    private Integer isDeleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><p>Mapper接口AddressBookMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.AddressBook;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AddressBookMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;AddressBook&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务层AddressBookService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.AddressBook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AddressBookService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;AddressBook&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务层实现类AddressBookServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.AddressBook;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.mapper.AddressBookMapper;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.service.AddressBookService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressBookServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;AddressBookMapper, AddressBook&gt; <span class="keyword">implements</span> <span class="title class_">AddressBookService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制层AddressBookController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.eastwind.service.AddressBookService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/addressBook&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressBookController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AddressBookService addressBookService;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后需要导入地址簿中的代码</p><h3 id="新增："><a href="#新增：" class="headerlink" title="新增："></a>新增：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;AddressBook&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span>&#123;</span><br><span class="line">    <span class="comment">// 为地址添加当前用户id，用户id需要手动添加</span></span><br><span class="line">    addressBook.setUserId(BaseContext.getCurrentId());</span><br><span class="line">    addressBookService.save(addressBook);</span><br><span class="line">    <span class="keyword">return</span> Result.success(addressBook);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置默认地址："><a href="#设置默认地址：" class="headerlink" title="设置默认地址："></a>设置默认地址：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置默认地址</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@PutMapping(&quot;default&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;AddressBook&gt; <span class="title function_">setDefault</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span>&#123;</span><br><span class="line">    LambdaUpdateWrapper&lt;AddressBook&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 查询当前所在用户的地址</span></span><br><span class="line">    updateWrapper.eq(AddressBook::getUserId,BaseContext.getCurrentId());</span><br><span class="line">    <span class="comment">// 设置所有的地址id为0,0表示非默认地址</span></span><br><span class="line">    updateWrapper.set(AddressBook::getIsDefault,<span class="number">0</span>);</span><br><span class="line">    addressBookService.update(updateWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置当前地址为默认地址</span></span><br><span class="line">    addressBook.setIsDefault(<span class="number">1</span>);</span><br><span class="line">    addressBookService.updateById(addressBook);</span><br><span class="line">    <span class="keyword">return</span> Result.success(addressBook);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="根据id查询地址"><a href="#根据id查询地址" class="headerlink" title="根据id查询地址"></a>根据id查询地址</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;AddressBook&gt; <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">    <span class="type">AddressBook</span> <span class="variable">bookServiceById</span> <span class="operator">=</span> addressBookService.getById(id);</span><br><span class="line">    <span class="keyword">if</span> (bookServiceById != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果找到了地址，就把地址数据查询给页面</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(bookServiceById);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.error(<span class="string">&quot;没有找到该地址&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询默认地址"><a href="#查询默认地址" class="headerlink" title="查询默认地址"></a>查询默认地址</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询默认地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;default&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;AddressBook&gt; <span class="title function_">getDefault</span><span class="params">()</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;AddressBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 从当前登录用户查找地址</span></span><br><span class="line">    queryWrapper.eq(AddressBook::getUserId, BaseContext.getCurrentId());</span><br><span class="line">    <span class="comment">// 并且为默认地址值：1</span></span><br><span class="line">    queryWrapper.eq(AddressBook::getIsDefault, <span class="number">1</span>);</span><br><span class="line">    <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getOne(queryWrapper);</span><br><span class="line">    <span class="keyword">if</span> (addressBook != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(addressBook);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.error(<span class="string">&quot;没有找到该地址&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询指定用户的全部地址"><a href="#查询指定用户的全部地址" class="headerlink" title="查询指定用户的全部地址"></a>查询指定用户的全部地址</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询指定用户的全部地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;List&lt;AddressBook&gt;&gt; <span class="title function_">getList</span><span class="params">(AddressBook addressBook)</span> &#123;</span><br><span class="line">    <span class="comment">// 为地址簿设置当前用户id</span></span><br><span class="line">    addressBook.setUserId(BaseContext.getCurrentId());</span><br><span class="line"></span><br><span class="line">    LambdaQueryWrapper&lt;AddressBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(addressBook.getUserId() != <span class="literal">null</span>, AddressBook::getUserId, addressBook.getUserId());</span><br><span class="line">    queryWrapper.orderByDesc(AddressBook::getUpdateTime);</span><br><span class="line">    List&lt;AddressBook&gt; list = addressBookService.list(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> Result.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改前端代码"><a href="#修改前端代码" class="headerlink" title="修改前端代码"></a>修改前端代码</h3><p>这段代码是新增地址的前端代码，我们将其中的手机号全部替换成邮箱，判断手机号的正则也换成判断邮箱的正则，懒人就直接Copy我这段代码就好了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0,user-scalable=no,minimal-ui&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>菩提阁<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./../images/favico.ico&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--不同屏幕尺寸根字体设置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./../js/base.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--element-ui的样式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../../backend/plugins/element-ui/index.css&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入vant样式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../styles/vant.min.css&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入样式  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../styles/index.css&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--本页面内容的样式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./../styles/address-edit.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;address_edit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divHead&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divTitle&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-arrow-left&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;goBack&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>&#123;&#123;title&#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divContent&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divItem&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">span</span>&gt;</span>联系人：<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">                   <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot; 请填写收货人的姓名&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.consignee&quot;</span>  <span class="attr">maxlength</span>=<span class="string">&#x27;10&#x27;</span> <span class="attr">class</span>=<span class="string">&quot;inputUser&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;spanChecked&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;form.sex = &#x27;1&#x27;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;iActive:form.sex === &#x27;1&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    先生</span><br><span class="line">                   <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;spanChecked&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;form.sex = &#x27;0&#x27;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;iActive:form.sex === &#x27;0&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    女士</span><br><span class="line">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divItem&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>邮箱：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot; 请填写收货人邮箱&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.phone&quot;</span>  <span class="attr">maxlength</span>=<span class="string">&#x27;20&#x27;</span> <span class="attr">style</span>=<span class="string">&quot;width: calc(100% - 80rem);&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divItem&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>收货地址：<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot; 请输入收货地址&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.detail&quot;</span>  <span class="attr">maxlength</span>=<span class="string">&#x27;140&#x27;</span>/&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divItem &quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>标签：<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in labelList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;form.label = item;activeIndex = index&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;spanItem:true,spanActiveSchool:activeIndex === index&#125;&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divSave&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;saveAddress&quot;</span>&gt;</span>保存地址<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divDelete&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteAddress&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;id&quot;</span>&gt;</span>删除地址<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开发环境版本,包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../backend/plugins/vue/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入组件库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../backend/plugins/element-ui/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入vant样式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./../js/vant.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./../js/common.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./../api/address.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入axios --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../backend/plugins/axios/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./../js/request.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">el</span>:<span class="string">&quot;#address_edit&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">title</span>:<span class="string">&#x27;新增收货地址&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">form</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">consignee</span>:<span class="string">&#x27;&#x27;</span>,<span class="comment">//联系人</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">phone</span>:<span class="literal">undefined</span>,<span class="comment">//手机号</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">sex</span>:<span class="string">&#x27;1&#x27;</span>,<span class="comment">//0表示女 1 表示男</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">detail</span>:<span class="string">&#x27;&#x27;</span>,<span class="comment">//收货地址</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">label</span>:<span class="string">&#x27;公司&#x27;</span>,<span class="comment">//标签</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">labelList</span>:[</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&#x27;无&#x27;</span>,<span class="string">&#x27;公司&#x27;</span>,<span class="string">&#x27;家&#x27;</span>,<span class="string">&#x27;学校&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                        ],</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>:<span class="literal">undefined</span>,</span></span><br><span class="line"><span class="language-javascript">                        activeIndex :<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">computed</span>:&#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">created</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="title function_">initData</span>()</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">goBack</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        history.<span class="title function_">go</span>(-<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">async</span> <span class="title function_">initData</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">const</span> params = <span class="title function_">parseUrl</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>)</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">id</span> = params.<span class="property">id</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span>(params.<span class="property">id</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&#x27;编辑收货地址&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">addressFindOneApi</span>(params.<span class="property">id</span>)</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">if</span>(res.<span class="property">code</span> === <span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="variable language_">this</span>.<span class="property">form</span> = res.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">                            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="variable language_">this</span>.$notify(&#123; <span class="attr">type</span>:<span class="string">&#x27;warning&#x27;</span>, <span class="attr">message</span>:res.<span class="property">msg</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">                            &#125;</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">async</span> <span class="title function_">saveAddress</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">const</span> form = <span class="variable language_">this</span>.<span class="property">form</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span>(!form.<span class="property">consignee</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.$notify(&#123; <span class="attr">type</span>:<span class="string">&#x27;warning&#x27;</span>, <span class="attr">message</span>:<span class="string">&#x27;请输入联系人&#x27;</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">return</span> </span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span>(!form.<span class="property">phone</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.$notify(&#123; <span class="attr">type</span>:<span class="string">&#x27;warning&#x27;</span>, <span class="attr">message</span>:<span class="string">&#x27;请输入邮箱&#x27;</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">return</span> </span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span>(!form.<span class="property">detail</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.$notify(&#123; <span class="attr">type</span>:<span class="string">&#x27;warning&#x27;</span>, <span class="attr">message</span>:<span class="string">&#x27;请输入收货地址&#x27;</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">return</span> </span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">const</span> reg = <span class="regexp">/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span>(!reg.<span class="title function_">test</span>(form.<span class="property">phone</span>))&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.$notify(&#123; <span class="attr">type</span>:<span class="string">&#x27;warning&#x27;</span>, <span class="attr">message</span>:<span class="string">&#x27;邮箱不合法&#x27;</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">return</span>  </span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">let</span> res= &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">id</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                            res = <span class="keyword">await</span> <span class="title function_">updateAddressApi</span>(<span class="variable language_">this</span>.<span class="property">form</span>)</span></span><br><span class="line"><span class="language-javascript">                        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                            res = <span class="keyword">await</span> <span class="title function_">addAddressApi</span>(<span class="variable language_">this</span>.<span class="property">form</span>)</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                        </span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span>(res.<span class="property">code</span> === <span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">replace</span>(<span class="string">&#x27;/front/page/address.html&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                            &#125;)</span></span><br><span class="line"><span class="language-javascript">                        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.$notify(&#123; <span class="attr">type</span>:<span class="string">&#x27;warning&#x27;</span>, <span class="attr">message</span>:res.<span class="property">msg</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">deleteAddress</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">$dialog</span>.<span class="title function_">confirm</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">title</span>: <span class="string">&#x27;确认删除&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">message</span>: <span class="string">&#x27;确认要删除当前地址吗？&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        &#125;)</span></span><br><span class="line"><span class="language-javascript">                        .<span class="title function_">then</span>( <span class="keyword">async</span> () =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">deleteAddressApi</span>(&#123;<span class="attr">ids</span>:<span class="variable language_">this</span>.<span class="property">id</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">if</span>(res.<span class="property">code</span> === <span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                                    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">replace</span>(<span class="string">&#x27;/front/page/address.html&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                                &#125;)</span></span><br><span class="line"><span class="language-javascript">                            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="variable language_">this</span>.$notify(&#123; <span class="attr">type</span>:<span class="string">&#x27;warning&#x27;</span>, <span class="attr">message</span>:res.<span class="property">msg</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">                            &#125;</span></span><br><span class="line"><span class="language-javascript">                        &#125;)</span></span><br><span class="line"><span class="language-javascript">                        .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        &#125;);</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>填写表单，点击保存，发送请求</p><p>请求网址: <a href="http://localhost/addressBook">http://localhost/addressBook</a><br>请求方法: POST</p><p>请求路径Wie<code>/addressBook</code>，请求方式为<code>POST</code>，那么我们在<code>AddressBookController</code>中编写对应的方法</p><p>重启服务器，测试新增地址</p><p><img src="https://s2.loli.net/2023/08/14/uNoCl4rpk9JHzYm.png" alt="image-20230729152533578"></p><p>添加完之后的效果</p><p><img src="https://s2.loli.net/2023/08/14/YQcRJ9Iayw3qVzb.png" alt="image-20230729152546005"></p><h2 id="设置默认地址"><a href="#设置默认地址" class="headerlink" title="设置默认地址"></a>设置默认地址</h2><ul><li><p>先来想想怎么设置默认地址</p><ul><li><p>默认地址，按理说数据库中，有且仅有一条数据为默认地址，也就是<code>is_default</code>字段为1</p></li><li><p>如何保证整个表中的</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">is_default</span><br></pre></td></tr></table></figure><p>  字段只有一条为1</p><ul><li>每次设置默认地址的时候，将当前用户所有地址的<code>is_default</code>字段设为0，随后将当前地址的<code>is_default</code>字段设为1</li></ul></li></ul></li><li><p>当我们点击上图的设为默认按钮的时候，会发送请求</p><blockquote><p>请求网址: <a href="http://localhost/addressBook/default">http://localhost/addressBook/default</a><br>请求方法: PUT</p></blockquote></li><li><p>请求路径为<code>/addressBook/default</code>，请求方式为<code>PUT</code>，那么我们现在就在<code>AddressBookController</code>中编写对应的方法</p></li></ul><p>注意这里的条件构造器是<code>LambdaUpdateWrapper</code>，而不是我们前面经常用的<code>LambdaQueryWrapper</code></p><h1 id="菜品展示"><a href="#菜品展示" class="headerlink" title="菜品展示"></a>菜品展示</h1><h2 id="需求分析-10"><a href="#需求分析-10" class="headerlink" title="需求分析"></a>需求分析</h2><ul><li>用户登陆成功之后，跳转到菜品页面，根据菜品分类来展示菜品和套餐</li><li>如果菜品设置了口味信息，则需要展示选择规格按钮，否则只展示+按钮（这部分是前端实现的）</li></ul><h2 id="梳理交互过程-6"><a href="#梳理交互过程-6" class="headerlink" title="梳理交互过程"></a>梳理交互过程</h2><ol><li>页面(front&#x2F;index.html)发送ajax请求，获取分类数据（菜品分类和套餐分类）</li><li>页面发送ajax请求，根据具体的菜品&#x2F;套餐分类，展示对应分类中的具体菜品</li></ol><h2 id="前端分析-1"><a href="#前端分析-1" class="headerlink" title="前端分析"></a>前端分析</h2><ul><li><p>启动服务器，登录账号，监测Network选项卡，发现登录到首页会发送两个请求</p><ul><li><p>分类</p><blockquote><p>请求网址: <code>http://localhost/category/list</code><br>请求方法: GET</p></blockquote></li><li><p>购物车</p><blockquote><p>请求网址: <code>http://localhost/shoppingCart/list</code><br>请求方法: GET</p></blockquote></li></ul></li></ul><p>其中分类请求我们之前写过了，但是当我们访问页面的时候，并没有加载出来，原因我们来看看前端代码</p><h1 id="菜品展示-1"><a href="#菜品展示-1" class="headerlink" title="菜品展示"></a>菜品展示</h1><h2 id="需求分析-11"><a href="#需求分析-11" class="headerlink" title="需求分析"></a>需求分析</h2><ul><li>用户登陆成功之后，跳转到菜品页面，根据菜品分类来展示菜品和套餐</li><li>如果菜品设置了口味信息，则需要展示选择规格按钮，否则只展示+按钮（这部分是前端实现的）</li></ul><h2 id="梳理交互过程-7"><a href="#梳理交互过程-7" class="headerlink" title="梳理交互过程"></a>梳理交互过程</h2><ol><li>页面(front&#x2F;index.html)发送ajax请求，获取分类数据（菜品分类和套餐分类）</li><li>页面发送ajax请求，根据具体的菜品&#x2F;套餐分类，展示对应分类中的具体菜品</li></ol><h2 id="前端分析-2"><a href="#前端分析-2" class="headerlink" title="前端分析"></a>前端分析</h2><p>启动服务器，登录账号，监测Network选项卡，发现登录到首页会发送两个请求</p><ul><li><p>分类</p><blockquote><p>请求网址: <code>http://localhost/category/list</code><br>请求方法: <code>GET</code></p></blockquote></li><li><p>购物车</p><blockquote><p>请求网址: <code>http://localhost/shoppingCart/list</code><br>请求方法: <code>GET</code></p></blockquote></li></ul><p>其中分类请求我们之前写过了，但是当我们访问页面的时候，并没有加载出来，原因我们来看看前端代码</p><p>index.html</p><p><code>Promise.all</code>在处理多个异步请求时，需要等待绑定的每个ajax请求返回数据以后才能正常显示，也就是说，当这两个请求都成功时，才会正常显示，虽然<code>categoryListApi</code>可以正常返回数据，是因为我们之前已经写过了，那时候展示的是在新增菜品的下拉框中，现在是变为显示在页面上了，但是<code>cartListApi</code>不能，看一下代码的请求路径就知道，我们还没开始写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="title function_">initData</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">categoryListApi</span>(),<span class="title function_">cartListApi</span>(&#123;&#125;)]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//获取分类数据</span></span><br><span class="line">    <span class="keyword">if</span>(res[<span class="number">0</span>].<span class="property">code</span> === <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">categoryList</span> = res[<span class="number">0</span>].<span class="property">data</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(res[<span class="number">0</span>].<span class="property">data</span>) &amp;&amp; res[<span class="number">0</span>].<span class="property">data</span>.<span class="property">length</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">categoryId</span> = res[<span class="number">0</span>].<span class="property">data</span>[<span class="number">0</span>].<span class="property">id</span></span><br><span class="line">        <span class="keyword">if</span>(res[<span class="number">0</span>].<span class="property">data</span>[<span class="number">0</span>].<span class="property">type</span> === <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">getDishList</span>()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">getSetmealData</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.$notify(&#123; <span class="attr">type</span>:<span class="string">&#x27;warning&#x27;</span>, <span class="attr">message</span>:res[<span class="number">0</span>].<span class="property">msg</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取菜品数据</span></span><br><span class="line">    <span class="keyword">if</span>(res[<span class="number">1</span>].<span class="property">code</span> === <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cartData</span> = res[<span class="number">1</span>].<span class="property">data</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.$notify(&#123; <span class="attr">type</span>:<span class="string">&#x27;warning&#x27;</span>, <span class="attr">message</span>:res[<span class="number">1</span>].<span class="property">msg</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是获取菜品分类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取所有的菜品分类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">categoryListApi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/category/list&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们返回的菜品集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;List&lt;Dish&gt;&gt; <span class="title function_">get</span><span class="params">(Dish dish)</span> &#123;</span><br><span class="line">    <span class="comment">//条件查询器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//根据传进来的categoryId查询</span></span><br><span class="line">    queryWrapper.eq(dish.getCategoryId() != <span class="literal">null</span>, Dish::getCategoryId, dish.getCategoryId());</span><br><span class="line">    <span class="comment">//只查询状态为1的菜品（在售菜品）</span></span><br><span class="line">    queryWrapper.eq(Dish::getStatus, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//简单排下序</span></span><br><span class="line">    queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line">    <span class="comment">//获取查询到的结果作为返回值</span></span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> Result.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>购物车相关功能还没写，所以这里我们用一个写死了的json数据骗骗它<br>将url换成我们注释掉的那个就好了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取购物车内商品的集合</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cartListApi</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">        <span class="comment">// &#x27;url&#x27;: &#x27;/shoppingCart/list&#x27;,</span></span><br><span class="line">        <span class="comment">// 这里做了一个模拟数据</span></span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/front/cartData.json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        <span class="attr">params</span>:&#123;...data&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>cartData.json:</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;map&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在更改数据后，我们发现前端上并没有挑选口味规格这样的按钮</p><p><img src="https://s2.loli.net/2023/08/14/p9ZcSHQJb3dYjx1.png" alt="image-20230731094308991"></p><p>全都是一个个的+号，这是为什么呢，是因为我们的Dish实体类没有口味数据所导致的，那么这里的按钮不该是一个<code>+</code>，而应该是<code>选择规格</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divTypes&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;detailsDialog.item.flavors &amp;&amp; detailsDialog.item.flavors.length &gt; 0 &amp;&amp; !detailsDialog.item.number &quot;</span> </span></span><br><span class="line"><span class="tag">@<span class="attr">click</span> =<span class="string">&quot;chooseFlavorClick(detailsDialog.item)&quot;</span>&gt;</span>选择规格<span class="tag">&lt;/<span class="name">div</span>&gt;</span>               </span><br></pre></td></tr></table></figure><p>通过代码我们可以看出，选择规格按钮，是根据服务端返回数据中是否有flavors字段来决定的，但我们返回的是一个<code>List&lt;Dish&gt;</code>，其中并没有<code>flavors</code>属性，所以我们需要修改前面的方法返回值为<code>DishDto</code>，<code>DishDto</code>继承了<code>Dish</code>，且新增了<code>flavors</code>属性</p><h2 id="代码开发-5"><a href="#代码开发-5" class="headerlink" title="代码开发"></a>代码开发</h2><h3 id="菜品分类口味"><a href="#菜品分类口味" class="headerlink" title="菜品分类口味"></a>菜品分类口味</h3><p>由于Dish实体类是没有口味数据的，所以我们需要改动之前的List方法</p><p>改动的思路是类似于之前的Page方法，把返回值改为DishDto，再对DishDto里的flavors属性进行设置即可</p><p>Page方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历每一条records数据</span></span><br><span class="line">List&lt;DishDto&gt; list = records.stream().map((item) -&gt; &#123;</span><br><span class="line">    <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">    <span class="comment">//将数据赋给dishDto对象，这里面得到了records中的每一个Dish对象</span></span><br><span class="line">    <span class="comment">// 然后赋值给dishDto</span></span><br><span class="line">    BeanUtils.copyProperties(item, dishDto);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//然后获取一下dish对象的category_id属性</span></span><br><span class="line">    <span class="comment">// 得到dish对象的id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();  <span class="comment">//分类id</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据这个id属性，获取到Category对象（这里需要用@Autowired注入一个CategoryService对象）</span></span><br><span class="line">    <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 刚开始时，有些数据是没有绑定菜品分类，就会出错</span></span><br><span class="line">    <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//随后获取Category对象的name属性，也就是菜品分类名称</span></span><br><span class="line">        <span class="comment">// 得到id属性，就可以根据id查询对象，并且获得对象的名字</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最后将菜品分类名称赋给dishDto对象就好了</span></span><br><span class="line">        <span class="comment">// 最后把对象的菜品分类名称赋值给disDto对象即可</span></span><br><span class="line">        dishDto.setCategoryName(categoryName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结果返回一个dishDto对象</span></span><br><span class="line">    <span class="keyword">return</span> dishDto;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//并将dishDto对象封装成一个集合，作为我们的最终结果，这个集合，就是要展示的新数据</span></span><br><span class="line">&#125;).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>改动后的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="comment">// 先将返回值类型改为List&lt;DishDto&gt;</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;List&lt;DishDto&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 得到该菜品项对应的菜品</span></span><br><span class="line">    queryWrapper.eq(dish.getCategoryId() != <span class="literal">null</span>,Dish::getCategoryId,dish.getCategoryId());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加条件，查询状态为1（起售状态）的菜品</span></span><br><span class="line">    queryWrapper.eq(Dish::getStatus,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加排序条件(先按照sort来排序，如果sort相同，再按照更新时间来排序)</span></span><br><span class="line">    queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    List&lt;DishDto&gt; dishDtoList = list.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">        BeanUtils.copyProperties(item,dishDto);</span><br><span class="line">        <span class="comment">// 分类id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">        <span class="comment">// 根据Id查询分类对象</span></span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (category != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 如果分类对象查询到了，说明该菜品有分类</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            <span class="comment">// 就让菜品设置一下这个分类对象名字</span></span><br><span class="line">            dishDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到菜品的id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">itemId</span> <span class="operator">=</span> item.getId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在口味表里面查询</span></span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 查找与当前菜品id相同的口味信息</span></span><br><span class="line">        wrapper.eq(DishFlavor::getDishId,itemId);</span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishFlavorService.list(wrapper);</span><br><span class="line">        <span class="comment">// 设置菜品口味</span></span><br><span class="line">        dishDto.setFlavors(flavors);</span><br><span class="line">        <span class="keyword">return</span> dishDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> Result.success(dishDtoList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们来测试一下：</p><img src="https://s2.loli.net/2023/08/14/r63NjUGcqFgsfIb.png" alt="image-20230731101037453" style="zoom:50%;" /><img src="https://s2.loli.net/2023/08/14/mVJaw2gGCMRfnvY.png" alt="image-20230731101112900" style="zoom:50%;" /><p>此时这里就有选择规格按钮了</p><img src="https://s2.loli.net/2023/08/14/QBEPAaLOgeKFuwv.png" alt="image-20230731101235788" style="zoom:50%;" /><p>在页面上也能看得到数据了，说明完成了</p><p>虽然完成了，但是当我们点击其他的时候</p><img src="https://s2.loli.net/2023/08/14/vLAE6yoxsumgTCR.png" alt="image-20230731101716418" style="zoom: 67%;" /> <p>发现这里出现了一个问题，404异常，我们去到控制台看一下</p><img src="https://s2.loli.net/2023/08/14/SIR9WlTqkAfiQ5E.png" alt="image-20230731101826241" style="zoom: 50%;" /><p>这里是一个套餐，没有显示出来，我们并没有给套餐书写对应的list方法，所以它找不到对应的口味，写法其实和菜品分类口味没什么区别，这里相当于复盘一下</p><h3 id="套餐分类口味"><a href="#套餐分类口味" class="headerlink" title="套餐分类口味"></a>套餐分类口味</h3><p>这里是一个GET请求，请求的地址是&#x2F;setmeal&#x2F;list，并携带了两个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;List&lt;SetmealDto&gt;&gt; <span class="title function_">list</span><span class="params">(Setmeal setmeal)</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 得到该套餐项对应的菜品</span></span><br><span class="line">    queryWrapper.eq(setmeal.getCategoryId() != <span class="literal">null</span>,Setmeal::getCategoryId,setmeal.getCategoryId());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加条件，查询状态为1（起售状态）的菜品</span></span><br><span class="line">    queryWrapper.eq(Setmeal::getStatus,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加排序条件(按照更新时间来排序)</span></span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Setmeal&gt; list = setMealService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    List&lt;SetmealDto&gt; setmealDtoList = list.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line">        BeanUtils.copyProperties(item,setmealDto);</span><br><span class="line">        <span class="comment">// 分类id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">        <span class="comment">// 根据Id查询分类对象</span></span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (category != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 如果分类对象查询到了，说明该套餐有分类</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            <span class="comment">// 就让套餐设置一下这个分类对象名字</span></span><br><span class="line">            setmealDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到套餐的id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">itemId</span> <span class="operator">=</span> item.getId();</span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;SetmealDish&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 查找与当前套餐id相同的口味信息</span></span><br><span class="line">        wrapper.eq(SetmealDish::getDishId,itemId);</span><br><span class="line">        List&lt;SetmealDish&gt; flavors = setmealDishService.list(wrapper);</span><br><span class="line">        <span class="comment">// 设置菜品口味</span></span><br><span class="line">        setmealDto.setSetmealDishes(flavors);</span><br><span class="line">        <span class="keyword">return</span> setmealDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> Result.success(setmealDtoList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟之前的代码差别不大， 就是复制过来修改一下即可</p><p>然后我们重启一下服务器</p><img src="https://s2.loli.net/2023/08/14/rtVM9luSnXbcq2B.png" alt="image-20230731103219327" style="zoom:50%;" /><p>发现这里的数据回显了，但是没有口味,我们再去NetWork那地方看看</p><p><img src="https://s2.loli.net/2023/08/14/dXY3SGCBFt7Wnor.png" alt="image-20230731103338772"></p><p>这里发现数据回显了，但是没有口味（套餐基本上都是包括一整份了，所以没有菜品口味之说）</p><h1 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h1><h2 id="需求分析-12"><a href="#需求分析-12" class="headerlink" title="需求分析"></a>需求分析</h2><p>移动端的用户可以将菜品或者套餐添加到购物车。对于菜品来说，如果设置了口味信息，则需要选择规格才能加入购物车;对于套餐来说，可以直接点击+号将当前套餐加入购物车。在购物车里中可以修改菜品和套餐的数量，也可以清空购物车。</p><h2 id="数据模型-4"><a href="#数据模型-4" class="headerlink" title="数据模型"></a>数据模型</h2><table><thead><tr><th align="center">Field</th><th align="center">Type</th><th align="center">Collation</th><th align="center">Null</th><th align="center">Key</th><th align="center">Default</th><th align="center">Comment</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center">PRI</td><td align="center">(NULL)</td><td align="center">主键</td></tr><tr><td align="center">name</td><td align="center">varchar(50)</td><td align="center">utf8_bin</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">名称</td></tr><tr><td align="center">image</td><td align="center">varchar(100)</td><td align="center">utf8_bin</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">图片</td></tr><tr><td align="center">user_id</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">主键</td></tr><tr><td align="center">dish_id</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">菜品id</td></tr><tr><td align="center">setmeal_id</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">套餐id</td></tr><tr><td align="center">dish_flavor</td><td align="center">varchar(50)</td><td align="center">utf8_bin</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">口味</td></tr><tr><td align="center">number</td><td align="center">int</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">1</td><td align="center">数量</td></tr><tr><td align="center">amount</td><td align="center">decimal(10,2)</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">金额</td></tr><tr><td align="center">create_time</td><td align="center">datetime</td><td align="center">(NULL)</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">创建时间</td></tr></tbody></table><h2 id="梳理交互过程-8"><a href="#梳理交互过程-8" class="headerlink" title="梳理交互过程"></a>梳理交互过程</h2><ol><li>点击加入购物车按钮，页面发送ajax请求，请求服务端，将菜品&#x2F;套餐添加到购物车</li><li>点击购物车图标，页面发送ajax请求，请求服务端，查询购物车中的菜品和套餐</li><li>点击清空购物车按钮，页面发送ajax请求，请求服务端来执行清空购物车操作</li></ol><h2 id="准备工作-3"><a href="#准备工作-3" class="headerlink" title="准备工作"></a>准备工作</h2><p>实体类<code>ShoppingCart</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 购物车</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCart</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户id</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品id</span></span><br><span class="line">    <span class="keyword">private</span> Long dishId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐id</span></span><br><span class="line">    <span class="keyword">private</span> Long setmealId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//口味</span></span><br><span class="line">    <span class="keyword">private</span> String dishFlavor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数量</span></span><br><span class="line">    <span class="keyword">private</span> Integer number;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//金额</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mapper接口<code>ShoppingCartMapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ShoppingCartMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;ShoppingCart&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务层接口<code>ShoppingCartService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ShoppingCartService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;ShoppingCart&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务层实现类<code>ShoppingCartServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ShoppingCartMapper, ShoppingCart&gt; <span class="keyword">implements</span> <span class="title class_">ShoppingCartService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制层<code>ShoppingCartController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/shoppingCart&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShoppingCartService shoppingCartService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码开发-6"><a href="#代码开发-6" class="headerlink" title="代码开发"></a>代码开发</h2><h3 id="加入购物车"><a href="#加入购物车" class="headerlink" title="加入购物车"></a>加入购物车</h3><p>在点击加入购物车后，发送了一个<code>POST</code>请求，请求地址为<code>shoppingCart/add</code></p><p><img src="https://s2.loli.net/2023/08/14/W5fy4tcS2gi6Le9.png" alt="image-20230731145101091"></p><p>我们先来测试一下是否能接收到数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;ShoppingCart&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> ShoppingCart shoppingCart)</span>&#123;</span><br><span class="line">    log.info(shoppingCart.toString());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/14/qCU9ruATpy5IBFD.png" alt="image-20230731145713414"></p><p>在控制台这边查看后，发现已经得到了数据，说明可以接收，参数也没有什么问题</p><p>编写代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;ShoppingCart&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> ShoppingCart shoppingCart)</span>&#123;</span><br><span class="line">    log.info(shoppingCart.toString());</span><br><span class="line">    <span class="comment">// 得到当前用户的id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">currentId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    shoppingCart.setUserId(currentId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前菜品id(就是当前添加进来的菜品id)</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> shoppingCart.getDishId();</span><br><span class="line"></span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 判断添加的是菜品还是套餐</span></span><br><span class="line">    <span class="keyword">if</span> (dishId != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 如果菜品id不为空，说明传入的是菜品，反之是套餐</span></span><br><span class="line">        <span class="comment">// 并判断数据库中是否有菜品id</span></span><br><span class="line">        queryWrapper.eq(ShoppingCart::getDishId,dishId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 判断数据中是否有这个套餐id</span></span><br><span class="line">        queryWrapper.eq(ShoppingCart::getSetmealId,shoppingCart.getSetmealId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询菜品或套餐是否存在于购物车中</span></span><br><span class="line">    <span class="type">ShoppingCart</span> <span class="variable">cart</span> <span class="operator">=</span> shoppingService.getOne(queryWrapper);</span><br><span class="line">    <span class="comment">// 存在于购物车中</span></span><br><span class="line">    <span class="keyword">if</span> (cart != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 得到数量</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> cart.getNumber();</span><br><span class="line">        cart.setNumber(number+<span class="number">1</span>);</span><br><span class="line">        shoppingService.updateById(cart);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 不存在，就需要为当前购物车设置创建时间，因为它没有给默认值,并插入到数据库中</span></span><br><span class="line">        shoppingCart.setCreateTime(LocalDateTime.now());</span><br><span class="line">        <span class="comment">// 不存在，就需要为当前购物车设置数量</span></span><br><span class="line">        shoppingCart.setNumber(<span class="number">1</span>);</span><br><span class="line">        shoppingService.save(shoppingCart);</span><br><span class="line">        cart = shoppingCart;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.success(cart);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>功能测试</p><p>  重启服务器，尝试添加购物车，随后去数据库中查询是否有对应数据</p></li></ul><h3 id="查看购物车"><a href="#查看购物车" class="headerlink" title="查看购物车"></a>查看购物车</h3><p>之前为了不报错，我们将查看购物车的地址换成了一个死数据<br>那现在我们要做的就是换成真数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取购物车内商品的集合</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cartListApi</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/shoppingCart/list&#x27;</span>,</span><br><span class="line">        <span class="comment">//&#x27;url&#x27;: &#x27;/front/cartData.json&#x27;,</span></span><br><span class="line">        <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        <span class="attr">params</span>: &#123;...data&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求路径为<code>/shoppingCart/list</code>，请求方式为<code>GET</code><br>直接来<code>ShoppingCartController</code>中添加对应的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;List&lt;ShoppingCart&gt;&gt; <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 使用数据库中的userId和当前登录的用户Id比较来查看购物车</span></span><br><span class="line">    queryWrapper.eq(ShoppingCart::getUserId,BaseContext.getCurrentId());</span><br><span class="line">    <span class="comment">// 将查询到的数据呈现在购物车中</span></span><br><span class="line">    List&lt;ShoppingCart&gt; list = shoppingService.list(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> Result.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启服务器测试一下</p><p>如果没出来，说明有缓存，ctrl+F5刷新一下缓存就好了</p><p>如果一切顺利的话，就可以看到数据了，不过减号的功能我们没写，后面复盘再补上</p><img src="https://s2.loli.net/2023/08/14/CDtGc7mV9KyeXUH.png" alt="image-20230731160323810" style="zoom:50%;" /><h3 id="清空购物车"><a href="#清空购物车" class="headerlink" title="清空购物车"></a>清空购物车</h3><p>我们点击上图中的清空按钮，请求路径为<code>/shoppingCart/clean</code>，请求方式为<code>DELETE</code></p><blockquote><p>请求网址: <code>http://localhost/shoppingCart/clean</code><br>请求方法: <code>DELETE</code></p></blockquote><p>清空购物车的逻辑倒是比较简单，获取用户id，然后去<code>shopping__cart</code>表中删除对应id的数据即可<br>那么我们现在就来<code>ShoppingCartController</code>中编写对应的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/clean&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">delete</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前用户id，根据用户id去ShoppingCart表里面删除所有数据即可</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">currentId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    <span class="comment">// 查询当前用户id的数据</span></span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(ShoppingCart::getUserId,currentId);</span><br><span class="line">    shoppingService.remove(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;成功清空购物车&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="用户下单"><a href="#用户下单" class="headerlink" title="用户下单"></a>用户下单</h1><h2 id="需求分析-13"><a href="#需求分析-13" class="headerlink" title="需求分析"></a>需求分析</h2><p>移动端用户将菜品或者套餐加入购物车后，可以点击购物车中的去结算按钮，页面跳转到订单确认页面，点击去支付按钮，完成下单操作</p><h2 id="数据模型-5"><a href="#数据模型-5" class="headerlink" title="数据模型"></a>数据模型</h2><p>用户下单业务对应的数据表为<code>orders</code>表和<code>order_detail</code>表</p><p><code>orders</code>表主要是描述用户的订单信息</p><p><code>order_detail</code>表是你买了什么什么对象，这样的一个概括，是一个订单明细表</p><ul><li><code>orders</code>表</li></ul><table><thead><tr><th align="center">Field</th><th align="center">Type</th><th align="center">Collation</th><th align="center">Null</th><th align="center">Key</th><th align="center">Default</th><th align="center">Comment</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center">PRI</td><td align="center">(NULL)</td><td align="center">主键</td></tr><tr><td align="center">number</td><td align="center">varchar(50)</td><td align="center">utf8_bin</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">订单号</td></tr><tr><td align="center">status</td><td align="center">int</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">1</td><td align="center">订单状态 1待付款，2待派送，3已派送，4已完成，5已取消</td></tr><tr><td align="center">user_id</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">下单用户</td></tr><tr><td align="center">address_book_id</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">地址id</td></tr><tr><td align="center">order_time</td><td align="center">datetime</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">下单时间</td></tr><tr><td align="center">checkout_time</td><td align="center">datetime</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">结账时间</td></tr><tr><td align="center">pay_method</td><td align="center">int</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">1</td><td align="center">支付方式 1微信,2支付宝</td></tr><tr><td align="center">amount</td><td align="center">decimal(10,2)</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">实收金额</td></tr><tr><td align="center">remark</td><td align="center">varchar(100)</td><td align="center">utf8_bin</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">备注</td></tr><tr><td align="center">phone</td><td align="center">varchar(255)</td><td align="center">utf8_bin</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">手机号</td></tr><tr><td align="center">address</td><td align="center">varchar(255)</td><td align="center">utf8_bin</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">地址</td></tr><tr><td align="center">user_name</td><td align="center">varchar(255)</td><td align="center">utf8_bin</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">用户名</td></tr><tr><td align="center">consignee</td><td align="center">varchar(255)</td><td align="center">utf8_bin</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">收货人</td></tr></tbody></table><ul><li><code>order_detail</code>表</li></ul><table><thead><tr><th align="center">Field</th><th align="center">Type</th><th align="center">Collation</th><th align="center">Null</th><th align="center">Key</th><th align="center">Default</th><th align="center">Comment</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center">PRI</td><td align="center">(NULL)</td><td align="center">主键</td></tr><tr><td align="center">name</td><td align="center">varchar(50)</td><td align="center">utf8_bin</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">名字</td></tr><tr><td align="center">image</td><td align="center">varchar(100)</td><td align="center">utf8_bin</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">图片</td></tr><tr><td align="center">order_id</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">订单id</td></tr><tr><td align="center">dish_id</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">菜品id</td></tr><tr><td align="center">setmeal_id</td><td align="center">bigint</td><td align="center">(NULL)</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">套餐id</td></tr><tr><td align="center">dish_flavor</td><td align="center">varchar(50)</td><td align="center">utf8_bin</td><td align="center">YES</td><td align="center"></td><td align="center">(NULL)</td><td align="center">口味</td></tr><tr><td align="center">number</td><td align="center">int</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">1</td><td align="center">数量</td></tr><tr><td align="center">amount</td><td align="center">decimal(10,2)</td><td align="center">(NULL)</td><td align="center">NO</td><td align="center"></td><td align="center">(NULL)</td><td align="center">金额</td></tr></tbody></table><h2 id="梳理交互过程-9"><a href="#梳理交互过程-9" class="headerlink" title="梳理交互过程"></a>梳理交互过程</h2><ol><li>在购物车中点击去结算按钮，页面跳转到订单确认页面</li><li>在订单确认页面中，发送ajax请求，请求服务端，获取当前登录用户的默认地址</li><li>在订单确认页面，发送ajax请求，请求服务端，获取当前登录用户的购物车数据</li><li>在订单确认页面点击去支付按钮，发送ajax请求，请求服务端，完成下单操作</li></ol><h2 id="准备工作-4"><a href="#准备工作-4" class="headerlink" title="准备工作"></a>准备工作</h2><p>实体类<code>Orders</code>和<code>OrderDetail</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单号</span></span><br><span class="line">    <span class="keyword">private</span> String number;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单状态 1待付款，2待派送，3已派送，4已完成，5已取消</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//下单用户id</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址id</span></span><br><span class="line">    <span class="keyword">private</span> Long addressBookId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//下单时间</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime orderTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//结账时间</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime checkoutTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//支付方式 1微信，2支付宝</span></span><br><span class="line">    <span class="keyword">private</span> Integer payMethod;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//实收金额</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//备注</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手机号</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//收货人</span></span><br><span class="line">    <span class="keyword">private</span> String consignee;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单明细</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDetail</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单id</span></span><br><span class="line">    <span class="keyword">private</span> Long orderId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品id</span></span><br><span class="line">    <span class="keyword">private</span> Long dishId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐id</span></span><br><span class="line">    <span class="keyword">private</span> Long setmealId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//口味</span></span><br><span class="line">    <span class="keyword">private</span> String dishFlavor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//数量</span></span><br><span class="line">    <span class="keyword">private</span> Integer number;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//金额</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mapper接口<code>OrderMapper</code>、<code>OrderDetailMapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.Orders;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Orders&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.OrderDetail;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderDetailMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;OrderDetail&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务层接口<code>OrderService</code>、<code>OrderDetailService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.Orders;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Orders&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.OrderDetail;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderDetailService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;OrderDetail&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务层接口实现类<code>OrderServiceImpl</code>、<code>OrderDetailServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.Orders;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.mapper.OrderMapper;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;OrderMapper, Orders&gt; <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.OrderDetail;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.mapper.OrderDetailMapper;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.service.OrderDetailService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDetailServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;OrderDetailMapper, OrderDetail&gt; <span class="keyword">implements</span> <span class="title class_">OrderDetailService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制层<code>OrderController</code>、<code>OrderDetailController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.eastwind.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.eastwind.service.OrderDetailService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/orderDetail&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDetailController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderDetailService orderDetailService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2023/08/14/CjcM1fAGTRISHYX.png" alt="image-20230731182917074" style="zoom:50%;" /><p>在点击去支付之后，发送了一个<code>POST</code>请求，请求地址为<code>order/submit</code></p><p><img src="https://s2.loli.net/2023/08/14/bKyGPnmzTkdjIHV.png" alt="image-20230731183103540"></p><p>查看一下会得到的数据</p><ul><li><p><code>addressBookId</code>：地址的Id</p></li><li><p>payMethod:付款的方式</p></li><li><p>remark：备注</p>  <img src="https://s2.loli.net/2023/08/14/xtkIMTZyiYRH3nh.png" alt="image-20230731183208200" style="zoom:50%;" /></li></ul><p>这时候可能会有疑惑，怎么就传递了这几个数据</p><p>这是因为我们登录后就可以得到当前用户的id，能拿到id就能根据id去购物车里面找数据</p><h2 id="代码开发-7"><a href="#代码开发-7" class="headerlink" title="代码开发"></a>代码开发</h2><p>具体的<code>submit</code>方法我们放在<code>OrderService</code>写，<code>OrderController</code>调用写好的<code>submit</code>方法就好了</p><p>编写具体的submit方法的逻辑代码，先分析一下下单功能，都需要做什么事情</p><ul><li>获取当前用户id</li><li>根据用户id查询其购物车数据</li><li>将查询到的购物车数据，插入到订单表中（1条）</li><li>将查询到的购物车数据，插入到订单明细表中（多条）</li><li>清空购物车</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/submit&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">submit</span><span class="params">(<span class="meta">@RequestBody</span> Orders orders)</span>&#123;</span><br><span class="line">    log.info(orders.toString());</span><br><span class="line">    orderService.submit(orders);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;用户下单成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.eastwind.entity.Orders;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Orders&gt; &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">submit</span><span class="params">(Orders orders)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;OrderMapper, Orders&gt; <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShoppingService shoppingCartService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AddressBookService addressBookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderDetailService orderDetailService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">submit</span><span class="params">(Orders orders)</span> &#123;</span><br><span class="line">        <span class="comment">//获取当前用户id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">        <span class="comment">//条件构造器</span></span><br><span class="line">        LambdaQueryWrapper&lt;ShoppingCart&gt; shoppingCartLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//根据当前用户id查询其购物车数据</span></span><br><span class="line">        shoppingCartLambdaQueryWrapper.eq(userId != <span class="literal">null</span>, ShoppingCart::getUserId, userId);</span><br><span class="line">        List&lt;ShoppingCart&gt; shoppingCarts = shoppingCartService.list(shoppingCartLambdaQueryWrapper);</span><br><span class="line">        <span class="comment">//判断一下购物车是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (shoppingCarts == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;购物车数据为空，不能下单&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断一下地址是否有误</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">addressBookId</span> <span class="operator">=</span> orders.getAddressBookId();</span><br><span class="line">        <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getById(addressBookId);</span><br><span class="line">        <span class="keyword">if</span> (addressBookId == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;地址信息有误，不能下单&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取用户信息，为了后面赋值</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(userId);</span><br><span class="line">        <span class="comment">// 得到一个随机的订单id</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> IdWorker.getId();</span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//向订单细节表插入多条数据</span></span><br><span class="line">        List&lt;OrderDetail&gt; orderDetailList= shoppingCarts.stream().map((item) -&gt; &#123;</span><br><span class="line">            <span class="comment">// new一个订单明细数据,将订单明细的数据放进去</span></span><br><span class="line">            <span class="type">OrderDetail</span> <span class="variable">orderDetail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderDetail</span>();</span><br><span class="line">            orderDetail.setOrderId(orderId);</span><br><span class="line">            orderDetail.setName(item.getName());</span><br><span class="line">            orderDetail.setImage(item.getImage());</span><br><span class="line">            orderDetail.setDishId(item.getDishId());</span><br><span class="line">            orderDetail.setSetmealId(item.getSetmealId());</span><br><span class="line">            orderDetail.setDishFlavor(item.getDishFlavor());</span><br><span class="line">            orderDetail.setNumber(item.getNumber());</span><br><span class="line">            orderDetail.setAmount(item.getAmount());</span><br><span class="line">            <span class="comment">// 对所有数据进行累加，计算总金额</span></span><br><span class="line">            amount.addAndGet(item.getAmount().multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(item.getNumber())).intValue());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> orderDetail;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向订单表插入一条数据</span></span><br><span class="line">        orders.setId(orderId);</span><br><span class="line">        orders.setNumber(String.valueOf(orderId));</span><br><span class="line">        orders.setStatus(<span class="number">2</span>);</span><br><span class="line">        orders.setUserId(userId);</span><br><span class="line">        orders.setAddressBookId(addressBookId);</span><br><span class="line">        orders.setOrderTime(LocalDateTime.now());</span><br><span class="line">        orders.setCheckoutTime(LocalDateTime.now());</span><br><span class="line">        orders.setAmount(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(amount.get()));</span><br><span class="line">        orders.setPhone(addressBook.getPhone());</span><br><span class="line">        orders.setUserName(user.getName());</span><br><span class="line">        orders.setConsignee(addressBook.getConsignee());</span><br><span class="line">        orders.setAddress(</span><br><span class="line">                (addressBook.getProvinceName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span>:addressBook.getProvinceName())+</span><br><span class="line">                        (addressBook.getCityName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span>:addressBook.getCityName())+</span><br><span class="line">                        (addressBook.getDistrictName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span>:addressBook.getDistrictName())+</span><br><span class="line">                        (addressBook.getDetail() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span>:addressBook.getDetail())</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据查询到的购物车数据，对订单表插入数据（1条）</span></span><br><span class="line">        <span class="built_in">super</span>.save(orders);</span><br><span class="line">        <span class="comment">//根据查询到的购物车数据，对订单明细表插入数据（多条）</span></span><br><span class="line">        orderDetailService.saveBatch(orderDetailList);</span><br><span class="line">        <span class="comment">//清空购物车数据</span></span><br><span class="line">        shoppingCartService.remove(shoppingCartLambdaQueryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启服务器，测试结算按钮，看到如下页面就说明大功告成啦</p><img src="https://s2.loli.net/2023/08/14/n6khPpguNqJjl7Q.png" alt="image-20230731194028338" style="zoom:50%;" /><p>后面再对之前的功能开始进行补充</p>]]></content>
      
      
      <categories>
          
          <category> 实战项目 </category>
          
          <category> 瑞吉外卖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瑞吉外卖 </tag>
            
            <tag> 实战项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis入门</title>
      <link href="/eastwind/6a343b7f.html"/>
      <url>/eastwind/6a343b7f.html</url>
      
        <content type="html"><![CDATA[<h1 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h1><ul><li>Redis是一个基于内存的<code>key-value</code>结构数据库<ul><li>基于内存存储，读写性能高</li><li>适合存储热点数据（热点商品、咨询、新闻）</li></ul></li><li>官网：<code>https://redis.io/</code></li></ul><h1 id="Redis的简介"><a href="#Redis的简介" class="headerlink" title="Redis的简介"></a>Redis的简介</h1><ul><li><p>Redis是用C语言开发的一个开源的、高性能的键值对(key-value)数据库，官方提供的数据是可以达到100000+的QPS（每秒内查询次数）。它存储的value类型比较丰富，也被称为结构化NoSql数据库</p></li><li><p>NoSql(Not Only Sql)，不仅仅是SQL，泛指非关系型数据库，NoSql数据库并不是要取代关系型数据库，而是关系型数据库的补充</p><p>  关系型数据库(RDBMS)：MySQL、Oracl、DB2、SQLServer<br>  非关系型数据库(NoSql)：Redis、Mongo DB、MemCached</p></li><li><p>Redis应用场景：缓存、消息队列、任务队列、分布式锁</p></li></ul><h2 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h2><ul><li>这里我们在Linux和Windows上都装一下<ul><li>Windows 版：<code>https://github.com/microsoftarchive/redis/releases</code></li><li>Linux 版：<code>https://download.redis.io/releases/</code></li></ul></li></ul><h3 id="Windows安装Redis"><a href="#Windows安装Redis" class="headerlink" title="Windows安装Redis"></a>Windows安装Redis</h3><ul><li>直接下载对应版本的<code>.zip</code>压缩包，直接解压</li></ul><h3 id="Linux安装Redis"><a href="#Linux安装Redis" class="headerlink" title="Linux安装Redis"></a>Linux安装Redis</h3><ul><li><p>Linux系统安装Redis步骤：</p><ol><li><p>将Redis安装包上传到Linux</p></li><li><p>解压安装包，改成自己的redis版本</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redis-4.0.0.tar.gz -C /usr/local/</span><br></pre></td></tr></table></figure></li><li><p>安装Redis的依赖环境gcc</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖环境</span></span><br><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure></li><li><p>进入<code>/usr/local/redis根目录</code>，进行编译</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入到根目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/redis根目录</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure></li><li><p>进入redis的src目录，进行安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入到src目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/redis根目录/src</span><br><span class="line"><span class="comment"># 进行安装</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="服务启动与停止"><a href="#服务启动与停止" class="headerlink" title="服务启动与停止"></a>服务启动与停止</h2><h3 id="Linux启动与停止"><a href="#Linux启动与停止" class="headerlink" title="Linux启动与停止"></a>Linux启动与停止</h3><ul><li>进入到<code>/src</code>目录下，执行<code>redis-server</code>即可启动服务，默认端口号为<code>6379</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入到根目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/redis/src</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行redis-server</span></span><br><span class="line">./redis-server</span><br></pre></td></tr></table></figure><p>​</p><h3 id="Linux设置后台运行"><a href="#Linux设置后台运行" class="headerlink" title="Linux设置后台运行"></a>Linux设置后台运行</h3><p>进入到redis根目录下，修改配置redis.conf文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入到redis根目录下</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">vim redis.conf</span><br></pre></td></tr></table></figure><p>找到<code>daemonize no</code>字段，将其修改为<code>daemonize yes</code></p><p>在redis根目录以redis.conf作为配置文件在后台运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src/redis-server ./redis.conf</span><br></pre></td></tr></table></figure><h3 id="Linux开启密码校验"><a href="#Linux开启密码校验" class="headerlink" title="Linux开启密码校验"></a>Linux开启密码校验</h3><ul><li>还是修改redis.conf配置文件，找到<code>requirepass</code>这行，将其注释去掉，并在后面写上自己的密码</li><li>然后杀掉原进程再重新启动</li></ul><p><img src="https://s2.loli.net/2023/08/14/lgT1NfVWrIxQCjY.png" alt="image-20230804214017944"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新启动</span></span><br><span class="line">src/redis-server ./redis.conf </span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录时同时进行认证（连接的是cli客户端服务，-h是本地服务，-p设置的是端口号，-a是auth也相当于密码）</span></span><br><span class="line">src/redis-cli -h localhost -p 6379 -a 密码</span><br></pre></td></tr></table></figure><p>修改完毕之后还是杀进程，然后重启服务</p><p><img src="https://s2.loli.net/2023/08/14/wDLpANBq8C2hcJd.png" alt="image-20230804214221395"></p><h3 id="Linux开启远程连接"><a href="#Linux开启远程连接" class="headerlink" title="Linux开启远程连接"></a>Linux开启远程连接</h3><ul><li>还是修改redis.conf配置文件，找到<code>bind 127.0.0.1</code>这行，把这行注释掉，这一行是让我们本地进行连接的，注释之后就是开启了远程连接</li><li>之后设置防火墙，开启6379端口</li><li>杀死进程，并重新启动服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启6379端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=6379/tcp --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置立即生效</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看开放的端口</span></span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure><p>最后在Windows的redis根目录下，按住Shift+右键打开PowerShell窗口，连接Linux的Redis</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\redis-cli.exe -h 虚拟机的ip地址 -p 6379 -a 密码</span><br></pre></td></tr></table></figure><h1 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Redis存储的是key-value结构的数据，其中key是字符串类型，value有五种常用的数据类型</p><ul><li>字符串 string（普通字符串，常用）</li><li>哈希 hash（hash适合存储对象）</li><li>列表 list（list按照插入顺序排序，可以有重复元素）</li><li>集合 set（无序集合，没有重复元素）</li><li>有序集合 sorted set（有序集合，没有重复元素）</li></ul><h2 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h2><h3 id="字符串string操作命令"><a href="#字符串string操作命令" class="headerlink" title="字符串string操作命令"></a>字符串string操作命令</h3><table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">SET key value</td><td align="center">设置指定key的值</td></tr><tr><td align="center">GET key</td><td align="center">获取指定key的值</td></tr><tr><td align="center">SETEX key seconds value</td><td align="center">设置指定key的值，并将key的过期时间设为seconds秒</td></tr><tr><td align="center">SETNX key value</td><td align="center">只有在key不存在时设置key的值</td></tr></tbody></table><h4 id="操作命令示例"><a href="#操作命令示例" class="headerlink" title="操作命令示例:"></a>操作命令示例:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name 666</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">&quot;666&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; setex name2 3 888</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name2</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; setnx name2 888</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; setnx name2 555</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;name2&quot;</span></span><br><span class="line">2) <span class="string">&quot;name&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get name2</span><br><span class="line"><span class="string">&quot;888&quot;</span></span><br></pre></td></tr></table></figure><h3 id="哈希hash操作命令"><a href="#哈希hash操作命令" class="headerlink" title="哈希hash操作命令"></a>哈希hash操作命令</h3><p><code>Redis Hash</code>是一个<code>String</code>类型的<code>Field</code>和<code>Value</code>的映射表，<code>Hash</code>特别适合用于存储对象</p><table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">HSET key field value</td><td align="center">将哈希表key 中的字段field的值设为value</td></tr><tr><td align="center">HGET key field</td><td align="center">获取存储在哈希表中指定字段的值</td></tr><tr><td align="center">HDEL key field</td><td align="center">删除存储在哈希表中的指定字段</td></tr><tr><td align="center">HKEYS key</td><td align="center">获取哈希表中所有字段</td></tr><tr><td align="center">HVALS key</td><td align="center">获取哈希表中所有值</td></tr><tr><td align="center">HGETALL key</td><td align="center">获取在哈希表中指定key的所有字段和值</td></tr></tbody></table><h4 id="操作命令示例-1"><a href="#操作命令示例-1" class="headerlink" title="操作命令示例"></a>操作命令示例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset table1 name wangwu// 设置table1表中的name字段值为wangwu</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hget table1 name// 获取存储在table1表中的name字段</span><br><span class="line"><span class="string">&quot;wangwu&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hdel table1 name// 删除存储在table1表中的name字段</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hget table1 name// 此时已经被删除了，得到的是nil</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; hset table1 name lisi// 设置table1表中的name字段值为lisi</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hset table1 age 10// 设置table1表中的age字段值为10</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hkeys table1// 获取哈希表中所有字段</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hvals table1// 获取哈希表中所有值</span><br><span class="line">1) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">2) <span class="string">&quot;10&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hgetall table1// 获取在哈希表中指定key的所有字段和值</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">3) <span class="string">&quot;age&quot;</span></span><br><span class="line">4) <span class="string">&quot;10&quot;</span></span><br></pre></td></tr></table></figure><h3 id="列表list操作命令"><a href="#列表list操作命令" class="headerlink" title="列表list操作命令"></a>列表list操作命令</h3><p><code>Redis List</code>是简单的字符串列表，按照插入顺序排序</p><table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>LPUSH</code> key value1 [value2]</td><td align="center">将一个或多个值插入到列表头部</td></tr><tr><td align="center"><code>LRANGE</code> key start stop</td><td align="center">获取列表指定范围内的元素</td></tr><tr><td align="center"><code>RPOP</code> key</td><td align="center">移除并获取列表最后一个元素</td></tr><tr><td align="center"><code>LLEN</code> key</td><td align="center">获取列表长度</td></tr><tr><td align="center"><code>BRPOP</code> key1 [key2] timeout</td><td align="center">移出并获取列表的最后一个元素 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</td></tr></tbody></table><h4 id="操作命令示例-2"><a href="#操作命令示例-2" class="headerlink" title="操作命令示例"></a>操作命令示例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush list a b c// 将a、b、c插入到列表头部</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1// 查询从0到-1位置的元素,-1表示最后一个值</span><br><span class="line">1) <span class="string">&quot;c&quot;</span>// c在最前面是因为列表是按照插入顺序排序的，最后插入的在最前面</span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; rpop list// 删除最后一个元素，并得到值，a是最先插入的，所以是最后一个</span><br><span class="line"><span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; llen list// 获取长度</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; brpop list 3  // 移除列表的最后一个元素，如果列表没有值，会阻塞<span class="built_in">timeout</span>秒，否则删除</span><br><span class="line">1) <span class="string">&quot;list&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; brpop list 3</span><br><span class="line">1) <span class="string">&quot;list&quot;</span></span><br><span class="line">2) <span class="string">&quot;c&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; brpop list 3// 阻塞3秒</span><br><span class="line">(nil)</span><br><span class="line">(3.09s)</span><br></pre></td></tr></table></figure><h3 id="集合set操作命令"><a href="#集合set操作命令" class="headerlink" title="集合set操作命令"></a>集合set操作命令</h3><p><code>Redis set</code>是<code>String</code>类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据<br>概念和数学中的集合概念基本一致</p><table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">SADD key member1 [member2]</td><td align="center">向集合添加一个或多个成员</td></tr><tr><td align="center">SMEMBERS key</td><td align="center">返回集合中的所有成员</td></tr><tr><td align="center">SCARD key</td><td align="center">获取集合的成员数</td></tr><tr><td align="center">SINTER key1 [key2]</td><td align="center">返回给定所有集合的交集</td></tr><tr><td align="center">SUNION key1 [key2]</td><td align="center">返回所有给定集合的并集</td></tr><tr><td align="center">SDIFF key1 [key2]</td><td align="center">返回给定所有集合的差集</td></tr><tr><td align="center">SREM key member1 [member2]</td><td align="center">移除集合中一个或多个成员</td></tr></tbody></table><h4 id="操作命令示例-3"><a href="#操作命令示例-3" class="headerlink" title="操作命令示例"></a>操作命令示例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd <span class="built_in">set</span> a a b b c d// 向<span class="built_in">set</span>集合添加a、a、b、b、c、d</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; smembers <span class="built_in">set</span>// 由于集合的唯一性，所以，只有a、b、c、d</span><br><span class="line">1) <span class="string">&quot;d&quot;</span></span><br><span class="line">2) <span class="string">&quot;c&quot;</span></span><br><span class="line">3) <span class="string">&quot;b&quot;</span></span><br><span class="line">4) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; scard <span class="built_in">set</span>// 获取长度</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; srem <span class="built_in">set</span> a b c// 删除集合中指定的对象</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; smembers <span class="built_in">set</span></span><br><span class="line">1) <span class="string">&quot;d&quot;</span></span><br></pre></td></tr></table></figure><h3 id="有序集合sorted-set常用命令"><a href="#有序集合sorted-set常用命令" class="headerlink" title="有序集合sorted set常用命令"></a>有序集合sorted set常用命令</h3><p><code>Redis Sorted Set</code>有序集合是<code>String</code>类型元素的集合，且不允许重复的成员。每个元素都会关联一个<code>double</code>类型的分数(<code>score</code>) 。<code>Redis</code>正是通过分数来为集合中的成员进行从小到大排序。有序集合的成员是唯一的，但分数却可以重复。</p><table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">ZADD key score1 member1 [score2 member2]</td><td align="center">向有序集合添加一个或多个成员，或者更新已存在成员的分数</td></tr><tr><td align="center">ZRANGE key start stop [WITHSCORES]</td><td align="center">通过索引区间返回有序集合中指定区间内的成员</td></tr><tr><td align="center">ZINCRBY key increment member</td><td align="center">有序集合中对指定成员的分数加上增量increment</td></tr><tr><td align="center">ZREM key member [member …]</td><td align="center">移除有序集合中的一个或多个成员</td></tr></tbody></table><h4 id="操作命令示例-4"><a href="#操作命令示例-4" class="headerlink" title="操作命令示例"></a>操作命令示例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd sortset 3 a 1 c 2 b// 向集合sortset添加值与分数</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; zrange sortset 0 -1// 查询，按照分数从小到大排序，最小的在最前面</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zincrby sortset 3 c// 为字段c加3分</span><br><span class="line"><span class="string">&quot;4&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrange sortset 0 -1// 查询，此时c&gt;a&gt;b在最下面</span><br><span class="line">1) <span class="string">&quot;b&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line">3) <span class="string">&quot;c&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrem sortset a b c// 删除有序集合元素</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; zrange sortset 0 -1</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h3 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h3><p>针对key来操作</p><table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">KEYs pattern</td><td align="center">查找所有符合给定模式(pattern)的key</td></tr><tr><td align="center">EXISTs key</td><td align="center">检查给定key是否存在</td></tr><tr><td align="center">TYPE key</td><td align="center">返回key所储存的值的类型</td></tr><tr><td align="center">TTL key</td><td align="center">返回给定key的剩余生存时间(TTL, time to live)，以秒为单位</td></tr><tr><td align="center">DEL key</td><td align="center">该命令用于在key存在是删除key</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *// 查看所有的key</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;table2&quot;</span></span><br><span class="line">3) <span class="string">&quot;table1&quot;</span></span><br><span class="line">4) <span class="string">&quot;NewName&quot;</span></span><br><span class="line">5) <span class="string">&quot;set&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; exists name// 查看某个key是否存在，存在返回1，不存在返回0</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; exists abc</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> name// 查看key的类型 </span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> <span class="built_in">set</span></span><br><span class="line"><span class="built_in">set</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> table1</span><br><span class="line"><span class="built_in">hash</span></span><br><span class="line">127.0.0.1:6379&gt; ttl name// 查看key的剩余存活时间，-1表示永久存活</span><br><span class="line">(<span class="built_in">integer</span>) -1</span><br><span class="line">127.0.0.1:6379&gt; setex <span class="built_in">test</span> 10 <span class="built_in">test</span>// 设置<span class="built_in">test</span>字段存活时间10s，值为<span class="built_in">test</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl <span class="built_in">test</span>// 查看<span class="built_in">test</span></span><br><span class="line">(<span class="built_in">integer</span>) 8</span><br><span class="line">127.0.0.1:6379&gt; ttl <span class="built_in">test</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; keys *// 查看所有key</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;table2&quot;</span></span><br><span class="line">3) <span class="string">&quot;table1&quot;</span></span><br><span class="line">4) <span class="string">&quot;NewName&quot;</span></span><br><span class="line">5) <span class="string">&quot;set&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; del name// 删除name字段</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *// 查看所有key，此时name字段就不存在了</span><br><span class="line">1) <span class="string">&quot;table2&quot;</span></span><br><span class="line">2) <span class="string">&quot;table1&quot;</span></span><br><span class="line">3) <span class="string">&quot;NewName&quot;</span></span><br><span class="line">4) <span class="string">&quot;set&quot;</span></span><br></pre></td></tr></table></figure><h1 id="在Java中使用Redis"><a href="#在Java中使用Redis" class="headerlink" title="在Java中使用Redis"></a>在Java中使用Redis</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>Redis的Java客户端有很多，官方推荐的有三种<ul><li><code>Jedis</code></li><li><code>Lettuce</code></li><li><code>Redisson</code></li></ul></li><li>Spring对Redis客户端进行了整合，提供了SpringDataRedis，在Spring Boot项目中还提供了对应的Starter，即<code>spring-boot-starter-data-redis</code></li></ul><h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><ul><li>使用Jedis的步骤<ol><li>获取连接</li><li>执行操作</li><li>关闭连接</li></ol></li><li>在此之前我们需要导入一下Jedis的maven坐标</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写测试类（测试之前记得打开Redis的服务）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisTestApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 获取连接</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//2. 执行具体操作</span></span><br><span class="line">        jedis.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line">        jedis.hset(<span class="string">&quot;stu&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">        jedis.hset(<span class="string">&quot;stu&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;18&quot;</span>);</span><br><span class="line">        jedis.hset(<span class="string">&quot;stu&quot;</span>, <span class="string">&quot;num&quot;</span>, <span class="string">&quot;4204000400&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; map = jedis.hgetAll(<span class="string">&quot;stu&quot;</span>);</span><br><span class="line">        Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot;:&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="comment">//3. 关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Jedis我们了解一下即可，大多数情况下我们还是用SpringDataRedis的</p><h2 id="Spring-Data-Redis"><a href="#Spring-Data-Redis" class="headerlink" title="Spring Data Redis"></a>Spring Data Redis</h2><p>SpringBoot项目中，可以使用SpringDataRedis来简化Redis（常用）</p><p>Spring Data Redis中提供了一个高度封装的类：RedisTemplate，针对jedis客户端中大量api进行了归类封装，将同一类型操作封装为operation接口，具体分类如下：</p><ul><li>ValueOperations：简单K-V操作</li><li>SetOperations：set类型数据操作</li><li>ZSetOperations：zset类型数据操作</li><li>HashOperations：针对map类型的数据操作</li><li>ListOperations：针对list类型的数据操作</li></ul><p>使用SpringDataRedis，我们首先需要导入它的maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring Boot-redis的依赖包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后重新设置一下序列化器，防止出现乱码，在config包下创建<code>RedisConfig</code>配置类</p><p>键和值的序列化器都需要统一，不能单一的只统一一个，否则会乱码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line"></span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//默认的Key序列化器为：JdkSerializationRedisSerializer</span></span><br><span class="line">        <span class="comment">// 设置键的序列化器统一</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="comment">// 设置值的序列化器统一</span></span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setHashValueSerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后配置一下连接redis的相关配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="comment">#password: 123456</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span> <span class="comment">#操作的是0号数据库</span></span><br><span class="line">    <span class="attr">jedis:</span></span><br><span class="line">      <span class="comment">#Redis连接池配置</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span> <span class="comment">#最大连接数</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">1ms</span> <span class="comment">#连接池最大阻塞等待时间</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">4</span> <span class="comment">#连接池中的最大空闲连接</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span> <span class="comment">#连接池中的最小空闲连接</span></span><br></pre></td></tr></table></figure><p><strong>可以通过命令来改变自己操作的数据库，默认是0号</strong></p><p>在安装Redis的目录下有一个文件：<code>redis.windows.conf</code></p><p>打开它，可以修改数据库的数量</p><p><img src="https://s2.loli.net/2023/08/14/KSWzXx7TV3jcBPn.png" alt="image-20230805141353134"></p><h3 id="string操作"><a href="#string操作" class="headerlink" title="string操作"></a>string操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ValueOperations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo1ApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 设置string</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得string</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置string的超时时间(timeout是一个long型变量,TimeUnit是一个工具类，可以设置秒分时这种)</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>,<span class="number">10L</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当某个key不存在，才执行设置操作，否则不执行</span></span><br><span class="line">        <span class="comment">// 返回boolean类型的值，如果是true，说明执行成功，否则失败</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line">        System.out.println(aBoolean);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hash操作"><a href="#hash操作" class="headerlink" title="hash操作"></a>hash操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">hashTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">HashOperations</span> <span class="variable">hashOperations</span> <span class="operator">=</span> redisTemplate.opsForHash();</span><br><span class="line">    <span class="comment">// put(哪个hash表，什么字段，什么值)</span></span><br><span class="line">    hashOperations.put(<span class="string">&quot;4204000400&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;Hades&quot;</span>);</span><br><span class="line">    hashOperations.put(<span class="string">&quot;4204000400&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;18&quot;</span>);</span><br><span class="line">    hashOperations.put(<span class="string">&quot;4204000400&quot;</span>, <span class="string">&quot;hobby&quot;</span>, <span class="string">&quot;Apex&quot;</span>);</span><br><span class="line">    <span class="comment">//获取map集合</span></span><br><span class="line">    Map&lt;String, String&gt; map = hashOperations.entries(<span class="string">&quot;4204000400&quot;</span>);</span><br><span class="line">    Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">    <span class="comment">// 获取方式和Java的hash操作一致</span></span><br><span class="line">    <span class="keyword">for</span> (String hashKey : keySet) &#123;</span><br><span class="line">        System.out.println(hashKey + <span class="string">&quot;:&quot;</span> + map.get(hashKey));</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">    <span class="comment">//只获取keys</span></span><br><span class="line">    Set&lt;String&gt; keys = hashOperations.keys(<span class="string">&quot;4204000400&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">        System.out.println(key);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">    <span class="comment">//只获取values</span></span><br><span class="line">    List&lt;String&gt; values = hashOperations.values(<span class="string">&quot;4204000400&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String value : values) &#123;</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="list操作"><a href="#list操作" class="headerlink" title="list操作"></a>list操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">listTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ListOperations</span> <span class="variable">listOperations</span> <span class="operator">=</span> redisTemplate.opsForList();</span><br><span class="line">    <span class="comment">//存数据</span></span><br><span class="line">    <span class="comment">// 为testData列表添加A</span></span><br><span class="line">    listOperations.leftPush(<span class="string">&quot;testData&quot;</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">    <span class="comment">// 多值添加</span></span><br><span class="line">    listOperations.leftPushAll(<span class="string">&quot;testData&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>);</span><br><span class="line">    <span class="comment">// 遵循先进后出原则，所以A是在最下面依次往上</span></span><br><span class="line">    List&lt;String&gt; testDatas = listOperations.range(<span class="string">&quot;testData&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//遍历</span></span><br><span class="line">    <span class="keyword">for</span> (String tableData : testDatas) &#123;</span><br><span class="line">        System.out.print(tableData + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="comment">//获取当前list长度，用于遍历</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">size</span> <span class="operator">=</span> listOperations.size(<span class="string">&quot;testData&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> size.intValue();</span><br><span class="line">    <span class="comment">//遍历输出并删除</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; value; i++) &#123;</span><br><span class="line">        System.out.print(listOperations.leftPop(<span class="string">&quot;testData&quot;</span>) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最后输出一下当前list长度</span></span><br><span class="line">    System.out.println();</span><br><span class="line">    System.out.println(listOperations.size(<span class="string">&quot;testData&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="set操作"><a href="#set操作" class="headerlink" title="set操作"></a>set操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SetOperations</span> <span class="variable">setOperations</span> <span class="operator">=</span> redisTemplate.opsForSet();</span><br><span class="line">    <span class="comment">//存数据，这里存了两个a</span></span><br><span class="line">    setOperations.add(<span class="string">&quot;tmp&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">    <span class="comment">//遍历输出(跟Java差不多)</span></span><br><span class="line">    Set&lt;String&gt; tmpData = setOperations.members(<span class="string">&quot;tmp&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String value : tmpData) &#123;</span><br><span class="line">        System.out.print(value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line">    <span class="comment">//删除多值</span></span><br><span class="line">    setOperations.remove(<span class="string">&quot;tmp&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">    <span class="comment">//再次遍历输出</span></span><br><span class="line">    tmpData = setOperations.members(<span class="string">&quot;tmp&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String value : tmpData) &#123;</span><br><span class="line">        System.out.print(value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ZSet数据操作"><a href="#ZSet数据操作" class="headerlink" title="ZSet数据操作"></a>ZSet数据操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">zsetTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ZSetOperations</span> <span class="variable">zSetOperations</span> <span class="operator">=</span> redisTemplate.opsForZSet();</span><br><span class="line">    <span class="comment">//存scope值</span></span><br><span class="line">    zSetOperations.add(<span class="string">&quot;myZset&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="number">0.0</span>);</span><br><span class="line">    zSetOperations.add(<span class="string">&quot;myZset&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="number">1.0</span>);</span><br><span class="line">    zSetOperations.add(<span class="string">&quot;myZset&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="number">2.0</span>);</span><br><span class="line">    zSetOperations.add(<span class="string">&quot;myZset&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="number">3.0</span>);</span><br><span class="line">    <span class="comment">//遍历所有</span></span><br><span class="line">    Set&lt;String&gt; myZset = zSetOperations.range(<span class="string">&quot;myZset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (String s : myZset) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改scope</span></span><br><span class="line">    zSetOperations.incrementScore(<span class="string">&quot;myZset&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="number">4.0</span>);</span><br><span class="line">    <span class="comment">//取值</span></span><br><span class="line">    System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">    myZset = zSetOperations.range(<span class="string">&quot;myZset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (String s : myZset) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除成员</span></span><br><span class="line">    zSetOperations.remove(<span class="string">&quot;myZset&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">    <span class="comment">//取值</span></span><br><span class="line">    System.out.println(<span class="string">&quot;-------------------&quot;</span>);</span><br><span class="line">    myZset = zSetOperations.range(<span class="string">&quot;myZset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (String s : myZset) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通用操作"><a href="#通用操作" class="headerlink" title="通用操作"></a>通用操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">commonTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//查看所有key(keys *)</span></span><br><span class="line">    Set&lt;String&gt; keys = redisTemplate.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">        System.out.println(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查看是否存在指定key</span></span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">    System.out.println(redisTemplate.hasKey(<span class="string">&quot;Random&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">    <span class="comment">//删除指定key，并再次查看</span></span><br><span class="line">    redisTemplate.delete(<span class="string">&quot;myZset&quot;</span>);</span><br><span class="line">    keys = redisTemplate.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">        System.out.println(key);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">    <span class="comment">//输出指定key的类型</span></span><br><span class="line">    System.out.println(redisTemplate.type(<span class="string">&quot;tmp&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瑞吉外卖 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git工具</title>
      <link href="/eastwind/a97adaa0.html"/>
      <url>/eastwind/a97adaa0.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、Git概述"><a href="#1、Git概述" class="headerlink" title="1、Git概述"></a>1、Git概述</h1><ul><li>Git是一个分布式版本控制工具，主要用于管理开发过程中的源代码文件（Java类、xml文件、html页面等），在软件开发过程中被广泛使用。</li><li>作用<ol><li>代码回溯</li><li>版本切换</li><li>多人协作</li><li>远程备份</li></ol></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>Git 是一个分布式版本控制工具，通常用来对软件开发过程中的源代码文件进行管理。通过Git仓库来存储和管理这些文件，Git仓库分为两种:<ol><li>本地仓库：开发人员自己电脑上的Git仓库</li><li>远程仓库：远程服务器上的Git仓库</li></ol></li><li><code>commit</code>：提交。将本地文件和版本信息保存到本地仓库</li><li><code>push</code>：推送，将本地仓库文件和版本信息上传到远程仓库</li><li><code>pull</code>：拉取，将远程仓库文件和版本信息下载到本地仓库</li></ul><p>Git一般的操作就是将本地仓库中的数据提交后推送到远程仓库上，而另一个本地仓库需要时只需要拉取一下在远程仓库上的数据即可，反之同理</p><h2 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h2><ul><li>这个应该没啥好说的，安装完毕之后再任意目录点击右键出现如下菜单，则说明安装成功</li></ul><img src="https://s2.loli.net/2023/08/14/45xdOwlsTiePh1n.png" alt="image-20230801081300669" style="zoom:50%;" /><p>一般经常使用的都是<code>Git Bash Here</code></p><h1 id="Git代码托管服务"><a href="#Git代码托管服务" class="headerlink" title="Git代码托管服务"></a>Git代码托管服务</h1><h2 id="常用的Git代码托管服务"><a href="#常用的Git代码托管服务" class="headerlink" title="常用的Git代码托管服务"></a>常用的Git代码托管服务</h2><ul><li>Git中存在两种类型的仓库，即<code>本地仓库</code>和<code>远程仓库</code>，那么我们如何搭建<code>- Git远程仓库</code>呢？</li><li>我们可以借助互联网上提供的一些代码托管服务俩实现，比较常用的有GitHub、Gitee（狗都不用）、GitLab等<ul><li><code>GitHub</code>（ 地址：<code>https://github.com/</code> ），是一个面向开源私有软件项目的托管平台，因为只支持Git作为唯一的版本库格式进行托管，故名GitHub</li><li><code>Gitee</code>（地址： <code>https://gitee.com/</code> ），又名码云，是国内的一个代码托管平台，由于服务器在国内，所以相比较于GitHub，Gitee速度更快</li><li><code>GitLab</code>（地址： <code>https://about.gitlab.com/</code> ），是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的Web服务</li><li><code>BitBucket</code>（地址：<code>https://bitbucket.org/</code>） ，是一家代码托管网站，采用Mercurial和Git作为分布式版本控制系统，同时提供商业计划和免费账户</li></ul></li></ul><h2 id="使用GitHub代码托管服务"><a href="#使用GitHub代码托管服务" class="headerlink" title="使用GitHub代码托管服务"></a>使用GitHub代码托管服务</h2><p>具体步骤如下</p><h3 id="注册登录GitHub账号"><a href="#注册登录GitHub账号" class="headerlink" title="注册登录GitHub账号"></a>注册登录GitHub账号</h3><p>注册Github账号<code>https://github.com/</code></p><p>通过这个网址来注册github账号，注册和登录就没什么好说的了</p><h3 id="创建一个远程仓库"><a href="#创建一个远程仓库" class="headerlink" title="创建一个远程仓库"></a>创建一个远程仓库</h3><p><img src="https://s2.loli.net/2023/08/14/btKhIm6Lv5NEVjC.png" alt="image-20230801084001670"></p><p>右上角有一个+号，点开后New repository可以来创建远程仓库</p><img src="https://s2.loli.net/2023/08/14/56hWqkGQ2cyzmU3.png" alt="image-20230801085420384" style="zoom:50%;" /><p>就正常的创建就行了，下面都有这些英文解释，基本上不需要太大的变动</p><p>创建完成后是这个样子</p><img src="https://s2.loli.net/2023/08/14/XbYT783nO2QIKv5.png" alt="image-20230801085648789" style="zoom:50%;" /><h3 id="邀请其他用户成为仓库成员"><a href="#邀请其他用户成为仓库成员" class="headerlink" title="邀请其他用户成为仓库成员"></a>邀请其他用户成为仓库成员</h3><p><img src="https://s2.loli.net/2023/08/14/E6tsWbdlpzfhIym.png" alt="image-20230801085909782"></p><h1 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h1><h2 id="Git全局设置"><a href="#Git全局设置" class="headerlink" title="Git全局设置"></a>Git全局设置</h2><p>安装Git后首先要做的是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用该用户的信息</p><p>在Git命令行中执行下面的命令：</p><ul><li>设置用户信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的用户名&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure><ul><li>查看配置信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><ul><li>签名的作用是为了区分不同操作者的身份</li><li>用户的签名信息在每一个版本的提交信息中能够看到，以确认本次提交是谁做的</li><li>Git首次安装必须设置一下用户签名，否则无法提交代码</li></ul><p>注意：上面设置的user.name和user.email并不是在Github上注册的用户名和邮箱，此处可以任意设置\</p><p>通过上面的命令设置的信息都保存在<code>~/.gitconfig</code>文件中</p><h2 id="获取Git仓库"><a href="#获取Git仓库" class="headerlink" title="获取Git仓库"></a>获取Git仓库</h2><p>要使用Git对我们的代码进行版本控制，首先需要获得Git仓库</p><p><code>获取Git仓库的命令</code></p><p>本地初始化（不常用）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>从远程仓库克隆（常用）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span></span><br></pre></td></tr></table></figure><p>这里给一个简单示例将远程仓库克隆过来</p><p>我们创建一个文件夹暂存一下我们的Git仓库</p><p><img src="https://s2.loli.net/2023/08/14/lHNgJVjkiuGXZoe.png" alt="image-20230801095043522"></p><p>这里是我们的一个文件夹,我们右击鼠标Git Bash Here</p><img src="https://s2.loli.net/2023/08/14/cYyKoNDZSpG1VrT.png" alt="image-20230801095132780" style="zoom:50%;" /><p>这样就来到了我们的一个文件夹内</p><p>我们去GitHub上面复制一下HTTPS到这来</p><p><img src="https://s2.loli.net/2023/08/14/KIPNd3jXfHQzFZw.png" alt="image-20230801095830555"></p><p>我们执行git clone “你的远程仓库地址”</p><p><img src="https://s2.loli.net/2023/08/14/WE39t6KP7GkCvSQ.png" alt="image-20230801095904294"></p><p>因为我的远程仓库是空的，所以报了一个警告，我们再到文件夹中查看</p><img src="https://s2.loli.net/2023/08/14/FhJO7w85Cby1oBU.png" alt="image-20230801095935106" style="zoom:50%;" /><p>此时，远程仓库就被克隆过来了</p><p>注意：仓库是不能嵌套的，不能在一个仓库目录内，克隆&#x2F;创建另一个仓库。</p><h2 id="工作区、暂存区、版本库概念"><a href="#工作区、暂存区、版本库概念" class="headerlink" title="工作区、暂存区、版本库概念"></a>工作区、暂存区、版本库概念</h2><p>为了更好的学习Git，我们需要了解一下Git相关的一些概念，这些概念在后面的学习中会经常提到。</p><ul><li>版本库：其实你在<code>git init</code>之后，会在当前文件夹创建一个隐藏文件<code>.git</code>，这个文件就是版本库，版本库中存储了很多的配置信息、日志信息和文件版本信息等</li><li>工作目录（工作区）：包含<code>.git</code>文件夹的目录就是工作目录，主要用于存放开发的代码</li><li>暂存区：一个临时保存修改文件的地方<ul><li><code>.git</code>文件夹内有很多文件，其中有一个名为<code>index</code>的文件就是暂存区，也可以叫做<code>stage</code></li></ul></li></ul><h2 id="Git工作区中文件的状态"><a href="#Git工作区中文件的状态" class="headerlink" title="Git工作区中文件的状态"></a>Git工作区中文件的状态</h2><ul><li>Git工作目录下的文件存在两种状态<ul><li><code>untracked</code>未跟踪（未被纳入版本控制）</li><li><code>tracked</code>已跟踪（被纳入版本控制）<ul><li><code>Unmodified</code>未修改状态</li><li><code>Modified</code>已修改状态</li><li><code>Staged</code>已暂存状态</li></ul></li></ul></li></ul><p>这些文件的状态会随着我们执行Git的命令发生变化</p><h2 id="本地仓库操作"><a href="#本地仓库操作" class="headerlink" title="本地仓库操作"></a>本地仓库操作</h2><h2 id="本地仓库相关命令"><a href="#本地仓库相关命令" class="headerlink" title="本地仓库相关命令"></a>本地仓库相关命令</h2><table><thead><tr><th align="center">命令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">git config —global user.name 用户名</td><td align="center">设置用户签名</td></tr><tr><td align="center">git config —global user.email 邮箱</td><td align="center">设置用户签名</td></tr><tr><td align="center">git init</td><td align="center">初始化本地库</td></tr><tr><td align="center">git status</td><td align="center">查看文件状态</td></tr><tr><td align="center">git add [文件名称]</td><td align="center">将文件的修改加入暂存区</td></tr><tr><td align="center">git reset [文件名称]</td><td align="center">将暂存区的文件取消暂存</td></tr><tr><td align="center">git reset —hard [版本号]</td><td align="center">切换到指定版本</td></tr><tr><td align="center">git commit [文件名]</td><td align="center">将暂存区文件提交到版本库中</td></tr><tr><td align="center">git commit -m “日志信息”</td><td align="center">将暂存区文件提交到版本库中并增加日志信息</td></tr><tr><td align="center">git log</td><td align="center">查看日志</td></tr><tr><td align="center">git reflog</td><td align="center">查看历史记录</td></tr></tbody></table><h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><img src="https://s2.loli.net/2023/08/14/DcuWnpUvzVs386k.png" alt="image-20230801100210629" style="zoom: 67%;" /><h3 id="git-add-文件名称"><a href="#git-add-文件名称" class="headerlink" title="git add [文件名称]"></a>git add [文件名称]</h3><p>将未跟踪的文件加入到暂存区，并查看文件状态</p><img src="https://s2.loli.net/2023/08/14/Qjz8ceA2HuIbnUY.png" alt="image-20230801100430539" style="zoom:67%;" /><p>此时发现暂存区就有文件了</p><h3 id="gie-reset"><a href="#gie-reset" class="headerlink" title="gie reset"></a>gie reset</h3><p>将暂存区的文件取消暂存，并查看文件状态</p><img src="https://s2.loli.net/2023/08/14/vDKi6qL4SCQVj12.png" alt="image-20230801100523282" style="zoom:67%;" /><h3 id="git-commit-m-“日志信息”-文件名"><a href="#git-commit-m-“日志信息”-文件名" class="headerlink" title="git commit -m “日志信息” [文件名]"></a>git commit -m “日志信息” [文件名]</h3><p>将暂存区的文件提交到版本库中</p><ul><li>若提交多次，会产生多个版本号</li><li>使用<code>git log</code>来查看版本号</li></ul><img src="https://s2.loli.net/2023/08/14/tDiwLMRQ8yh3l1z.png" alt="image-20230801100838568" style="zoom: 67%;" /><p>提交之前需要先添加到暂存区</p><h3 id="git-reset-–hard-版本号"><a href="#git-reset-–hard-版本号" class="headerlink" title="git reset –hard [版本号]&#96;"></a>git reset –hard [版本号]&#96;</h3><p>切换到指定版本</p><p>这个版本号是<code>git commit</code>提交后在<code>git log</code>上查看的，这里就不做演示了</p><h3 id="git-rm-文件名"><a href="#git-rm-文件名" class="headerlink" title="git rm [文件名]"></a>git rm [文件名]</h3><p>删除工作区文件，并查看状态，提交之后再次查看状态</p><p><img src="https://s2.loli.net/2023/08/14/EfvZsrLyqwptnAO.png" alt="image-20230801101357472"></p><p>删除的只是工作区的，仓库里的并没有被删除</p><h2 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h2><table><thead><tr><th align="center">命令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">git remote</td><td align="center">查看远程仓库</td></tr><tr><td align="center">git remote -v</td><td align="center">查看当前所有远程地址别名</td></tr><tr><td align="center">git remote add [short-name] [url]</td><td align="center">添加远程仓库</td></tr><tr><td align="center">git remote rm [short-name]</td><td align="center">移除远程仓库</td></tr><tr><td align="center">git clone [url]</td><td align="center">从远程仓库克隆</td></tr><tr><td align="center">git pull [short-name] [branch-name]</td><td align="center">从远程仓库拉取</td></tr><tr><td align="center">git push [short-name] [branch-name]</td><td align="center">推送到远程仓库</td></tr></tbody></table><h3 id="git-remote查看远程仓库"><a href="#git-remote查看远程仓库" class="headerlink" title="git remote查看远程仓库"></a>git remote查看远程仓库</h3><ul><li>如果想查看已经配置的远程仓库服务器，可以运行<code>git remote</code>命令。它会列出指定的每一个远程服务器的简写</li><li>如果已经克隆了远程仓库，那么至少应该能看到<code>origin</code>，这是<code>Git克隆</code>的仓库服务器的<code>默认</code>名字</li></ul><h3 id="git-remote-v则可以查看更为详细的信息"><a href="#git-remote-v则可以查看更为详细的信息" class="headerlink" title="git remote -v则可以查看更为详细的信息"></a>git remote -v则可以查看更为详细的信息</h3><p><img src="https://s2.loli.net/2023/08/14/SX37Reap2HVlbvc.png" alt="image-20230802064828067"></p><h3 id="git-remote-add-short-name-url"><a href="#git-remote-add-short-name-url" class="headerlink" title="git remote add [short-name] [url]"></a>git remote add [short-name] [url]</h3><p>添加远程仓库，添加一个新的远程Git仓库，同时也指定搞一个可以引用的缩写</p><ul><li>使用<code>git remote -v</code>查看是否连接成功，成功连接之后，我们就可以向仓库推送&#x2F;拉取数据了</li><li>移除远程仓库，运行<code>git remote rm [short-name]</code></li><li>命令<code>git remote add &lt;shortname&gt; &lt;url&gt;</code>：将远程仓库唯一的URL<code>&lt;url&gt;</code> 映射成为 在本地仓库中对远程仓库起的别名<code>&lt;shortname&gt;</code>。</li><li>参数<code>&lt;shortname&gt;</code>：<code>在本地仓库中对远程仓库起的别名</code>。而我们按照Git官方教程，一般会把参数<code>&lt;shortname&gt;</code>设置为<code>origin</code>。<br>   为什么要强调<code>在本地仓库中</code>？因为我们要知道<code>git remote add &lt;shortname&gt; &lt;url&gt;</code>是在我们自己的本地仓库对远程仓库起的别名，这个别名只能在我们自己的本地仓库使用，在真正的远程仓库那边，远程仓库的名字是一个绝对唯一的URL(比如:<code>git@github.com:michaelliao/learngit.git</code>)，而不是<code>origin</code>。甚至我们的开发团队成员也可以自定义这个开发团队成员他个人的本地仓库中对远程仓库起的别名</li></ul><p><img src="https://s2.loli.net/2023/08/14/lKOcaJjy467M8wG.png" alt="image-20230802070539065"></p><p>克隆仓库的命令格式是<code>git clone [url]</code></p><ul><li>如果你想获得一份已经存在了的Git仓库的拷贝，那么就需要<code>git clone</code>命令</li><li>Git克隆的是该Git仓库服务器上的几乎所有数据（包括日志信息，历史记录等），而不仅仅是复制工作所需要的的文件</li><li>当你执行<code>git clone</code>命令时，默认配置下远程Git仓库的每一个文件的每一个版本都会被拉取下来</li></ul><p>使用<code>git push [remote-name] [branch-name]</code>推送文件到远程仓库</p><p>branch-name是分支的名字，也就是仓库名旁边那个蓝色的东西，我这里设置成了master，可以自己调整</p><p><img src="https://s2.loli.net/2023/08/14/OqyWIBUi5X7gYCz.png" alt="image-20230802070836415"></p><p>如果使用Gitee，可能需要登录验证</p><h3 id="git-pull-short-name-branch-name"><a href="#git-pull-short-name-branch-name" class="headerlink" title="git pull [short-name] [branch-name]"></a>git pull [short-name] [branch-name]</h3><p>从远程仓库获取最新版本并合并到本地仓库</p><ul><li>一般是多人协作的时候用，我和小明分工合作，一人写一部分，他写完上传，然后我拉取下来合并到本地仓库，会方便很多</li><li>注意:如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库拉取文件的时候会报错<code>fatal: refusing to merge unrelated histories</code></li><li>解决此问题可以在<code>git pull</code>命令后加入参数<code>--allow-unrelated-histories</code></li></ul><p><img src="https://s2.loli.net/2023/08/14/CsNBILUPOXjAzac.png" alt="image-20230802071235216"></p><h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><ul><li>分支是Git使用过程中非常重要的概念</li><li>几乎所有的版本控制系统个都以某种形式支持分支</li><li>使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线</li><li>Git的<code>master</code>分支并不是一个特殊的分支，它与其他分支没有区别</li><li>之所以几乎每一个仓库都有<code>master</code>分支，是因为git init命令默认创建它，而大多数人都懒得去改它</li><li>同一个仓库可以有多个分支，各个分支相互独立，互不干扰</li></ul><h3 id="分支操作常用命令"><a href="#分支操作常用命令" class="headerlink" title="分支操作常用命令"></a>分支操作常用命令</h3><table><thead><tr><th align="center">命令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">git branch</td><td align="center">查看分支：列出本地的所有分支</td></tr><tr><td align="center">git branch -r</td><td align="center">查看分支：列出所有的远程分支</td></tr><tr><td align="center">git branch -a</td><td align="center">查看分支：列出所有的本地分支和远程分支</td></tr><tr><td align="center">git branch [branch-name]</td><td align="center">创建分支</td></tr><tr><td align="center">git checkout [branch-name]</td><td align="center">切换分支</td></tr><tr><td align="center">git push [short-Name] [branch-name]</td><td align="center">推送至远程仓库分支</td></tr><tr><td align="center">git merge [branch-name]</td><td align="center">合并分支</td></tr><tr><td align="center">git branch -d [branch-name]</td><td align="center">删除分支</td></tr><tr><td align="center">git branch -D [branch-name]</td><td align="center">删除分支（即使该分支中进行了一些开发动作）</td></tr><tr><td align="center">git push [short-Name] –d [branch-name]</td><td align="center">删除远程仓库中的分支</td></tr></tbody></table><h3 id="分支操作展示"><a href="#分支操作展示" class="headerlink" title="分支操作展示"></a>分支操作展示</h3><ul><li>列出本地的所有分支<ul><li><code>git branch</code></li></ul></li><li>列出所有的远程分支<ul><li><code>git branch -r</code></li></ul></li><li>列出所有的本地和远程分支<ul><li><code>git branch -a</code></li></ul></li></ul><p><img src="https://s2.loli.net/2023/08/14/j5uiOqsIEy7UJo3.png" alt="image-20230802211110085"></p><ul><li>创建分支<ul><li><code>git branch [branch-name]</code></li></ul></li><li>切换分支<ul><li><code>git checkout [branch-name]</code></li></ul></li><li>推送至远程仓库分支<ul><li><code>git push [short-Name] [branch-name]</code></li></ul></li></ul><p><img src="https://s2.loli.net/2023/08/14/mhTvjgnL2Z65yIA.png" alt="image-20230802212112830"></p><p>创建完成后，可以在Github对应的仓库中查看分支</p><img src="https://s2.loli.net/2023/08/14/pP4wtBEDT9u7HRl.png" alt="image-20230802212100028" style="zoom:50%;" /><p>合并分支</p><ul><li><code>git merge [branch-name]</code></li><li>我们先在<code>test01</code>分支中添加点东西，然后再切换到<code>master</code>分支，合并分支，在<code>master</code>分支中可以看到<code>test01</code>分支中新添加的文件</li></ul><p><img src="https://s2.loli.net/2023/08/14/xmqpPZfnLz9JSUi.png" alt="image-20230802212537427"></p><p>合并分支的时候可能会出现冲突</p><ul><li>冲突产生的原因<ul><li>合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改。</li><li>Git 无法替我们决定使用哪一个。必须通过手动操作来决定新代码内容。</li></ul></li><li>解决方案<ul><li>编辑有冲突的文件，决定要使用的内容</li><li>将编辑好的文件添加到暂存区，（使用<code>git add</code>命令）</li><li>最后执行提交（注意：此时的提交只输入<code>git commit</code>，不要加文件名，或者执行<code>git commit [文件名] -i</code>）</li></ul></li></ul><p>删除分支</p><ul><li><code>git branch -d [branch-name]</code></li></ul><p><img src="https://s2.loli.net/2023/08/14/yUbsQZLRD7OrCSI.png" alt="image-20230802212658822"></p><h2 id="标签操作"><a href="#标签操作" class="headerlink" title="标签操作"></a>标签操作</h2><h3 id="简述-1"><a href="#简述-1" class="headerlink" title="简述"></a>简述</h3><ul><li>Git中的标签，指的是某个分支特定时间点的状态。</li><li>通过标签，我们可以很方便地切换到标记时的状态（给我的感觉像是Linux的快照）</li></ul><h3 id="标签操作的常用命令"><a href="#标签操作的常用命令" class="headerlink" title="标签操作的常用命令"></a>标签操作的常用命令</h3><table><thead><tr><th align="center">命令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">git tag</td><td align="center">创建标签</td></tr><tr><td align="center">git tag [name]</td><td align="center">创建标签</td></tr><tr><td align="center">git push [shortName] [name]</td><td align="center">将标签推送到远程仓库</td></tr><tr><td align="center">git checkout -b [branch] [name]</td><td align="center">检出标签</td></tr></tbody></table><img src="https://s2.loli.net/2023/08/14/VoNpPRAXSjkaBi3.png" alt="image-20230802214005607" style="zoom:50%;" /><p>分支与标签的区别</p><ul><li><code>标签</code> 是一个<code>静态</code>的概念，一旦标签确定后，其中的文件的状态就确定了。</li><li><code>分支</code> 是一个<code>动态</code>的概念，其中的文件的状态可以发生变化。</li></ul><h1 id="在IDEA中使用Git"><a href="#在IDEA中使用Git" class="headerlink" title="在IDEA中使用Git"></a>在IDEA中使用Git</h1><ul><li>在IDEA中使用Git，其实也是用的我们自己安装的Git</li><li>在 IDEA 中使用 Git 获取仓库有两种方式：   <ol><li>本地初始仓库<ul><li>选择VCS选项卡 —&gt; 创建Git仓库 —&gt; 选择需要被Git管理的目录 —&gt; 确定</li></ul></li><li>从远程仓库克隆（常用）<ul><li>这个可以自己选择克隆的本地位置</li><li>可以直接把远程仓库的代码都克隆到本地</li><li>远程克隆下来的项目会自带一个文件：<code>.gitignore</code>文件，在里面的信息是代表哪些文件不需要交给git管理</li></ul></li></ol></li></ul><p>关于本地仓库操作、远程仓库操作、分支操作，IDEA都给我们提供了图形化界面，方便我们使用，这里就不再展开说明了，不太明白的地方可以上百度搜搜</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 瑞吉外卖 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
